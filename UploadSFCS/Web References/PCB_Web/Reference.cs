//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.17929 版自动生成。
// 
#pragma warning disable 1591

namespace UploadSFCS.PCB_Web {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDynamicDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteWithSingleTrnDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteWithDefectRemarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteWithErrorDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTVADCOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTVDACOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTVQCOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTVQC1OperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadMonitorWhiteBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTVPowerRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTVHDCPKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHDCPKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTVCIPlusKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCIPlusKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadUSNItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadUSNItemWithBarcodeValidationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsnIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsnIdWithoutCombineOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHDCPFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFixtureIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadVolTageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTPSKeyValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTPSLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTPSRetestOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOPIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsnGenealogyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEDIDFilenameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadEDIDResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadMonitorEDIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTestLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadRuninRackUnitStartDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTestFixtureOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadUSNInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadUSNInfo1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMOInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetReflowStageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSetCA210OffsetTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestSuiteInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestSuiteInfo1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMOItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadMonitorLpByUsnOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadMonitorLPOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckErrorCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRIRackPositionByUSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNByRIRackPositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDownTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNByUSNInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSPCConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUPNInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPanelParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPanelParameter1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUUTDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNByCSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCertifyPOOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSWCPNForUPNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNInfoByMACOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSyncStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEarliestSIListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDeleteSIInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableGradeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastGradeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSamplingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSkuBomDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentDBSysdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNByRIPalletIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback BreakUpUSNRIPalletByUSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMO53PNItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTEModelNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMFGTypeByStageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTestEquipmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTestEquipments1OperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTestData1OperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFGCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPreparedMOListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUSNlistByRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadRuninRackUnitStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFixtureUsedTimesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSFCDLSkillOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadSonyIDDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadSonyIDData1OperationCompleted;
        
        private System.Threading.SendOrPostCallback AllocateSonyKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllocateSonyKey1OperationCompleted;
        
        private System.Threading.SendOrPostCallback BindingUSNRIPalletIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LinkUSNRIPalletIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDcsChassisInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCfiNewSiListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCfiSiInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCfiSiStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCfiDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCfiHwInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadBurnInRoomTemperatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback IPCUSNPositionLinkageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInOutIPCBurnInRoomOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferIPCBurnInLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LinkMultiBoardUSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequstJDMD3FileJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJDMD3FileJobInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateJDMD3FileJobStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAISImageFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAISImageFileName1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIDValueByMOOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetICPNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEngravingInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMacSecurityKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadRendyResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadRendyAntiTheftCCIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTpsUpnInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeNotReadyMoListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTeReadyFlagByMoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMoInfoByMoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMOItemByMoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTVKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTVKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefectUsnListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsnDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback RosaHddMoLinkCRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastTransactionDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastFixtureIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsnRepairOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsnInfoAtStageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadRfEquTestTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAutoStickLabelPNOperationCompleted;
        
        private System.Threading.SendOrPostCallback RosaSwPoNackRuleCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEDI860SignalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsnByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadPcbLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadEngravingResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadAstroMoInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpnInfoFromViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKeyInfoFromViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadRuninRackStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllocateAndroidKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckEngravingBoradBarcLotNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllocateAwaitingUnitSnListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCompleteEngravingUnitSnOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMoAndBoardInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get2SLabelInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback Upload2SLabelInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsnInformationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTvDacDataListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SwapUSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEllaRackLoctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebServiceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebServiceConfigOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::UploadSFCS.Properties.Settings.Default.UploadSFCS_PCB_Web_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDynamicDataCompletedEventHandler GetDynamicDataCompleted;
        
        /// <remarks/>
        public event CheckRouteCompletedEventHandler CheckRouteCompleted;
        
        /// <remarks/>
        public event CompleteCompletedEventHandler CompleteCompleted;
        
        /// <remarks/>
        public event CompleteWithSingleTrnDataCompletedEventHandler CompleteWithSingleTrnDataCompleted;
        
        /// <remarks/>
        public event CompleteWithDefectRemarkCompletedEventHandler CompleteWithDefectRemarkCompleted;
        
        /// <remarks/>
        public event CompleteWithErrorDescriptionCompletedEventHandler CompleteWithErrorDescriptionCompleted;
        
        /// <remarks/>
        public event UploadTVADCCompletedEventHandler UploadTVADCCompleted;
        
        /// <remarks/>
        public event UploadTVDACCompletedEventHandler UploadTVDACCompleted;
        
        /// <remarks/>
        public event UploadTVQCCompletedEventHandler UploadTVQCCompleted;
        
        /// <remarks/>
        public event UploadTVQC1CompletedEventHandler UploadTVQC1Completed;
        
        /// <remarks/>
        public event UploadMonitorWhiteBalanceCompletedEventHandler UploadMonitorWhiteBalanceCompleted;
        
        /// <remarks/>
        public event UploadTVPowerRangeCompletedEventHandler UploadTVPowerRangeCompleted;
        
        /// <remarks/>
        public event UploadTVHDCPKeyCompletedEventHandler UploadTVHDCPKeyCompleted;
        
        /// <remarks/>
        public event GetHDCPKeyCompletedEventHandler GetHDCPKeyCompleted;
        
        /// <remarks/>
        public event UploadTVCIPlusKeyCompletedEventHandler UploadTVCIPlusKeyCompleted;
        
        /// <remarks/>
        public event GetCIPlusKeyCompletedEventHandler GetCIPlusKeyCompleted;
        
        /// <remarks/>
        public event GetUSNItemCompletedEventHandler GetUSNItemCompleted;
        
        /// <remarks/>
        public event UploadUSNItemCompletedEventHandler UploadUSNItemCompleted;
        
        /// <remarks/>
        public event UploadUSNItemWithBarcodeValidationCompletedEventHandler UploadUSNItemWithBarcodeValidationCompleted;
        
        /// <remarks/>
        public event GetUsnIDCompletedEventHandler GetUsnIDCompleted;
        
        /// <remarks/>
        public event GetUsnIdWithoutCombineCompletedEventHandler GetUsnIdWithoutCombineCompleted;
        
        /// <remarks/>
        public event GetHDCPFileNameCompletedEventHandler GetHDCPFileNameCompleted;
        
        /// <remarks/>
        public event UploadFixtureIDCompletedEventHandler UploadFixtureIDCompleted;
        
        /// <remarks/>
        public event UploadVolTageCompletedEventHandler UploadVolTageCompleted;
        
        /// <remarks/>
        public event UploadTPSKeyValueCompletedEventHandler UploadTPSKeyValueCompleted;
        
        /// <remarks/>
        public event UploadTPSLogCompletedEventHandler UploadTPSLogCompleted;
        
        /// <remarks/>
        public event UploadTPSRetestCompletedEventHandler UploadTPSRetestCompleted;
        
        /// <remarks/>
        public event CheckOPIDCompletedEventHandler CheckOPIDCompleted;
        
        /// <remarks/>
        public event GetUsnGenealogyCompletedEventHandler GetUsnGenealogyCompleted;
        
        /// <remarks/>
        public event GetEDIDFilenameCompletedEventHandler GetEDIDFilenameCompleted;
        
        /// <remarks/>
        public event UploadEDIDResultCompletedEventHandler UploadEDIDResultCompleted;
        
        /// <remarks/>
        public event UploadMonitorEDIDCompletedEventHandler UploadMonitorEDIDCompleted;
        
        /// <remarks/>
        public event UploadTestLogCompletedEventHandler UploadTestLogCompleted;
        
        /// <remarks/>
        public event UploadRuninRackUnitStartDateCompletedEventHandler UploadRuninRackUnitStartDateCompleted;
        
        /// <remarks/>
        public event CheckTestFixtureCompletedEventHandler CheckTestFixtureCompleted;
        
        /// <remarks/>
        public event UploadUSNInfoCompletedEventHandler UploadUSNInfoCompleted;
        
        /// <remarks/>
        public event UploadUSNInfo1CompletedEventHandler UploadUSNInfo1Completed;
        
        /// <remarks/>
        public event GetMOInfoCompletedEventHandler GetMOInfoCompleted;
        
        /// <remarks/>
        public event GetTransactionTimeCompletedEventHandler GetTransactionTimeCompleted;
        
        /// <remarks/>
        public event SetReflowStageCompletedEventHandler SetReflowStageCompleted;
        
        /// <remarks/>
        public event GetSetCA210OffsetTableCompletedEventHandler GetSetCA210OffsetTableCompleted;
        
        /// <remarks/>
        public event GetTestSuiteInfoCompletedEventHandler GetTestSuiteInfoCompleted;
        
        /// <remarks/>
        public event GetTestSuiteInfo1CompletedEventHandler GetTestSuiteInfo1Completed;
        
        /// <remarks/>
        public event GetUSNInfoCompletedEventHandler GetUSNInfoCompleted;
        
        /// <remarks/>
        public event GetMOItemCompletedEventHandler GetMOItemCompleted;
        
        /// <remarks/>
        public event UploadMonitorLpByUsnCompletedEventHandler UploadMonitorLpByUsnCompleted;
        
        /// <remarks/>
        public event UploadMonitorLPCompletedEventHandler UploadMonitorLPCompleted;
        
        /// <remarks/>
        public event CheckErrorCodeCompletedEventHandler CheckErrorCodeCompleted;
        
        /// <remarks/>
        public event GetRIRackPositionByUSNCompletedEventHandler GetRIRackPositionByUSNCompleted;
        
        /// <remarks/>
        public event GetUSNByRIRackPositionCompletedEventHandler GetUSNByRIRackPositionCompleted;
        
        /// <remarks/>
        public event UploadDownTimeCompletedEventHandler UploadDownTimeCompleted;
        
        /// <remarks/>
        public event GetUSNInformationCompletedEventHandler GetUSNInformationCompleted;
        
        /// <remarks/>
        public event GetUSNByUSNInfoCompletedEventHandler GetUSNByUSNInfoCompleted;
        
        /// <remarks/>
        public event GetMessageCompletedEventHandler GetMessageCompleted;
        
        /// <remarks/>
        public event GetSPCConfigCompletedEventHandler GetSPCConfigCompleted;
        
        /// <remarks/>
        public event GetUPNInformationCompletedEventHandler GetUPNInformationCompleted;
        
        /// <remarks/>
        public event GetPanelParameterCompletedEventHandler GetPanelParameterCompleted;
        
        /// <remarks/>
        public event GetPanelParameter1CompletedEventHandler GetPanelParameter1Completed;
        
        /// <remarks/>
        public event GetUUTDataCompletedEventHandler GetUUTDataCompleted;
        
        /// <remarks/>
        public event GetUSNByCSNCompletedEventHandler GetUSNByCSNCompleted;
        
        /// <remarks/>
        public event UploadCertifyPOCompletedEventHandler UploadCertifyPOCompleted;
        
        /// <remarks/>
        public event GetSWCPNForUPNCompletedEventHandler GetSWCPNForUPNCompleted;
        
        /// <remarks/>
        public event GetUSNInfoByMACCompletedEventHandler GetUSNInfoByMACCompleted;
        
        /// <remarks/>
        public event UpdateSyncStatusCompletedEventHandler UpdateSyncStatusCompleted;
        
        /// <remarks/>
        public event GetEarliestSIListCompletedEventHandler GetEarliestSIListCompleted;
        
        /// <remarks/>
        public event UpdateDeleteSIInfoCompletedEventHandler UpdateDeleteSIInfoCompleted;
        
        /// <remarks/>
        public event GetAvailableGradeListCompletedEventHandler GetAvailableGradeListCompleted;
        
        /// <remarks/>
        public event GetLastGradeCompletedEventHandler GetLastGradeCompleted;
        
        /// <remarks/>
        public event CheckSamplingCompletedEventHandler CheckSamplingCompleted;
        
        /// <remarks/>
        public event GetSkuBomDataCompletedEventHandler GetSkuBomDataCompleted;
        
        /// <remarks/>
        public event GetCurrentDBSysdateCompletedEventHandler GetCurrentDBSysdateCompleted;
        
        /// <remarks/>
        public event GetUSNByRIPalletIDCompletedEventHandler GetUSNByRIPalletIDCompleted;
        
        /// <remarks/>
        public event BreakUpUSNRIPalletByUSNCompletedEventHandler BreakUpUSNRIPalletByUSNCompleted;
        
        /// <remarks/>
        public event GetMO53PNItemCompletedEventHandler GetMO53PNItemCompleted;
        
        /// <remarks/>
        public event GetTEModelNameCompletedEventHandler GetTEModelNameCompleted;
        
        /// <remarks/>
        public event GetMFGTypeByStageCompletedEventHandler GetMFGTypeByStageCompleted;
        
        /// <remarks/>
        public event UploadTestEquipmentsCompletedEventHandler UploadTestEquipmentsCompleted;
        
        /// <remarks/>
        public event UploadTestDataCompletedEventHandler UploadTestDataCompleted;
        
        /// <remarks/>
        public event UploadTestEquipments1CompletedEventHandler UploadTestEquipments1Completed;
        
        /// <remarks/>
        public event UploadTestData1CompletedEventHandler UploadTestData1Completed;
        
        /// <remarks/>
        public event UploadFGCodeCompletedEventHandler UploadFGCodeCompleted;
        
        /// <remarks/>
        public event GetPreparedMOListCompletedEventHandler GetPreparedMOListCompleted;
        
        /// <remarks/>
        public event GetUSNlistByRangeCompletedEventHandler GetUSNlistByRangeCompleted;
        
        /// <remarks/>
        public event UploadRuninRackUnitStateCompletedEventHandler UploadRuninRackUnitStateCompleted;
        
        /// <remarks/>
        public event UploadFixtureUsedTimesCompletedEventHandler UploadFixtureUsedTimesCompleted;
        
        /// <remarks/>
        public event CheckSFCDLSkillCompletedEventHandler CheckSFCDLSkillCompleted;
        
        /// <remarks/>
        public event UploadSonyIDDataCompletedEventHandler UploadSonyIDDataCompleted;
        
        /// <remarks/>
        public event UploadSonyIDData1CompletedEventHandler UploadSonyIDData1Completed;
        
        /// <remarks/>
        public event AllocateSonyKeyCompletedEventHandler AllocateSonyKeyCompleted;
        
        /// <remarks/>
        public event AllocateSonyKey1CompletedEventHandler AllocateSonyKey1Completed;
        
        /// <remarks/>
        public event BindingUSNRIPalletIDCompletedEventHandler BindingUSNRIPalletIDCompleted;
        
        /// <remarks/>
        public event LinkUSNRIPalletIDCompletedEventHandler LinkUSNRIPalletIDCompleted;
        
        /// <remarks/>
        public event GetDcsChassisInfoCompletedEventHandler GetDcsChassisInfoCompleted;
        
        /// <remarks/>
        public event GetCfiNewSiListCompletedEventHandler GetCfiNewSiListCompleted;
        
        /// <remarks/>
        public event GetCfiSiInfoCompletedEventHandler GetCfiSiInfoCompleted;
        
        /// <remarks/>
        public event UpdateCfiSiStatusCompletedEventHandler UpdateCfiSiStatusCompleted;
        
        /// <remarks/>
        public event GetCfiDataCompletedEventHandler GetCfiDataCompleted;
        
        /// <remarks/>
        public event UploadCfiHwInfoCompletedEventHandler UploadCfiHwInfoCompleted;
        
        /// <remarks/>
        public event UploadBurnInRoomTemperatureCompletedEventHandler UploadBurnInRoomTemperatureCompleted;
        
        /// <remarks/>
        public event IPCUSNPositionLinkageCompletedEventHandler IPCUSNPositionLinkageCompleted;
        
        /// <remarks/>
        public event CheckInOutIPCBurnInRoomCompletedEventHandler CheckInOutIPCBurnInRoomCompleted;
        
        /// <remarks/>
        public event TransferIPCBurnInLocationCompletedEventHandler TransferIPCBurnInLocationCompleted;
        
        /// <remarks/>
        public event LinkMultiBoardUSNCompletedEventHandler LinkMultiBoardUSNCompleted;
        
        /// <remarks/>
        public event RequstJDMD3FileJobCompletedEventHandler RequstJDMD3FileJobCompleted;
        
        /// <remarks/>
        public event GetJDMD3FileJobInfoCompletedEventHandler GetJDMD3FileJobInfoCompleted;
        
        /// <remarks/>
        public event UpdateJDMD3FileJobStatusCompletedEventHandler UpdateJDMD3FileJobStatusCompleted;
        
        /// <remarks/>
        public event GetAISImageFileNameCompletedEventHandler GetAISImageFileNameCompleted;
        
        /// <remarks/>
        public event GetAISImageFileName1CompletedEventHandler GetAISImageFileName1Completed;
        
        /// <remarks/>
        public event GetIDValueByMOCompletedEventHandler GetIDValueByMOCompleted;
        
        /// <remarks/>
        public event GetICPNCompletedEventHandler GetICPNCompleted;
        
        /// <remarks/>
        public event GetEngravingInfoCompletedEventHandler GetEngravingInfoCompleted;
        
        /// <remarks/>
        public event GetMacSecurityKeyCompletedEventHandler GetMacSecurityKeyCompleted;
        
        /// <remarks/>
        public event UploadRendyResultCompletedEventHandler UploadRendyResultCompleted;
        
        /// <remarks/>
        public event UploadRendyAntiTheftCCIDCompletedEventHandler UploadRendyAntiTheftCCIDCompleted;
        
        /// <remarks/>
        public event UploadTpsUpnInfoCompletedEventHandler UploadTpsUpnInfoCompleted;
        
        /// <remarks/>
        public event GetTeNotReadyMoListCompletedEventHandler GetTeNotReadyMoListCompleted;
        
        /// <remarks/>
        public event UpdateTeReadyFlagByMoCompletedEventHandler UpdateTeReadyFlagByMoCompleted;
        
        /// <remarks/>
        public event GetMoInfoByMoCompletedEventHandler GetMoInfoByMoCompleted;
        
        /// <remarks/>
        public event GetMOItemByMoCompletedEventHandler GetMOItemByMoCompleted;
        
        /// <remarks/>
        public event GetTVKeyCompletedEventHandler GetTVKeyCompleted;
        
        /// <remarks/>
        public event UploadTVKeyCompletedEventHandler UploadTVKeyCompleted;
        
        /// <remarks/>
        public event GetDefectUsnListCompletedEventHandler GetDefectUsnListCompleted;
        
        /// <remarks/>
        public event GetUsnDefectCompletedEventHandler GetUsnDefectCompleted;
        
        /// <remarks/>
        public event RosaHddMoLinkCRUDCompletedEventHandler RosaHddMoLinkCRUDCompleted;
        
        /// <remarks/>
        public event GetLastTransactionDataCompletedEventHandler GetLastTransactionDataCompleted;
        
        /// <remarks/>
        public event GetLastFixtureIdCompletedEventHandler GetLastFixtureIdCompleted;
        
        /// <remarks/>
        public event GetUsnRepairCompletedEventHandler GetUsnRepairCompleted;
        
        /// <remarks/>
        public event GetUsnInfoAtStageCompletedEventHandler GetUsnInfoAtStageCompleted;
        
        /// <remarks/>
        public event UploadRfEquTestTimeCompletedEventHandler UploadRfEquTestTimeCompleted;
        
        /// <remarks/>
        public event GetAutoStickLabelPNCompletedEventHandler GetAutoStickLabelPNCompleted;
        
        /// <remarks/>
        public event RosaSwPoNackRuleCheckCompletedEventHandler RosaSwPoNackRuleCheckCompleted;
        
        /// <remarks/>
        public event UpdateEDI860SignalCompletedEventHandler UpdateEDI860SignalCompleted;
        
        /// <remarks/>
        public event GetUsnByIdCompletedEventHandler GetUsnByIdCompleted;
        
        /// <remarks/>
        public event UploadPcbLotCompletedEventHandler UploadPcbLotCompleted;
        
        /// <remarks/>
        public event UploadEngravingResultCompletedEventHandler UploadEngravingResultCompleted;
        
        /// <remarks/>
        public event UploadAstroMoInfoCompletedEventHandler UploadAstroMoInfoCompleted;
        
        /// <remarks/>
        public event GetUpnInfoFromViewCompletedEventHandler GetUpnInfoFromViewCompleted;
        
        /// <remarks/>
        public event GetKeyInfoFromViewCompletedEventHandler GetKeyInfoFromViewCompleted;
        
        /// <remarks/>
        public event UploadRuninRackStatusCompletedEventHandler UploadRuninRackStatusCompleted;
        
        /// <remarks/>
        public event AllocateAndroidKeyCompletedEventHandler AllocateAndroidKeyCompleted;
        
        /// <remarks/>
        public event CheckEngravingBoradBarcLotNoCompletedEventHandler CheckEngravingBoradBarcLotNoCompleted;
        
        /// <remarks/>
        public event AllocateAwaitingUnitSnListCompletedEventHandler AllocateAwaitingUnitSnListCompleted;
        
        /// <remarks/>
        public event UploadCompleteEngravingUnitSnCompletedEventHandler UploadCompleteEngravingUnitSnCompleted;
        
        /// <remarks/>
        public event GetMoAndBoardInfoCompletedEventHandler GetMoAndBoardInfoCompleted;
        
        /// <remarks/>
        public event Get2SLabelInfoCompletedEventHandler Get2SLabelInfoCompleted;
        
        /// <remarks/>
        public event Upload2SLabelInfoCompletedEventHandler Upload2SLabelInfoCompleted;
        
        /// <remarks/>
        public event GetUsnInformationListCompletedEventHandler GetUsnInformationListCompleted;
        
        /// <remarks/>
        public event GetTvDacDataListCompletedEventHandler GetTvDacDataListCompleted;
        
        /// <remarks/>
        public event SwapUSNCompletedEventHandler SwapUSNCompleted;
        
        /// <remarks/>
        public event GetEllaRackLoctionCompletedEventHandler GetEllaRackLoctionCompleted;
        
        /// <remarks/>
        public event GetWebServiceInfoCompletedEventHandler GetWebServiceInfoCompleted;
        
        /// <remarks/>
        public event GetWebServiceConfigCompletedEventHandler GetWebServiceConfigCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetDynamicData", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDynamicData(string DynQueryID, string CriteriaName, string CriteriaValue) {
            object[] results = this.Invoke("GetDynamicData", new object[] {
                        DynQueryID,
                        CriteriaName,
                        CriteriaValue});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDynamicDataAsync(string DynQueryID, string CriteriaName, string CriteriaValue) {
            this.GetDynamicDataAsync(DynQueryID, CriteriaName, CriteriaValue, null);
        }
        
        /// <remarks/>
        public void GetDynamicDataAsync(string DynQueryID, string CriteriaName, string CriteriaValue, object userState) {
            if ((this.GetDynamicDataOperationCompleted == null)) {
                this.GetDynamicDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDynamicDataOperationCompleted);
            }
            this.InvokeAsync("GetDynamicData", new object[] {
                        DynQueryID,
                        CriteriaName,
                        CriteriaValue}, this.GetDynamicDataOperationCompleted, userState);
        }
        
        private void OnGetDynamicDataOperationCompleted(object arg) {
            if ((this.GetDynamicDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDynamicDataCompleted(this, new GetDynamicDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckRoute", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckRoute(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("CheckRoute", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRouteAsync(string UnitSerialNumber, string StageCode) {
            this.CheckRouteAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckRouteAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.CheckRouteOperationCompleted == null)) {
                this.CheckRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRouteOperationCompleted);
            }
            this.InvokeAsync("CheckRoute", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.CheckRouteOperationCompleted, userState);
        }
        
        private void OnCheckRouteOperationCompleted(object arg) {
            if ((this.CheckRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRouteCompleted(this, new CheckRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/Complete", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Complete(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, [System.Xml.Serialization.XmlArrayItemAttribute("TrnData")] string[] TrnDatas) {
            object[] results = this.Invoke("Complete", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        StationName,
                        EmployeeID,
                        Pass,
                        TrnDatas});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteAsync(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, string[] TrnDatas) {
            this.CompleteAsync(UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas, null);
        }
        
        /// <remarks/>
        public void CompleteAsync(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, string[] TrnDatas, object userState) {
            if ((this.CompleteOperationCompleted == null)) {
                this.CompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteOperationCompleted);
            }
            this.InvokeAsync("Complete", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        StationName,
                        EmployeeID,
                        Pass,
                        TrnDatas}, this.CompleteOperationCompleted, userState);
        }
        
        private void OnCompleteOperationCompleted(object arg) {
            if ((this.CompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteCompleted(this, new CompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CompleteWithSingleTrnData", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CompleteWithSingleTrnData(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, string TrnData) {
            object[] results = this.Invoke("CompleteWithSingleTrnData", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        StationName,
                        EmployeeID,
                        Pass,
                        TrnData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteWithSingleTrnDataAsync(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, string TrnData) {
            this.CompleteWithSingleTrnDataAsync(UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnData, null);
        }
        
        /// <remarks/>
        public void CompleteWithSingleTrnDataAsync(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, string TrnData, object userState) {
            if ((this.CompleteWithSingleTrnDataOperationCompleted == null)) {
                this.CompleteWithSingleTrnDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteWithSingleTrnDataOperationCompleted);
            }
            this.InvokeAsync("CompleteWithSingleTrnData", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        StationName,
                        EmployeeID,
                        Pass,
                        TrnData}, this.CompleteWithSingleTrnDataOperationCompleted, userState);
        }
        
        private void OnCompleteWithSingleTrnDataOperationCompleted(object arg) {
            if ((this.CompleteWithSingleTrnDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteWithSingleTrnDataCompleted(this, new CompleteWithSingleTrnDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CompleteWithDefectRemark", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CompleteWithDefectRemark(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, [System.Xml.Serialization.XmlArrayItemAttribute("TrnData")] string[] TrnDatas, string DefectRmark) {
            object[] results = this.Invoke("CompleteWithDefectRemark", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        StationName,
                        EmployeeID,
                        Pass,
                        TrnDatas,
                        DefectRmark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteWithDefectRemarkAsync(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, string[] TrnDatas, string DefectRmark) {
            this.CompleteWithDefectRemarkAsync(UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas, DefectRmark, null);
        }
        
        /// <remarks/>
        public void CompleteWithDefectRemarkAsync(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, string[] TrnDatas, string DefectRmark, object userState) {
            if ((this.CompleteWithDefectRemarkOperationCompleted == null)) {
                this.CompleteWithDefectRemarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteWithDefectRemarkOperationCompleted);
            }
            this.InvokeAsync("CompleteWithDefectRemark", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        StationName,
                        EmployeeID,
                        Pass,
                        TrnDatas,
                        DefectRmark}, this.CompleteWithDefectRemarkOperationCompleted, userState);
        }
        
        private void OnCompleteWithDefectRemarkOperationCompleted(object arg) {
            if ((this.CompleteWithDefectRemarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteWithDefectRemarkCompleted(this, new CompleteWithDefectRemarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CompleteWithErrorDescription", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CompleteWithErrorDescription(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, [System.Xml.Serialization.XmlArrayItemAttribute("TrnData")] string[] TrnDatas, string ErrorDescription) {
            object[] results = this.Invoke("CompleteWithErrorDescription", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        StationName,
                        EmployeeID,
                        Pass,
                        TrnDatas,
                        ErrorDescription});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteWithErrorDescriptionAsync(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, string[] TrnDatas, string ErrorDescription) {
            this.CompleteWithErrorDescriptionAsync(UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas, ErrorDescription, null);
        }
        
        /// <remarks/>
        public void CompleteWithErrorDescriptionAsync(string UnitSerialNumber, string Line, string StageCode, string StationName, string EmployeeID, bool Pass, string[] TrnDatas, string ErrorDescription, object userState) {
            if ((this.CompleteWithErrorDescriptionOperationCompleted == null)) {
                this.CompleteWithErrorDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteWithErrorDescriptionOperationCompleted);
            }
            this.InvokeAsync("CompleteWithErrorDescription", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        StationName,
                        EmployeeID,
                        Pass,
                        TrnDatas,
                        ErrorDescription}, this.CompleteWithErrorDescriptionOperationCompleted, userState);
        }
        
        private void OnCompleteWithErrorDescriptionOperationCompleted(object arg) {
            if ((this.CompleteWithErrorDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteWithErrorDescriptionCompleted(this, new CompleteWithErrorDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVADC", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTVADC(string SerialNo, string Line, string StageCode, string Workstation, int Type1, int Type2, int ValueR, int ValueG, int ValueB) {
            object[] results = this.Invoke("UploadTVADC", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        Type1,
                        Type2,
                        ValueR,
                        ValueG,
                        ValueB});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTVADCAsync(string SerialNo, string Line, string StageCode, string Workstation, int Type1, int Type2, int ValueR, int ValueG, int ValueB) {
            this.UploadTVADCAsync(SerialNo, Line, StageCode, Workstation, Type1, Type2, ValueR, ValueG, ValueB, null);
        }
        
        /// <remarks/>
        public void UploadTVADCAsync(string SerialNo, string Line, string StageCode, string Workstation, int Type1, int Type2, int ValueR, int ValueG, int ValueB, object userState) {
            if ((this.UploadTVADCOperationCompleted == null)) {
                this.UploadTVADCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTVADCOperationCompleted);
            }
            this.InvokeAsync("UploadTVADC", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        Type1,
                        Type2,
                        ValueR,
                        ValueG,
                        ValueB}, this.UploadTVADCOperationCompleted, userState);
        }
        
        private void OnUploadTVADCOperationCompleted(object arg) {
            if ((this.UploadTVADCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTVADCCompleted(this, new UploadTVADCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVDAC", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTVDAC(string SerialNo, string Line, string StageCode, string Workstation, int ColorType, int RCut, int GCut, int BCut, int RGain, int GGain, int BGain) {
            object[] results = this.Invoke("UploadTVDAC", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        ColorType,
                        RCut,
                        GCut,
                        BCut,
                        RGain,
                        GGain,
                        BGain});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTVDACAsync(string SerialNo, string Line, string StageCode, string Workstation, int ColorType, int RCut, int GCut, int BCut, int RGain, int GGain, int BGain) {
            this.UploadTVDACAsync(SerialNo, Line, StageCode, Workstation, ColorType, RCut, GCut, BCut, RGain, GGain, BGain, null);
        }
        
        /// <remarks/>
        public void UploadTVDACAsync(string SerialNo, string Line, string StageCode, string Workstation, int ColorType, int RCut, int GCut, int BCut, int RGain, int GGain, int BGain, object userState) {
            if ((this.UploadTVDACOperationCompleted == null)) {
                this.UploadTVDACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTVDACOperationCompleted);
            }
            this.InvokeAsync("UploadTVDAC", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        ColorType,
                        RCut,
                        GCut,
                        BCut,
                        RGain,
                        GGain,
                        BGain}, this.UploadTVDACOperationCompleted, userState);
        }
        
        private void OnUploadTVDACOperationCompleted(object arg) {
            if ((this.UploadTVDACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTVDACCompleted(this, new UploadTVDACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVQC", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTVQC(string SerialNo, string Line, string StageCode, string Workstation, int ColorType, int IRE, int XCoordinate, int YCoordinate, decimal LuminanceValue) {
            object[] results = this.Invoke("UploadTVQC", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        ColorType,
                        IRE,
                        XCoordinate,
                        YCoordinate,
                        LuminanceValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTVQCAsync(string SerialNo, string Line, string StageCode, string Workstation, int ColorType, int IRE, int XCoordinate, int YCoordinate, decimal LuminanceValue) {
            this.UploadTVQCAsync(SerialNo, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue, null);
        }
        
        /// <remarks/>
        public void UploadTVQCAsync(string SerialNo, string Line, string StageCode, string Workstation, int ColorType, int IRE, int XCoordinate, int YCoordinate, decimal LuminanceValue, object userState) {
            if ((this.UploadTVQCOperationCompleted == null)) {
                this.UploadTVQCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTVQCOperationCompleted);
            }
            this.InvokeAsync("UploadTVQC", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        ColorType,
                        IRE,
                        XCoordinate,
                        YCoordinate,
                        LuminanceValue}, this.UploadTVQCOperationCompleted, userState);
        }
        
        private void OnUploadTVQCOperationCompleted(object arg) {
            if ((this.UploadTVQCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTVQCCompleted(this, new UploadTVQCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UploadTVQC1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVQCwithWhiteBalanceFlag", RequestElementName="UploadTVQCwithWhiteBalanceFlag", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseElementName="UploadTVQCwithWhiteBalanceFlagResponse", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UploadTVQCwithWhiteBalanceFlagResult")]
        public string UploadTVQC(string SerialNo, string Line, string StageCode, string Workstation, int ColorType, int IRE, int XCoordinate, int YCoordinate, decimal LuminanceValue, bool IsWhiteBalance) {
            object[] results = this.Invoke("UploadTVQC1", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        ColorType,
                        IRE,
                        XCoordinate,
                        YCoordinate,
                        LuminanceValue,
                        IsWhiteBalance});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTVQC1Async(string SerialNo, string Line, string StageCode, string Workstation, int ColorType, int IRE, int XCoordinate, int YCoordinate, decimal LuminanceValue, bool IsWhiteBalance) {
            this.UploadTVQC1Async(SerialNo, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue, IsWhiteBalance, null);
        }
        
        /// <remarks/>
        public void UploadTVQC1Async(string SerialNo, string Line, string StageCode, string Workstation, int ColorType, int IRE, int XCoordinate, int YCoordinate, decimal LuminanceValue, bool IsWhiteBalance, object userState) {
            if ((this.UploadTVQC1OperationCompleted == null)) {
                this.UploadTVQC1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTVQC1OperationCompleted);
            }
            this.InvokeAsync("UploadTVQC1", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        ColorType,
                        IRE,
                        XCoordinate,
                        YCoordinate,
                        LuminanceValue,
                        IsWhiteBalance}, this.UploadTVQC1OperationCompleted, userState);
        }
        
        private void OnUploadTVQC1OperationCompleted(object arg) {
            if ((this.UploadTVQC1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTVQC1Completed(this, new UploadTVQC1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadMonitorWhiteBalance", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadMonitorWhiteBalance(string UnitSerialNumber, string Line, string StageCode, string Workstation, int ColorType, int IRE, int XCoordinate, int YCoordinate, decimal LuminanceValue, bool IsWhiteBalance, decimal Dark, int Contrast) {
            object[] results = this.Invoke("UploadMonitorWhiteBalance", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        Workstation,
                        ColorType,
                        IRE,
                        XCoordinate,
                        YCoordinate,
                        LuminanceValue,
                        IsWhiteBalance,
                        Dark,
                        Contrast});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadMonitorWhiteBalanceAsync(string UnitSerialNumber, string Line, string StageCode, string Workstation, int ColorType, int IRE, int XCoordinate, int YCoordinate, decimal LuminanceValue, bool IsWhiteBalance, decimal Dark, int Contrast) {
            this.UploadMonitorWhiteBalanceAsync(UnitSerialNumber, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue, IsWhiteBalance, Dark, Contrast, null);
        }
        
        /// <remarks/>
        public void UploadMonitorWhiteBalanceAsync(string UnitSerialNumber, string Line, string StageCode, string Workstation, int ColorType, int IRE, int XCoordinate, int YCoordinate, decimal LuminanceValue, bool IsWhiteBalance, decimal Dark, int Contrast, object userState) {
            if ((this.UploadMonitorWhiteBalanceOperationCompleted == null)) {
                this.UploadMonitorWhiteBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadMonitorWhiteBalanceOperationCompleted);
            }
            this.InvokeAsync("UploadMonitorWhiteBalance", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        Workstation,
                        ColorType,
                        IRE,
                        XCoordinate,
                        YCoordinate,
                        LuminanceValue,
                        IsWhiteBalance,
                        Dark,
                        Contrast}, this.UploadMonitorWhiteBalanceOperationCompleted, userState);
        }
        
        private void OnUploadMonitorWhiteBalanceOperationCompleted(object arg) {
            if ((this.UploadMonitorWhiteBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadMonitorWhiteBalanceCompleted(this, new UploadMonitorWhiteBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVPowerRange", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTVPowerRange(string OPID, string SerialNo, string Line, string Stage, string Workstation, int Type, int SubType, string TestItem, string Voltage, string Current, string PowerWatt, string PowerFactor, string Result, int TestItemIndex) {
            object[] results = this.Invoke("UploadTVPowerRange", new object[] {
                        OPID,
                        SerialNo,
                        Line,
                        Stage,
                        Workstation,
                        Type,
                        SubType,
                        TestItem,
                        Voltage,
                        Current,
                        PowerWatt,
                        PowerFactor,
                        Result,
                        TestItemIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTVPowerRangeAsync(string OPID, string SerialNo, string Line, string Stage, string Workstation, int Type, int SubType, string TestItem, string Voltage, string Current, string PowerWatt, string PowerFactor, string Result, int TestItemIndex) {
            this.UploadTVPowerRangeAsync(OPID, SerialNo, Line, Stage, Workstation, Type, SubType, TestItem, Voltage, Current, PowerWatt, PowerFactor, Result, TestItemIndex, null);
        }
        
        /// <remarks/>
        public void UploadTVPowerRangeAsync(string OPID, string SerialNo, string Line, string Stage, string Workstation, int Type, int SubType, string TestItem, string Voltage, string Current, string PowerWatt, string PowerFactor, string Result, int TestItemIndex, object userState) {
            if ((this.UploadTVPowerRangeOperationCompleted == null)) {
                this.UploadTVPowerRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTVPowerRangeOperationCompleted);
            }
            this.InvokeAsync("UploadTVPowerRange", new object[] {
                        OPID,
                        SerialNo,
                        Line,
                        Stage,
                        Workstation,
                        Type,
                        SubType,
                        TestItem,
                        Voltage,
                        Current,
                        PowerWatt,
                        PowerFactor,
                        Result,
                        TestItemIndex}, this.UploadTVPowerRangeOperationCompleted, userState);
        }
        
        private void OnUploadTVPowerRangeOperationCompleted(object arg) {
            if ((this.UploadTVPowerRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTVPowerRangeCompleted(this, new UploadTVPowerRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVHDCPKey", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTVHDCPKey(string SerialNo, string Line, string StageCode, string Workstation, clsHDCPKey[] HDCPKeys) {
            object[] results = this.Invoke("UploadTVHDCPKey", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        HDCPKeys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTVHDCPKeyAsync(string SerialNo, string Line, string StageCode, string Workstation, clsHDCPKey[] HDCPKeys) {
            this.UploadTVHDCPKeyAsync(SerialNo, Line, StageCode, Workstation, HDCPKeys, null);
        }
        
        /// <remarks/>
        public void UploadTVHDCPKeyAsync(string SerialNo, string Line, string StageCode, string Workstation, clsHDCPKey[] HDCPKeys, object userState) {
            if ((this.UploadTVHDCPKeyOperationCompleted == null)) {
                this.UploadTVHDCPKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTVHDCPKeyOperationCompleted);
            }
            this.InvokeAsync("UploadTVHDCPKey", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        HDCPKeys}, this.UploadTVHDCPKeyOperationCompleted, userState);
        }
        
        private void OnUploadTVHDCPKeyOperationCompleted(object arg) {
            if ((this.UploadTVHDCPKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTVHDCPKeyCompleted(this, new UploadTVHDCPKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetHDCPKey", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHDCPKey(string UnitSerialNumber, string StageCode, ref string HDCPKey) {
            object[] results = this.Invoke("GetHDCPKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        HDCPKey});
            HDCPKey = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHDCPKeyAsync(string UnitSerialNumber, string StageCode, string HDCPKey) {
            this.GetHDCPKeyAsync(UnitSerialNumber, StageCode, HDCPKey, null);
        }
        
        /// <remarks/>
        public void GetHDCPKeyAsync(string UnitSerialNumber, string StageCode, string HDCPKey, object userState) {
            if ((this.GetHDCPKeyOperationCompleted == null)) {
                this.GetHDCPKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHDCPKeyOperationCompleted);
            }
            this.InvokeAsync("GetHDCPKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        HDCPKey}, this.GetHDCPKeyOperationCompleted, userState);
        }
        
        private void OnGetHDCPKeyOperationCompleted(object arg) {
            if ((this.GetHDCPKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHDCPKeyCompleted(this, new GetHDCPKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVCIPlusKey", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTVCIPlusKey(string SerialNo, string Line, string StageCode, string Workstation, clsCIPlusKey[] CIPlusKeys) {
            object[] results = this.Invoke("UploadTVCIPlusKey", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        CIPlusKeys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTVCIPlusKeyAsync(string SerialNo, string Line, string StageCode, string Workstation, clsCIPlusKey[] CIPlusKeys) {
            this.UploadTVCIPlusKeyAsync(SerialNo, Line, StageCode, Workstation, CIPlusKeys, null);
        }
        
        /// <remarks/>
        public void UploadTVCIPlusKeyAsync(string SerialNo, string Line, string StageCode, string Workstation, clsCIPlusKey[] CIPlusKeys, object userState) {
            if ((this.UploadTVCIPlusKeyOperationCompleted == null)) {
                this.UploadTVCIPlusKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTVCIPlusKeyOperationCompleted);
            }
            this.InvokeAsync("UploadTVCIPlusKey", new object[] {
                        SerialNo,
                        Line,
                        StageCode,
                        Workstation,
                        CIPlusKeys}, this.UploadTVCIPlusKeyOperationCompleted, userState);
        }
        
        private void OnUploadTVCIPlusKeyOperationCompleted(object arg) {
            if ((this.UploadTVCIPlusKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTVCIPlusKeyCompleted(this, new UploadTVCIPlusKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetCIPlusKey", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCIPlusKey(string UnitSerialNumber, string StageCode, ref string CIPlusKey) {
            object[] results = this.Invoke("GetCIPlusKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        CIPlusKey});
            CIPlusKey = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCIPlusKeyAsync(string UnitSerialNumber, string StageCode, string CIPlusKey) {
            this.GetCIPlusKeyAsync(UnitSerialNumber, StageCode, CIPlusKey, null);
        }
        
        /// <remarks/>
        public void GetCIPlusKeyAsync(string UnitSerialNumber, string StageCode, string CIPlusKey, object userState) {
            if ((this.GetCIPlusKeyOperationCompleted == null)) {
                this.GetCIPlusKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCIPlusKeyOperationCompleted);
            }
            this.InvokeAsync("GetCIPlusKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        CIPlusKey}, this.GetCIPlusKeyOperationCompleted, userState);
        }
        
        private void OnGetCIPlusKeyOperationCompleted(object arg) {
            if ((this.GetCIPlusKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCIPlusKeyCompleted(this, new GetCIPlusKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNItem", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUSNItem(string UnitSerialNumber, string StageCode, string Category, int Sequence) {
            object[] results = this.Invoke("GetUSNItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category,
                        Sequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNItemAsync(string UnitSerialNumber, string StageCode, string Category, int Sequence) {
            this.GetUSNItemAsync(UnitSerialNumber, StageCode, Category, Sequence, null);
        }
        
        /// <remarks/>
        public void GetUSNItemAsync(string UnitSerialNumber, string StageCode, string Category, int Sequence, object userState) {
            if ((this.GetUSNItemOperationCompleted == null)) {
                this.GetUSNItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNItemOperationCompleted);
            }
            this.InvokeAsync("GetUSNItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category,
                        Sequence}, this.GetUSNItemOperationCompleted, userState);
        }
        
        private void OnGetUSNItemOperationCompleted(object arg) {
            if ((this.GetUSNItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNItemCompleted(this, new GetUSNItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadUSNItem", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadUSNItem(string UnitSerialNumber, string StageCode, string Category, string ComponentSerialNumber, int Sequence, int CheckUsed) {
            object[] results = this.Invoke("UploadUSNItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category,
                        ComponentSerialNumber,
                        Sequence,
                        CheckUsed});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadUSNItemAsync(string UnitSerialNumber, string StageCode, string Category, string ComponentSerialNumber, int Sequence, int CheckUsed) {
            this.UploadUSNItemAsync(UnitSerialNumber, StageCode, Category, ComponentSerialNumber, Sequence, CheckUsed, null);
        }
        
        /// <remarks/>
        public void UploadUSNItemAsync(string UnitSerialNumber, string StageCode, string Category, string ComponentSerialNumber, int Sequence, int CheckUsed, object userState) {
            if ((this.UploadUSNItemOperationCompleted == null)) {
                this.UploadUSNItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadUSNItemOperationCompleted);
            }
            this.InvokeAsync("UploadUSNItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category,
                        ComponentSerialNumber,
                        Sequence,
                        CheckUsed}, this.UploadUSNItemOperationCompleted, userState);
        }
        
        private void OnUploadUSNItemOperationCompleted(object arg) {
            if ((this.UploadUSNItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadUSNItemCompleted(this, new UploadUSNItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadUSNItemWithBarcodeValidation", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadUSNItemWithBarcodeValidation(string UnitSerialNumber, string StageCode, string ComponentSerialNumber, bool Assembly, string CheckUsedCategory, string Line, string Workstation, string UserID) {
            object[] results = this.Invoke("UploadUSNItemWithBarcodeValidation", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ComponentSerialNumber,
                        Assembly,
                        CheckUsedCategory,
                        Line,
                        Workstation,
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadUSNItemWithBarcodeValidationAsync(string UnitSerialNumber, string StageCode, string ComponentSerialNumber, bool Assembly, string CheckUsedCategory, string Line, string Workstation, string UserID) {
            this.UploadUSNItemWithBarcodeValidationAsync(UnitSerialNumber, StageCode, ComponentSerialNumber, Assembly, CheckUsedCategory, Line, Workstation, UserID, null);
        }
        
        /// <remarks/>
        public void UploadUSNItemWithBarcodeValidationAsync(string UnitSerialNumber, string StageCode, string ComponentSerialNumber, bool Assembly, string CheckUsedCategory, string Line, string Workstation, string UserID, object userState) {
            if ((this.UploadUSNItemWithBarcodeValidationOperationCompleted == null)) {
                this.UploadUSNItemWithBarcodeValidationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadUSNItemWithBarcodeValidationOperationCompleted);
            }
            this.InvokeAsync("UploadUSNItemWithBarcodeValidation", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ComponentSerialNumber,
                        Assembly,
                        CheckUsedCategory,
                        Line,
                        Workstation,
                        UserID}, this.UploadUSNItemWithBarcodeValidationOperationCompleted, userState);
        }
        
        private void OnUploadUSNItemWithBarcodeValidationOperationCompleted(object arg) {
            if ((this.UploadUSNItemWithBarcodeValidationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadUSNItemWithBarcodeValidationCompleted(this, new UploadUSNItemWithBarcodeValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnID", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUsnID(string UnitSerialNumber, string StageCode, int IDType, int Sequence) {
            object[] results = this.Invoke("GetUsnID", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        IDType,
                        Sequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsnIDAsync(string UnitSerialNumber, string StageCode, int IDType, int Sequence) {
            this.GetUsnIDAsync(UnitSerialNumber, StageCode, IDType, Sequence, null);
        }
        
        /// <remarks/>
        public void GetUsnIDAsync(string UnitSerialNumber, string StageCode, int IDType, int Sequence, object userState) {
            if ((this.GetUsnIDOperationCompleted == null)) {
                this.GetUsnIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsnIDOperationCompleted);
            }
            this.InvokeAsync("GetUsnID", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        IDType,
                        Sequence}, this.GetUsnIDOperationCompleted, userState);
        }
        
        private void OnGetUsnIDOperationCompleted(object arg) {
            if ((this.GetUsnIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsnIDCompleted(this, new GetUsnIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnIdWithoutCombine", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUsnIdWithoutCombine(string UnitSerialNumber, string StageCode, string Category) {
            object[] results = this.Invoke("GetUsnIdWithoutCombine", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsnIdWithoutCombineAsync(string UnitSerialNumber, string StageCode, string Category) {
            this.GetUsnIdWithoutCombineAsync(UnitSerialNumber, StageCode, Category, null);
        }
        
        /// <remarks/>
        public void GetUsnIdWithoutCombineAsync(string UnitSerialNumber, string StageCode, string Category, object userState) {
            if ((this.GetUsnIdWithoutCombineOperationCompleted == null)) {
                this.GetUsnIdWithoutCombineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsnIdWithoutCombineOperationCompleted);
            }
            this.InvokeAsync("GetUsnIdWithoutCombine", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category}, this.GetUsnIdWithoutCombineOperationCompleted, userState);
        }
        
        private void OnGetUsnIdWithoutCombineOperationCompleted(object arg) {
            if ((this.GetUsnIdWithoutCombineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsnIdWithoutCombineCompleted(this, new GetUsnIdWithoutCombineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetHDCPFileName", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHDCPFileName(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetHDCPFileName", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHDCPFileNameAsync(string UnitSerialNumber, string StageCode) {
            this.GetHDCPFileNameAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetHDCPFileNameAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetHDCPFileNameOperationCompleted == null)) {
                this.GetHDCPFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHDCPFileNameOperationCompleted);
            }
            this.InvokeAsync("GetHDCPFileName", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetHDCPFileNameOperationCompleted, userState);
        }
        
        private void OnGetHDCPFileNameOperationCompleted(object arg) {
            if ((this.GetHDCPFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHDCPFileNameCompleted(this, new GetHDCPFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadFixtureID", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFixtureID(string UnitSerialNumber, string StageCode, string FixtureID) {
            object[] results = this.Invoke("UploadFixtureID", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        FixtureID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFixtureIDAsync(string UnitSerialNumber, string StageCode, string FixtureID) {
            this.UploadFixtureIDAsync(UnitSerialNumber, StageCode, FixtureID, null);
        }
        
        /// <remarks/>
        public void UploadFixtureIDAsync(string UnitSerialNumber, string StageCode, string FixtureID, object userState) {
            if ((this.UploadFixtureIDOperationCompleted == null)) {
                this.UploadFixtureIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFixtureIDOperationCompleted);
            }
            this.InvokeAsync("UploadFixtureID", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        FixtureID}, this.UploadFixtureIDOperationCompleted, userState);
        }
        
        private void OnUploadFixtureIDOperationCompleted(object arg) {
            if ((this.UploadFixtureIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFixtureIDCompleted(this, new UploadFixtureIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadVolTage", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadVolTage(string UnitSerialNumber, string StageCode, string TestData, string TestResult) {
            object[] results = this.Invoke("UploadVolTage", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        TestData,
                        TestResult});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadVolTageAsync(string UnitSerialNumber, string StageCode, string TestData, string TestResult) {
            this.UploadVolTageAsync(UnitSerialNumber, StageCode, TestData, TestResult, null);
        }
        
        /// <remarks/>
        public void UploadVolTageAsync(string UnitSerialNumber, string StageCode, string TestData, string TestResult, object userState) {
            if ((this.UploadVolTageOperationCompleted == null)) {
                this.UploadVolTageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadVolTageOperationCompleted);
            }
            this.InvokeAsync("UploadVolTage", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        TestData,
                        TestResult}, this.UploadVolTageOperationCompleted, userState);
        }
        
        private void OnUploadVolTageOperationCompleted(object arg) {
            if ((this.UploadVolTageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadVolTageCompleted(this, new UploadVolTageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTPSKeyValue", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTPSKeyValue(string SerialNo, string Stage, string TestType, string Key, string KeyVal) {
            object[] results = this.Invoke("UploadTPSKeyValue", new object[] {
                        SerialNo,
                        Stage,
                        TestType,
                        Key,
                        KeyVal});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTPSKeyValueAsync(string SerialNo, string Stage, string TestType, string Key, string KeyVal) {
            this.UploadTPSKeyValueAsync(SerialNo, Stage, TestType, Key, KeyVal, null);
        }
        
        /// <remarks/>
        public void UploadTPSKeyValueAsync(string SerialNo, string Stage, string TestType, string Key, string KeyVal, object userState) {
            if ((this.UploadTPSKeyValueOperationCompleted == null)) {
                this.UploadTPSKeyValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTPSKeyValueOperationCompleted);
            }
            this.InvokeAsync("UploadTPSKeyValue", new object[] {
                        SerialNo,
                        Stage,
                        TestType,
                        Key,
                        KeyVal}, this.UploadTPSKeyValueOperationCompleted, userState);
        }
        
        private void OnUploadTPSKeyValueOperationCompleted(object arg) {
            if ((this.UploadTPSKeyValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTPSKeyValueCompleted(this, new UploadTPSKeyValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTPSLog", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTPSLog(string SerialNo, string Stage, string ErrorID, string ErrorMsg, string TesterID, string StationID, string Model, string SWConfigRev, string TestSWConfigRev, string TestHostConfig, string TestHostSWConfigVer, string FWVer, string CPUID, string FROMSize) {
            object[] results = this.Invoke("UploadTPSLog", new object[] {
                        SerialNo,
                        Stage,
                        ErrorID,
                        ErrorMsg,
                        TesterID,
                        StationID,
                        Model,
                        SWConfigRev,
                        TestSWConfigRev,
                        TestHostConfig,
                        TestHostSWConfigVer,
                        FWVer,
                        CPUID,
                        FROMSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTPSLogAsync(string SerialNo, string Stage, string ErrorID, string ErrorMsg, string TesterID, string StationID, string Model, string SWConfigRev, string TestSWConfigRev, string TestHostConfig, string TestHostSWConfigVer, string FWVer, string CPUID, string FROMSize) {
            this.UploadTPSLogAsync(SerialNo, Stage, ErrorID, ErrorMsg, TesterID, StationID, Model, SWConfigRev, TestSWConfigRev, TestHostConfig, TestHostSWConfigVer, FWVer, CPUID, FROMSize, null);
        }
        
        /// <remarks/>
        public void UploadTPSLogAsync(string SerialNo, string Stage, string ErrorID, string ErrorMsg, string TesterID, string StationID, string Model, string SWConfigRev, string TestSWConfigRev, string TestHostConfig, string TestHostSWConfigVer, string FWVer, string CPUID, string FROMSize, object userState) {
            if ((this.UploadTPSLogOperationCompleted == null)) {
                this.UploadTPSLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTPSLogOperationCompleted);
            }
            this.InvokeAsync("UploadTPSLog", new object[] {
                        SerialNo,
                        Stage,
                        ErrorID,
                        ErrorMsg,
                        TesterID,
                        StationID,
                        Model,
                        SWConfigRev,
                        TestSWConfigRev,
                        TestHostConfig,
                        TestHostSWConfigVer,
                        FWVer,
                        CPUID,
                        FROMSize}, this.UploadTPSLogOperationCompleted, userState);
        }
        
        private void OnUploadTPSLogOperationCompleted(object arg) {
            if ((this.UploadTPSLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTPSLogCompleted(this, new UploadTPSLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTPSRetest", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTPSRetest(string SerialNo, string Stage, string TestType, string Item) {
            object[] results = this.Invoke("UploadTPSRetest", new object[] {
                        SerialNo,
                        Stage,
                        TestType,
                        Item});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTPSRetestAsync(string SerialNo, string Stage, string TestType, string Item) {
            this.UploadTPSRetestAsync(SerialNo, Stage, TestType, Item, null);
        }
        
        /// <remarks/>
        public void UploadTPSRetestAsync(string SerialNo, string Stage, string TestType, string Item, object userState) {
            if ((this.UploadTPSRetestOperationCompleted == null)) {
                this.UploadTPSRetestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTPSRetestOperationCompleted);
            }
            this.InvokeAsync("UploadTPSRetest", new object[] {
                        SerialNo,
                        Stage,
                        TestType,
                        Item}, this.UploadTPSRetestOperationCompleted, userState);
        }
        
        private void OnUploadTPSRetestOperationCompleted(object arg) {
            if ((this.UploadTPSRetestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTPSRetestCompleted(this, new UploadTPSRetestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckOPID", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckOPID(string OperationID) {
            object[] results = this.Invoke("CheckOPID", new object[] {
                        OperationID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckOPIDAsync(string OperationID) {
            this.CheckOPIDAsync(OperationID, null);
        }
        
        /// <remarks/>
        public void CheckOPIDAsync(string OperationID, object userState) {
            if ((this.CheckOPIDOperationCompleted == null)) {
                this.CheckOPIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOPIDOperationCompleted);
            }
            this.InvokeAsync("CheckOPID", new object[] {
                        OperationID}, this.CheckOPIDOperationCompleted, userState);
        }
        
        private void OnCheckOPIDOperationCompleted(object arg) {
            if ((this.CheckOPIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOPIDCompleted(this, new CheckOPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnGenealogy", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsMO GetUsnGenealogy(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetUsnGenealogy", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsMO)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsnGenealogyAsync(string UnitSerialNumber, string StageCode) {
            this.GetUsnGenealogyAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetUsnGenealogyAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetUsnGenealogyOperationCompleted == null)) {
                this.GetUsnGenealogyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsnGenealogyOperationCompleted);
            }
            this.InvokeAsync("GetUsnGenealogy", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetUsnGenealogyOperationCompleted, userState);
        }
        
        private void OnGetUsnGenealogyOperationCompleted(object arg) {
            if ((this.GetUsnGenealogyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsnGenealogyCompleted(this, new GetUsnGenealogyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetEDIDFilename", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEDIDFilename(string ProductCode, string PortType, string StageCode) {
            object[] results = this.Invoke("GetEDIDFilename", new object[] {
                        ProductCode,
                        PortType,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEDIDFilenameAsync(string ProductCode, string PortType, string StageCode) {
            this.GetEDIDFilenameAsync(ProductCode, PortType, StageCode, null);
        }
        
        /// <remarks/>
        public void GetEDIDFilenameAsync(string ProductCode, string PortType, string StageCode, object userState) {
            if ((this.GetEDIDFilenameOperationCompleted == null)) {
                this.GetEDIDFilenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEDIDFilenameOperationCompleted);
            }
            this.InvokeAsync("GetEDIDFilename", new object[] {
                        ProductCode,
                        PortType,
                        StageCode}, this.GetEDIDFilenameOperationCompleted, userState);
        }
        
        private void OnGetEDIDFilenameOperationCompleted(object arg) {
            if ((this.GetEDIDFilenameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEDIDFilenameCompleted(this, new GetEDIDFilenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadEDIDResult", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadEDIDResult(string UnitSerialNumber, string OPID, string StageCode, string Line, string Workstation, string PortType, bool Pass, bool EverWrite, string Checksum, string Version) {
            object[] results = this.Invoke("UploadEDIDResult", new object[] {
                        UnitSerialNumber,
                        OPID,
                        StageCode,
                        Line,
                        Workstation,
                        PortType,
                        Pass,
                        EverWrite,
                        Checksum,
                        Version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadEDIDResultAsync(string UnitSerialNumber, string OPID, string StageCode, string Line, string Workstation, string PortType, bool Pass, bool EverWrite, string Checksum, string Version) {
            this.UploadEDIDResultAsync(UnitSerialNumber, OPID, StageCode, Line, Workstation, PortType, Pass, EverWrite, Checksum, Version, null);
        }
        
        /// <remarks/>
        public void UploadEDIDResultAsync(string UnitSerialNumber, string OPID, string StageCode, string Line, string Workstation, string PortType, bool Pass, bool EverWrite, string Checksum, string Version, object userState) {
            if ((this.UploadEDIDResultOperationCompleted == null)) {
                this.UploadEDIDResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadEDIDResultOperationCompleted);
            }
            this.InvokeAsync("UploadEDIDResult", new object[] {
                        UnitSerialNumber,
                        OPID,
                        StageCode,
                        Line,
                        Workstation,
                        PortType,
                        Pass,
                        EverWrite,
                        Checksum,
                        Version}, this.UploadEDIDResultOperationCompleted, userState);
        }
        
        private void OnUploadEDIDResultOperationCompleted(object arg) {
            if ((this.UploadEDIDResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadEDIDResultCompleted(this, new UploadEDIDResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadMonitorEDID", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadMonitorEDID(string UnitSerialNumber, string OPID, string StageCode, string Line, string Workstation, string PortType, bool Pass, bool EverWrite, string Checksum, string Version, string EDID) {
            object[] results = this.Invoke("UploadMonitorEDID", new object[] {
                        UnitSerialNumber,
                        OPID,
                        StageCode,
                        Line,
                        Workstation,
                        PortType,
                        Pass,
                        EverWrite,
                        Checksum,
                        Version,
                        EDID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadMonitorEDIDAsync(string UnitSerialNumber, string OPID, string StageCode, string Line, string Workstation, string PortType, bool Pass, bool EverWrite, string Checksum, string Version, string EDID) {
            this.UploadMonitorEDIDAsync(UnitSerialNumber, OPID, StageCode, Line, Workstation, PortType, Pass, EverWrite, Checksum, Version, EDID, null);
        }
        
        /// <remarks/>
        public void UploadMonitorEDIDAsync(string UnitSerialNumber, string OPID, string StageCode, string Line, string Workstation, string PortType, bool Pass, bool EverWrite, string Checksum, string Version, string EDID, object userState) {
            if ((this.UploadMonitorEDIDOperationCompleted == null)) {
                this.UploadMonitorEDIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadMonitorEDIDOperationCompleted);
            }
            this.InvokeAsync("UploadMonitorEDID", new object[] {
                        UnitSerialNumber,
                        OPID,
                        StageCode,
                        Line,
                        Workstation,
                        PortType,
                        Pass,
                        EverWrite,
                        Checksum,
                        Version,
                        EDID}, this.UploadMonitorEDIDOperationCompleted, userState);
        }
        
        private void OnUploadMonitorEDIDOperationCompleted(object arg) {
            if ((this.UploadMonitorEDIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadMonitorEDIDCompleted(this, new UploadMonitorEDIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestLog", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTestLog(string UnitSerialNumber, string StageCode, string Workstation, string Line, string OPID, bool Pass, string ErrorCode, string Remark) {
            object[] results = this.Invoke("UploadTestLog", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        Line,
                        OPID,
                        Pass,
                        ErrorCode,
                        Remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTestLogAsync(string UnitSerialNumber, string StageCode, string Workstation, string Line, string OPID, bool Pass, string ErrorCode, string Remark) {
            this.UploadTestLogAsync(UnitSerialNumber, StageCode, Workstation, Line, OPID, Pass, ErrorCode, Remark, null);
        }
        
        /// <remarks/>
        public void UploadTestLogAsync(string UnitSerialNumber, string StageCode, string Workstation, string Line, string OPID, bool Pass, string ErrorCode, string Remark, object userState) {
            if ((this.UploadTestLogOperationCompleted == null)) {
                this.UploadTestLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTestLogOperationCompleted);
            }
            this.InvokeAsync("UploadTestLog", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        Line,
                        OPID,
                        Pass,
                        ErrorCode,
                        Remark}, this.UploadTestLogOperationCompleted, userState);
        }
        
        private void OnUploadTestLogOperationCompleted(object arg) {
            if ((this.UploadTestLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTestLogCompleted(this, new UploadTestLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRuninRackUnitStartDate", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadRuninRackUnitStartDate(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("UploadRuninRackUnitStartDate", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadRuninRackUnitStartDateAsync(string UnitSerialNumber, string StageCode) {
            this.UploadRuninRackUnitStartDateAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void UploadRuninRackUnitStartDateAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.UploadRuninRackUnitStartDateOperationCompleted == null)) {
                this.UploadRuninRackUnitStartDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRuninRackUnitStartDateOperationCompleted);
            }
            this.InvokeAsync("UploadRuninRackUnitStartDate", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.UploadRuninRackUnitStartDateOperationCompleted, userState);
        }
        
        private void OnUploadRuninRackUnitStartDateOperationCompleted(object arg) {
            if ((this.UploadRuninRackUnitStartDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadRuninRackUnitStartDateCompleted(this, new UploadRuninRackUnitStartDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckTestFixture", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckTestFixture(string FixtureGroupID, string StageCode) {
            object[] results = this.Invoke("CheckTestFixture", new object[] {
                        FixtureGroupID,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTestFixtureAsync(string FixtureGroupID, string StageCode) {
            this.CheckTestFixtureAsync(FixtureGroupID, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckTestFixtureAsync(string FixtureGroupID, string StageCode, object userState) {
            if ((this.CheckTestFixtureOperationCompleted == null)) {
                this.CheckTestFixtureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTestFixtureOperationCompleted);
            }
            this.InvokeAsync("CheckTestFixture", new object[] {
                        FixtureGroupID,
                        StageCode}, this.CheckTestFixtureOperationCompleted, userState);
        }
        
        private void OnCheckTestFixtureOperationCompleted(object arg) {
            if ((this.CheckTestFixtureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTestFixtureCompleted(this, new CheckTestFixtureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadUSNInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadUSNInfo(string UnitSerialNumber, string StageCode, string InfoName, string InfoValue) {
            object[] results = this.Invoke("UploadUSNInfo", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        InfoName,
                        InfoValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadUSNInfoAsync(string UnitSerialNumber, string StageCode, string InfoName, string InfoValue) {
            this.UploadUSNInfoAsync(UnitSerialNumber, StageCode, InfoName, InfoValue, null);
        }
        
        /// <remarks/>
        public void UploadUSNInfoAsync(string UnitSerialNumber, string StageCode, string InfoName, string InfoValue, object userState) {
            if ((this.UploadUSNInfoOperationCompleted == null)) {
                this.UploadUSNInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadUSNInfoOperationCompleted);
            }
            this.InvokeAsync("UploadUSNInfo", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        InfoName,
                        InfoValue}, this.UploadUSNInfoOperationCompleted, userState);
        }
        
        private void OnUploadUSNInfoOperationCompleted(object arg) {
            if ((this.UploadUSNInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadUSNInfoCompleted(this, new UploadUSNInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UploadUSNInfo1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadUSNInfoWithUniqueCheckFlag", RequestElementName="UploadUSNInfoWithUniqueCheckFlag", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseElementName="UploadUSNInfoWithUniqueCheckFlagResponse", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UploadUSNInfoWithUniqueCheckFlagResult")]
        public string UploadUSNInfo(string UnitSerialNumber, string StageCode, string InfoName, string InfoValue, bool UniqueCheck) {
            object[] results = this.Invoke("UploadUSNInfo1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        InfoName,
                        InfoValue,
                        UniqueCheck});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadUSNInfo1Async(string UnitSerialNumber, string StageCode, string InfoName, string InfoValue, bool UniqueCheck) {
            this.UploadUSNInfo1Async(UnitSerialNumber, StageCode, InfoName, InfoValue, UniqueCheck, null);
        }
        
        /// <remarks/>
        public void UploadUSNInfo1Async(string UnitSerialNumber, string StageCode, string InfoName, string InfoValue, bool UniqueCheck, object userState) {
            if ((this.UploadUSNInfo1OperationCompleted == null)) {
                this.UploadUSNInfo1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadUSNInfo1OperationCompleted);
            }
            this.InvokeAsync("UploadUSNInfo1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        InfoName,
                        InfoValue,
                        UniqueCheck}, this.UploadUSNInfo1OperationCompleted, userState);
        }
        
        private void OnUploadUSNInfo1OperationCompleted(object arg) {
            if ((this.UploadUSNInfo1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadUSNInfo1Completed(this, new UploadUSNInfo1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMOInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMOInfo(string UnitSerialNumber, string StageCode, string InfoName) {
            object[] results = this.Invoke("GetMOInfo", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        InfoName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMOInfoAsync(string UnitSerialNumber, string StageCode, string InfoName) {
            this.GetMOInfoAsync(UnitSerialNumber, StageCode, InfoName, null);
        }
        
        /// <remarks/>
        public void GetMOInfoAsync(string UnitSerialNumber, string StageCode, string InfoName, object userState) {
            if ((this.GetMOInfoOperationCompleted == null)) {
                this.GetMOInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMOInfoOperationCompleted);
            }
            this.InvokeAsync("GetMOInfo", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        InfoName}, this.GetMOInfoOperationCompleted, userState);
        }
        
        private void OnGetMOInfoOperationCompleted(object arg) {
            if ((this.GetMOInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMOInfoCompleted(this, new GetMOInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTransactionTime", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTransactionTime(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetTransactionTime", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionTimeAsync(string UnitSerialNumber, string StageCode) {
            this.GetTransactionTimeAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetTransactionTimeAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetTransactionTimeOperationCompleted == null)) {
                this.GetTransactionTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionTimeOperationCompleted);
            }
            this.InvokeAsync("GetTransactionTime", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetTransactionTimeOperationCompleted, userState);
        }
        
        private void OnGetTransactionTimeOperationCompleted(object arg) {
            if ((this.GetTransactionTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionTimeCompleted(this, new GetTransactionTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/SetReflowStage", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetReflowStage(string UnitSerialNumber, string StageCode, string UserID) {
            object[] results = this.Invoke("SetReflowStage", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetReflowStageAsync(string UnitSerialNumber, string StageCode, string UserID) {
            this.SetReflowStageAsync(UnitSerialNumber, StageCode, UserID, null);
        }
        
        /// <remarks/>
        public void SetReflowStageAsync(string UnitSerialNumber, string StageCode, string UserID, object userState) {
            if ((this.SetReflowStageOperationCompleted == null)) {
                this.SetReflowStageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetReflowStageOperationCompleted);
            }
            this.InvokeAsync("SetReflowStage", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID}, this.SetReflowStageOperationCompleted, userState);
        }
        
        private void OnSetReflowStageOperationCompleted(object arg) {
            if ((this.SetReflowStageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetReflowStageCompleted(this, new SetReflowStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetSetCA210OffsetTable", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsCA210OffsetResult[] GetSetCA210OffsetTable(int Type, string Model, string ProbeSN, string StageCode, clsCA210OffsetCheckFlag CA210OffsetCheckFlag) {
            object[] results = this.Invoke("GetSetCA210OffsetTable", new object[] {
                        Type,
                        Model,
                        ProbeSN,
                        StageCode,
                        CA210OffsetCheckFlag});
            return ((clsCA210OffsetResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSetCA210OffsetTableAsync(int Type, string Model, string ProbeSN, string StageCode, clsCA210OffsetCheckFlag CA210OffsetCheckFlag) {
            this.GetSetCA210OffsetTableAsync(Type, Model, ProbeSN, StageCode, CA210OffsetCheckFlag, null);
        }
        
        /// <remarks/>
        public void GetSetCA210OffsetTableAsync(int Type, string Model, string ProbeSN, string StageCode, clsCA210OffsetCheckFlag CA210OffsetCheckFlag, object userState) {
            if ((this.GetSetCA210OffsetTableOperationCompleted == null)) {
                this.GetSetCA210OffsetTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSetCA210OffsetTableOperationCompleted);
            }
            this.InvokeAsync("GetSetCA210OffsetTable", new object[] {
                        Type,
                        Model,
                        ProbeSN,
                        StageCode,
                        CA210OffsetCheckFlag}, this.GetSetCA210OffsetTableOperationCompleted, userState);
        }
        
        private void OnGetSetCA210OffsetTableOperationCompleted(object arg) {
            if ((this.GetSetCA210OffsetTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSetCA210OffsetTableCompleted(this, new GetSetCA210OffsetTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTestSuiteInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsGetTestSuiteInfoResult GetTestSuiteInfo(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetTestSuiteInfo", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsGetTestSuiteInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestSuiteInfoAsync(string UnitSerialNumber, string StageCode) {
            this.GetTestSuiteInfoAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetTestSuiteInfoAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetTestSuiteInfoOperationCompleted == null)) {
                this.GetTestSuiteInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestSuiteInfoOperationCompleted);
            }
            this.InvokeAsync("GetTestSuiteInfo", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetTestSuiteInfoOperationCompleted, userState);
        }
        
        private void OnGetTestSuiteInfoOperationCompleted(object arg) {
            if ((this.GetTestSuiteInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestSuiteInfoCompleted(this, new GetTestSuiteInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetTestSuiteInfo1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTestSuiteInfoWithDataSearchType", RequestElementName="GetTestSuiteInfoWithDataSearchType", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseElementName="GetTestSuiteInfoWithDataSearchTypeResponse", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetTestSuiteInfoWithDataSearchTypeResult")]
        public clsGetTestSuiteInfoResult GetTestSuiteInfo(string UnitSerialNumber, string StageCode, string DataSerachType) {
            object[] results = this.Invoke("GetTestSuiteInfo1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        DataSerachType});
            return ((clsGetTestSuiteInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestSuiteInfo1Async(string UnitSerialNumber, string StageCode, string DataSerachType) {
            this.GetTestSuiteInfo1Async(UnitSerialNumber, StageCode, DataSerachType, null);
        }
        
        /// <remarks/>
        public void GetTestSuiteInfo1Async(string UnitSerialNumber, string StageCode, string DataSerachType, object userState) {
            if ((this.GetTestSuiteInfo1OperationCompleted == null)) {
                this.GetTestSuiteInfo1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestSuiteInfo1OperationCompleted);
            }
            this.InvokeAsync("GetTestSuiteInfo1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        DataSerachType}, this.GetTestSuiteInfo1OperationCompleted, userState);
        }
        
        private void OnGetTestSuiteInfo1OperationCompleted(object arg) {
            if ((this.GetTestSuiteInfo1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestSuiteInfo1Completed(this, new GetTestSuiteInfo1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsGetUSNInfoResult GetUSNInfo(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetUSNInfo", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsGetUSNInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNInfoAsync(string UnitSerialNumber, string StageCode) {
            this.GetUSNInfoAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetUSNInfoAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetUSNInfoOperationCompleted == null)) {
                this.GetUSNInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNInfoOperationCompleted);
            }
            this.InvokeAsync("GetUSNInfo", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetUSNInfoOperationCompleted, userState);
        }
        
        private void OnGetUSNInfoOperationCompleted(object arg) {
            if ((this.GetUSNInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNInfoCompleted(this, new GetUSNInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMOItem", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsMOItem[] GetMOItem(string UnitSerialNumber, string StageCode, string Category) {
            object[] results = this.Invoke("GetMOItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category});
            return ((clsMOItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMOItemAsync(string UnitSerialNumber, string StageCode, string Category) {
            this.GetMOItemAsync(UnitSerialNumber, StageCode, Category, null);
        }
        
        /// <remarks/>
        public void GetMOItemAsync(string UnitSerialNumber, string StageCode, string Category, object userState) {
            if ((this.GetMOItemOperationCompleted == null)) {
                this.GetMOItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMOItemOperationCompleted);
            }
            this.InvokeAsync("GetMOItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Category}, this.GetMOItemOperationCompleted, userState);
        }
        
        private void OnGetMOItemOperationCompleted(object arg) {
            if ((this.GetMOItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMOItemCompleted(this, new GetMOItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadMonitorLpByUsn", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadMonitorLpByUsn(string Line, string Stage, string Workstation, string UnitSerialNumber, string V5, string V12, string V22, string SEMIFASN) {
            object[] results = this.Invoke("UploadMonitorLpByUsn", new object[] {
                        Line,
                        Stage,
                        Workstation,
                        UnitSerialNumber,
                        V5,
                        V12,
                        V22,
                        SEMIFASN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadMonitorLpByUsnAsync(string Line, string Stage, string Workstation, string UnitSerialNumber, string V5, string V12, string V22, string SEMIFASN) {
            this.UploadMonitorLpByUsnAsync(Line, Stage, Workstation, UnitSerialNumber, V5, V12, V22, SEMIFASN, null);
        }
        
        /// <remarks/>
        public void UploadMonitorLpByUsnAsync(string Line, string Stage, string Workstation, string UnitSerialNumber, string V5, string V12, string V22, string SEMIFASN, object userState) {
            if ((this.UploadMonitorLpByUsnOperationCompleted == null)) {
                this.UploadMonitorLpByUsnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadMonitorLpByUsnOperationCompleted);
            }
            this.InvokeAsync("UploadMonitorLpByUsn", new object[] {
                        Line,
                        Stage,
                        Workstation,
                        UnitSerialNumber,
                        V5,
                        V12,
                        V22,
                        SEMIFASN}, this.UploadMonitorLpByUsnOperationCompleted, userState);
        }
        
        private void OnUploadMonitorLpByUsnOperationCompleted(object arg) {
            if ((this.UploadMonitorLpByUsnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadMonitorLpByUsnCompleted(this, new UploadMonitorLpByUsnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadMonitorLP", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadMonitorLP(string Line, string Stage, string Workstation, string ManufactureOrder, string V5, string V12, string V22, string SEMIFASN) {
            object[] results = this.Invoke("UploadMonitorLP", new object[] {
                        Line,
                        Stage,
                        Workstation,
                        ManufactureOrder,
                        V5,
                        V12,
                        V22,
                        SEMIFASN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadMonitorLPAsync(string Line, string Stage, string Workstation, string ManufactureOrder, string V5, string V12, string V22, string SEMIFASN) {
            this.UploadMonitorLPAsync(Line, Stage, Workstation, ManufactureOrder, V5, V12, V22, SEMIFASN, null);
        }
        
        /// <remarks/>
        public void UploadMonitorLPAsync(string Line, string Stage, string Workstation, string ManufactureOrder, string V5, string V12, string V22, string SEMIFASN, object userState) {
            if ((this.UploadMonitorLPOperationCompleted == null)) {
                this.UploadMonitorLPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadMonitorLPOperationCompleted);
            }
            this.InvokeAsync("UploadMonitorLP", new object[] {
                        Line,
                        Stage,
                        Workstation,
                        ManufactureOrder,
                        V5,
                        V12,
                        V22,
                        SEMIFASN}, this.UploadMonitorLPOperationCompleted, userState);
        }
        
        private void OnUploadMonitorLPOperationCompleted(object arg) {
            if ((this.UploadMonitorLPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadMonitorLPCompleted(this, new UploadMonitorLPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckErrorCode", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckErrorCode(string ErrorCode, string StageCode) {
            object[] results = this.Invoke("CheckErrorCode", new object[] {
                        ErrorCode,
                        StageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckErrorCodeAsync(string ErrorCode, string StageCode) {
            this.CheckErrorCodeAsync(ErrorCode, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckErrorCodeAsync(string ErrorCode, string StageCode, object userState) {
            if ((this.CheckErrorCodeOperationCompleted == null)) {
                this.CheckErrorCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckErrorCodeOperationCompleted);
            }
            this.InvokeAsync("CheckErrorCode", new object[] {
                        ErrorCode,
                        StageCode}, this.CheckErrorCodeOperationCompleted, userState);
        }
        
        private void OnCheckErrorCodeOperationCompleted(object arg) {
            if ((this.CheckErrorCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckErrorCodeCompleted(this, new CheckErrorCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetRIRackPositionByUSN", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRIRackPositionByUSN(string UnitSerialNumber, string StageCode, ref string RIRackPosition) {
            object[] results = this.Invoke("GetRIRackPositionByUSN", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        RIRackPosition});
            RIRackPosition = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRIRackPositionByUSNAsync(string UnitSerialNumber, string StageCode, string RIRackPosition) {
            this.GetRIRackPositionByUSNAsync(UnitSerialNumber, StageCode, RIRackPosition, null);
        }
        
        /// <remarks/>
        public void GetRIRackPositionByUSNAsync(string UnitSerialNumber, string StageCode, string RIRackPosition, object userState) {
            if ((this.GetRIRackPositionByUSNOperationCompleted == null)) {
                this.GetRIRackPositionByUSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRIRackPositionByUSNOperationCompleted);
            }
            this.InvokeAsync("GetRIRackPositionByUSN", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        RIRackPosition}, this.GetRIRackPositionByUSNOperationCompleted, userState);
        }
        
        private void OnGetRIRackPositionByUSNOperationCompleted(object arg) {
            if ((this.GetRIRackPositionByUSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRIRackPositionByUSNCompleted(this, new GetRIRackPositionByUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNByRIRackPosition", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUSNByRIRackPosition(string RIRackPosition, string StageCode, ref string UnitSerialNumber) {
            object[] results = this.Invoke("GetUSNByRIRackPosition", new object[] {
                        RIRackPosition,
                        StageCode,
                        UnitSerialNumber});
            UnitSerialNumber = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNByRIRackPositionAsync(string RIRackPosition, string StageCode, string UnitSerialNumber) {
            this.GetUSNByRIRackPositionAsync(RIRackPosition, StageCode, UnitSerialNumber, null);
        }
        
        /// <remarks/>
        public void GetUSNByRIRackPositionAsync(string RIRackPosition, string StageCode, string UnitSerialNumber, object userState) {
            if ((this.GetUSNByRIRackPositionOperationCompleted == null)) {
                this.GetUSNByRIRackPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNByRIRackPositionOperationCompleted);
            }
            this.InvokeAsync("GetUSNByRIRackPosition", new object[] {
                        RIRackPosition,
                        StageCode,
                        UnitSerialNumber}, this.GetUSNByRIRackPositionOperationCompleted, userState);
        }
        
        private void OnGetUSNByRIRackPositionOperationCompleted(object arg) {
            if ((this.GetUSNByRIRackPositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNByRIRackPositionCompleted(this, new GetUSNByRIRackPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadDownTime", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadDownTime(string UnitSerialNumber, string StageCode, int TestTime, bool Result, string DownTimeCode) {
            object[] results = this.Invoke("UploadDownTime", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        TestTime,
                        Result,
                        DownTimeCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDownTimeAsync(string UnitSerialNumber, string StageCode, int TestTime, bool Result, string DownTimeCode) {
            this.UploadDownTimeAsync(UnitSerialNumber, StageCode, TestTime, Result, DownTimeCode, null);
        }
        
        /// <remarks/>
        public void UploadDownTimeAsync(string UnitSerialNumber, string StageCode, int TestTime, bool Result, string DownTimeCode, object userState) {
            if ((this.UploadDownTimeOperationCompleted == null)) {
                this.UploadDownTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDownTimeOperationCompleted);
            }
            this.InvokeAsync("UploadDownTime", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        TestTime,
                        Result,
                        DownTimeCode}, this.UploadDownTimeOperationCompleted, userState);
        }
        
        private void OnUploadDownTimeOperationCompleted(object arg) {
            if ((this.UploadDownTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDownTimeCompleted(this, new UploadDownTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNInformation", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUSNInformation(string StageCode, string UnitSerialNumber, string InfoName, ref string InfoValue) {
            object[] results = this.Invoke("GetUSNInformation", new object[] {
                        StageCode,
                        UnitSerialNumber,
                        InfoName,
                        InfoValue});
            InfoValue = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNInformationAsync(string StageCode, string UnitSerialNumber, string InfoName, string InfoValue) {
            this.GetUSNInformationAsync(StageCode, UnitSerialNumber, InfoName, InfoValue, null);
        }
        
        /// <remarks/>
        public void GetUSNInformationAsync(string StageCode, string UnitSerialNumber, string InfoName, string InfoValue, object userState) {
            if ((this.GetUSNInformationOperationCompleted == null)) {
                this.GetUSNInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNInformationOperationCompleted);
            }
            this.InvokeAsync("GetUSNInformation", new object[] {
                        StageCode,
                        UnitSerialNumber,
                        InfoName,
                        InfoValue}, this.GetUSNInformationOperationCompleted, userState);
        }
        
        private void OnGetUSNInformationOperationCompleted(object arg) {
            if ((this.GetUSNInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNInformationCompleted(this, new GetUSNInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNByUSNInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUSNByUSNInfo(string StageCode, string InfoName, string InfoValue, ref string UnitSerialNumber) {
            object[] results = this.Invoke("GetUSNByUSNInfo", new object[] {
                        StageCode,
                        InfoName,
                        InfoValue,
                        UnitSerialNumber});
            UnitSerialNumber = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNByUSNInfoAsync(string StageCode, string InfoName, string InfoValue, string UnitSerialNumber) {
            this.GetUSNByUSNInfoAsync(StageCode, InfoName, InfoValue, UnitSerialNumber, null);
        }
        
        /// <remarks/>
        public void GetUSNByUSNInfoAsync(string StageCode, string InfoName, string InfoValue, string UnitSerialNumber, object userState) {
            if ((this.GetUSNByUSNInfoOperationCompleted == null)) {
                this.GetUSNByUSNInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNByUSNInfoOperationCompleted);
            }
            this.InvokeAsync("GetUSNByUSNInfo", new object[] {
                        StageCode,
                        InfoName,
                        InfoValue,
                        UnitSerialNumber}, this.GetUSNByUSNInfoOperationCompleted, userState);
        }
        
        private void OnGetUSNByUSNInfoOperationCompleted(object arg) {
            if ((this.GetUSNByUSNInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNByUSNInfoCompleted(this, new GetUSNByUSNInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMessage", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsMessage GetMessage(string MessageID, string Language, [System.Xml.Serialization.XmlElementAttribute("Parameter")] string[] Parameter) {
            object[] results = this.Invoke("GetMessage", new object[] {
                        MessageID,
                        Language,
                        Parameter});
            return ((clsMessage)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageAsync(string MessageID, string Language, string[] Parameter) {
            this.GetMessageAsync(MessageID, Language, Parameter, null);
        }
        
        /// <remarks/>
        public void GetMessageAsync(string MessageID, string Language, string[] Parameter, object userState) {
            if ((this.GetMessageOperationCompleted == null)) {
                this.GetMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageOperationCompleted);
            }
            this.InvokeAsync("GetMessage", new object[] {
                        MessageID,
                        Language,
                        Parameter}, this.GetMessageOperationCompleted, userState);
        }
        
        private void OnGetMessageOperationCompleted(object arg) {
            if ((this.GetMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageCompleted(this, new GetMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetSPCConfig", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsSPCConfig GetSPCConfig(string UnitSerialNumber, string StageCode, clsSPCConfig clsSPCConfig) {
            object[] results = this.Invoke("GetSPCConfig", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        clsSPCConfig});
            return ((clsSPCConfig)(results[0]));
        }
        
        /// <remarks/>
        public void GetSPCConfigAsync(string UnitSerialNumber, string StageCode, clsSPCConfig clsSPCConfig) {
            this.GetSPCConfigAsync(UnitSerialNumber, StageCode, clsSPCConfig, null);
        }
        
        /// <remarks/>
        public void GetSPCConfigAsync(string UnitSerialNumber, string StageCode, clsSPCConfig clsSPCConfig, object userState) {
            if ((this.GetSPCConfigOperationCompleted == null)) {
                this.GetSPCConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSPCConfigOperationCompleted);
            }
            this.InvokeAsync("GetSPCConfig", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        clsSPCConfig}, this.GetSPCConfigOperationCompleted, userState);
        }
        
        private void OnGetSPCConfigOperationCompleted(object arg) {
            if ((this.GetSPCConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSPCConfigCompleted(this, new GetSPCConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUPNInformation", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUPNInformation(string UnitSerialNumber, string StageCode, string InfoName, ref string InfoValue) {
            object[] results = this.Invoke("GetUPNInformation", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        InfoName,
                        InfoValue});
            InfoValue = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUPNInformationAsync(string UnitSerialNumber, string StageCode, string InfoName, string InfoValue) {
            this.GetUPNInformationAsync(UnitSerialNumber, StageCode, InfoName, InfoValue, null);
        }
        
        /// <remarks/>
        public void GetUPNInformationAsync(string UnitSerialNumber, string StageCode, string InfoName, string InfoValue, object userState) {
            if ((this.GetUPNInformationOperationCompleted == null)) {
                this.GetUPNInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUPNInformationOperationCompleted);
            }
            this.InvokeAsync("GetUPNInformation", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        InfoName,
                        InfoValue}, this.GetUPNInformationOperationCompleted, userState);
        }
        
        private void OnGetUPNInformationOperationCompleted(object arg) {
            if ((this.GetUPNInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUPNInformationCompleted(this, new GetUPNInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetPanelParameter", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPanelParameter(string UnitSerialNumber, string StageCode, ref string PanelParameter) {
            object[] results = this.Invoke("GetPanelParameter", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        PanelParameter});
            PanelParameter = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPanelParameterAsync(string UnitSerialNumber, string StageCode, string PanelParameter) {
            this.GetPanelParameterAsync(UnitSerialNumber, StageCode, PanelParameter, null);
        }
        
        /// <remarks/>
        public void GetPanelParameterAsync(string UnitSerialNumber, string StageCode, string PanelParameter, object userState) {
            if ((this.GetPanelParameterOperationCompleted == null)) {
                this.GetPanelParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPanelParameterOperationCompleted);
            }
            this.InvokeAsync("GetPanelParameter", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        PanelParameter}, this.GetPanelParameterOperationCompleted, userState);
        }
        
        private void OnGetPanelParameterOperationCompleted(object arg) {
            if ((this.GetPanelParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPanelParameterCompleted(this, new GetPanelParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetPanelParameter1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetPanelParameterWithDataSearchType" +
            "", RequestElementName="GetPanelParameterWithDataSearchType", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseElementName="GetPanelParameterWithDataSearchTypeResponse", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetPanelParameterWithDataSearchTypeResult")]
        public string GetPanelParameter(string UnitSerialNumber, string StageCode, string DataSerachType, ref string PanelParameter) {
            object[] results = this.Invoke("GetPanelParameter1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        DataSerachType,
                        PanelParameter});
            PanelParameter = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPanelParameter1Async(string UnitSerialNumber, string StageCode, string DataSerachType, string PanelParameter) {
            this.GetPanelParameter1Async(UnitSerialNumber, StageCode, DataSerachType, PanelParameter, null);
        }
        
        /// <remarks/>
        public void GetPanelParameter1Async(string UnitSerialNumber, string StageCode, string DataSerachType, string PanelParameter, object userState) {
            if ((this.GetPanelParameter1OperationCompleted == null)) {
                this.GetPanelParameter1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPanelParameter1OperationCompleted);
            }
            this.InvokeAsync("GetPanelParameter1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        DataSerachType,
                        PanelParameter}, this.GetPanelParameter1OperationCompleted, userState);
        }
        
        private void OnGetPanelParameter1OperationCompleted(object arg) {
            if ((this.GetPanelParameter1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPanelParameter1Completed(this, new GetPanelParameter1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUUTData", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsRequestData GetUUTData(string UnitSerialNumber, string StageCode, clsRequestData RequestData, int RequestDataType) {
            object[] results = this.Invoke("GetUUTData", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        RequestData,
                        RequestDataType});
            return ((clsRequestData)(results[0]));
        }
        
        /// <remarks/>
        public void GetUUTDataAsync(string UnitSerialNumber, string StageCode, clsRequestData RequestData, int RequestDataType) {
            this.GetUUTDataAsync(UnitSerialNumber, StageCode, RequestData, RequestDataType, null);
        }
        
        /// <remarks/>
        public void GetUUTDataAsync(string UnitSerialNumber, string StageCode, clsRequestData RequestData, int RequestDataType, object userState) {
            if ((this.GetUUTDataOperationCompleted == null)) {
                this.GetUUTDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUUTDataOperationCompleted);
            }
            this.InvokeAsync("GetUUTData", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        RequestData,
                        RequestDataType}, this.GetUUTDataOperationCompleted, userState);
        }
        
        private void OnGetUUTDataOperationCompleted(object arg) {
            if ((this.GetUUTDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUUTDataCompleted(this, new GetUUTDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNByCSN", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUSNByCSN(string ComponentSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetUSNByCSN", new object[] {
                        ComponentSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNByCSNAsync(string ComponentSerialNumber, string StageCode) {
            this.GetUSNByCSNAsync(ComponentSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetUSNByCSNAsync(string ComponentSerialNumber, string StageCode, object userState) {
            if ((this.GetUSNByCSNOperationCompleted == null)) {
                this.GetUSNByCSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNByCSNOperationCompleted);
            }
            this.InvokeAsync("GetUSNByCSN", new object[] {
                        ComponentSerialNumber,
                        StageCode}, this.GetUSNByCSNOperationCompleted, userState);
        }
        
        private void OnGetUSNByCSNOperationCompleted(object arg) {
            if ((this.GetUSNByCSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNByCSNCompleted(this, new GetUSNByCSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadCertifyPO", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadCertifyPO(string StageCode, string PO, string TieGroup, string ImageID, string SDRCheckSum, string UploadType) {
            object[] results = this.Invoke("UploadCertifyPO", new object[] {
                        StageCode,
                        PO,
                        TieGroup,
                        ImageID,
                        SDRCheckSum,
                        UploadType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadCertifyPOAsync(string StageCode, string PO, string TieGroup, string ImageID, string SDRCheckSum, string UploadType) {
            this.UploadCertifyPOAsync(StageCode, PO, TieGroup, ImageID, SDRCheckSum, UploadType, null);
        }
        
        /// <remarks/>
        public void UploadCertifyPOAsync(string StageCode, string PO, string TieGroup, string ImageID, string SDRCheckSum, string UploadType, object userState) {
            if ((this.UploadCertifyPOOperationCompleted == null)) {
                this.UploadCertifyPOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCertifyPOOperationCompleted);
            }
            this.InvokeAsync("UploadCertifyPO", new object[] {
                        StageCode,
                        PO,
                        TieGroup,
                        ImageID,
                        SDRCheckSum,
                        UploadType}, this.UploadCertifyPOOperationCompleted, userState);
        }
        
        private void OnUploadCertifyPOOperationCompleted(object arg) {
            if ((this.UploadCertifyPOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCertifyPOCompleted(this, new UploadCertifyPOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetSWCPNForUPN", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSWCPNForUPN(string UnitPartNumber, string StageCode, [System.Xml.Serialization.XmlArrayItemAttribute("SWCPNItem")] ref clsSWCPN[] SWCPNs) {
            object[] results = this.Invoke("GetSWCPNForUPN", new object[] {
                        UnitPartNumber,
                        StageCode,
                        SWCPNs});
            SWCPNs = ((clsSWCPN[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSWCPNForUPNAsync(string UnitPartNumber, string StageCode, clsSWCPN[] SWCPNs) {
            this.GetSWCPNForUPNAsync(UnitPartNumber, StageCode, SWCPNs, null);
        }
        
        /// <remarks/>
        public void GetSWCPNForUPNAsync(string UnitPartNumber, string StageCode, clsSWCPN[] SWCPNs, object userState) {
            if ((this.GetSWCPNForUPNOperationCompleted == null)) {
                this.GetSWCPNForUPNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSWCPNForUPNOperationCompleted);
            }
            this.InvokeAsync("GetSWCPNForUPN", new object[] {
                        UnitPartNumber,
                        StageCode,
                        SWCPNs}, this.GetSWCPNForUPNOperationCompleted, userState);
        }
        
        private void OnGetSWCPNForUPNOperationCompleted(object arg) {
            if ((this.GetSWCPNForUPNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSWCPNForUPNCompleted(this, new GetSWCPNForUPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNInfoByMAC", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUSNInfoByMAC(string MAC, string StageCode, ref string ModelFamily, ref string Model, ref string UnitPartNumber, ref string MO, ref string UnitSerialNumber, [System.Xml.Serialization.XmlElementAttribute("AllMAC")] ref string[] AllMAC, ref string ImagePartNumber, ref string CheckRouteResult) {
            object[] results = this.Invoke("GetUSNInfoByMAC", new object[] {
                        MAC,
                        StageCode,
                        ModelFamily,
                        Model,
                        UnitPartNumber,
                        MO,
                        UnitSerialNumber,
                        AllMAC,
                        ImagePartNumber,
                        CheckRouteResult});
            ModelFamily = ((string)(results[1]));
            Model = ((string)(results[2]));
            UnitPartNumber = ((string)(results[3]));
            MO = ((string)(results[4]));
            UnitSerialNumber = ((string)(results[5]));
            AllMAC = ((string[])(results[6]));
            ImagePartNumber = ((string)(results[7]));
            CheckRouteResult = ((string)(results[8]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNInfoByMACAsync(string MAC, string StageCode, string ModelFamily, string Model, string UnitPartNumber, string MO, string UnitSerialNumber, string[] AllMAC, string ImagePartNumber, string CheckRouteResult) {
            this.GetUSNInfoByMACAsync(MAC, StageCode, ModelFamily, Model, UnitPartNumber, MO, UnitSerialNumber, AllMAC, ImagePartNumber, CheckRouteResult, null);
        }
        
        /// <remarks/>
        public void GetUSNInfoByMACAsync(string MAC, string StageCode, string ModelFamily, string Model, string UnitPartNumber, string MO, string UnitSerialNumber, string[] AllMAC, string ImagePartNumber, string CheckRouteResult, object userState) {
            if ((this.GetUSNInfoByMACOperationCompleted == null)) {
                this.GetUSNInfoByMACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNInfoByMACOperationCompleted);
            }
            this.InvokeAsync("GetUSNInfoByMAC", new object[] {
                        MAC,
                        StageCode,
                        ModelFamily,
                        Model,
                        UnitPartNumber,
                        MO,
                        UnitSerialNumber,
                        AllMAC,
                        ImagePartNumber,
                        CheckRouteResult}, this.GetUSNInfoByMACOperationCompleted, userState);
        }
        
        private void OnGetUSNInfoByMACOperationCompleted(object arg) {
            if ((this.GetUSNInfoByMACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNInfoByMACCompleted(this, new GetUSNInfoByMACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateSyncStatus", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateSyncStatus(string SINumber) {
            object[] results = this.Invoke("UpdateSyncStatus", new object[] {
                        SINumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSyncStatusAsync(string SINumber) {
            this.UpdateSyncStatusAsync(SINumber, null);
        }
        
        /// <remarks/>
        public void UpdateSyncStatusAsync(string SINumber, object userState) {
            if ((this.UpdateSyncStatusOperationCompleted == null)) {
                this.UpdateSyncStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSyncStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateSyncStatus", new object[] {
                        SINumber}, this.UpdateSyncStatusOperationCompleted, userState);
        }
        
        private void OnUpdateSyncStatusOperationCompleted(object arg) {
            if ((this.UpdateSyncStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSyncStatusCompleted(this, new UpdateSyncStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetEarliestSIList", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEarliestSIList(string NeedRecordQty, string OverThanDays) {
            object[] results = this.Invoke("GetEarliestSIList", new object[] {
                        NeedRecordQty,
                        OverThanDays});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEarliestSIListAsync(string NeedRecordQty, string OverThanDays) {
            this.GetEarliestSIListAsync(NeedRecordQty, OverThanDays, null);
        }
        
        /// <remarks/>
        public void GetEarliestSIListAsync(string NeedRecordQty, string OverThanDays, object userState) {
            if ((this.GetEarliestSIListOperationCompleted == null)) {
                this.GetEarliestSIListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEarliestSIListOperationCompleted);
            }
            this.InvokeAsync("GetEarliestSIList", new object[] {
                        NeedRecordQty,
                        OverThanDays}, this.GetEarliestSIListOperationCompleted, userState);
        }
        
        private void OnGetEarliestSIListOperationCompleted(object arg) {
            if ((this.GetEarliestSIListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEarliestSIListCompleted(this, new GetEarliestSIListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateDeleteSIInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateDeleteSIInfo(string SINumber) {
            object[] results = this.Invoke("UpdateDeleteSIInfo", new object[] {
                        SINumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDeleteSIInfoAsync(string SINumber) {
            this.UpdateDeleteSIInfoAsync(SINumber, null);
        }
        
        /// <remarks/>
        public void UpdateDeleteSIInfoAsync(string SINumber, object userState) {
            if ((this.UpdateDeleteSIInfoOperationCompleted == null)) {
                this.UpdateDeleteSIInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDeleteSIInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateDeleteSIInfo", new object[] {
                        SINumber}, this.UpdateDeleteSIInfoOperationCompleted, userState);
        }
        
        private void OnUpdateDeleteSIInfoOperationCompleted(object arg) {
            if ((this.UpdateDeleteSIInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDeleteSIInfoCompleted(this, new UpdateDeleteSIInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetAvailableGradeList", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvailableGradeList(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetAvailableGradeList", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableGradeListAsync(string UnitSerialNumber, string StageCode) {
            this.GetAvailableGradeListAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetAvailableGradeListAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetAvailableGradeListOperationCompleted == null)) {
                this.GetAvailableGradeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableGradeListOperationCompleted);
            }
            this.InvokeAsync("GetAvailableGradeList", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetAvailableGradeListOperationCompleted, userState);
        }
        
        private void OnGetAvailableGradeListOperationCompleted(object arg) {
            if ((this.GetAvailableGradeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableGradeListCompleted(this, new GetAvailableGradeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetLastGrade", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastGrade(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetLastGrade", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastGradeAsync(string UnitSerialNumber, string StageCode) {
            this.GetLastGradeAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetLastGradeAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetLastGradeOperationCompleted == null)) {
                this.GetLastGradeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastGradeOperationCompleted);
            }
            this.InvokeAsync("GetLastGrade", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetLastGradeOperationCompleted, userState);
        }
        
        private void OnGetLastGradeOperationCompleted(object arg) {
            if ((this.GetLastGradeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastGradeCompleted(this, new GetLastGradeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckSampling", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckSampling(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("CheckSampling", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSamplingAsync(string UnitSerialNumber, string StageCode) {
            this.CheckSamplingAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckSamplingAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.CheckSamplingOperationCompleted == null)) {
                this.CheckSamplingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSamplingOperationCompleted);
            }
            this.InvokeAsync("CheckSampling", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.CheckSamplingOperationCompleted, userState);
        }
        
        private void OnCheckSamplingOperationCompleted(object arg) {
            if ((this.CheckSamplingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSamplingCompleted(this, new CheckSamplingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetSkuBomData", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSkuBomData(string SkuPartNumber, string Category, [System.Xml.Serialization.XmlArrayItemAttribute("SkuBomDatas")] ref clsSkuBomData[] SkuBomData) {
            object[] results = this.Invoke("GetSkuBomData", new object[] {
                        SkuPartNumber,
                        Category,
                        SkuBomData});
            SkuBomData = ((clsSkuBomData[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSkuBomDataAsync(string SkuPartNumber, string Category, clsSkuBomData[] SkuBomData) {
            this.GetSkuBomDataAsync(SkuPartNumber, Category, SkuBomData, null);
        }
        
        /// <remarks/>
        public void GetSkuBomDataAsync(string SkuPartNumber, string Category, clsSkuBomData[] SkuBomData, object userState) {
            if ((this.GetSkuBomDataOperationCompleted == null)) {
                this.GetSkuBomDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSkuBomDataOperationCompleted);
            }
            this.InvokeAsync("GetSkuBomData", new object[] {
                        SkuPartNumber,
                        Category,
                        SkuBomData}, this.GetSkuBomDataOperationCompleted, userState);
        }
        
        private void OnGetSkuBomDataOperationCompleted(object arg) {
            if ((this.GetSkuBomDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSkuBomDataCompleted(this, new GetSkuBomDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetCurrentDBSysdate", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentDBSysdate(string StageCode, string DateTimeFormat) {
            object[] results = this.Invoke("GetCurrentDBSysdate", new object[] {
                        StageCode,
                        DateTimeFormat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentDBSysdateAsync(string StageCode, string DateTimeFormat) {
            this.GetCurrentDBSysdateAsync(StageCode, DateTimeFormat, null);
        }
        
        /// <remarks/>
        public void GetCurrentDBSysdateAsync(string StageCode, string DateTimeFormat, object userState) {
            if ((this.GetCurrentDBSysdateOperationCompleted == null)) {
                this.GetCurrentDBSysdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentDBSysdateOperationCompleted);
            }
            this.InvokeAsync("GetCurrentDBSysdate", new object[] {
                        StageCode,
                        DateTimeFormat}, this.GetCurrentDBSysdateOperationCompleted, userState);
        }
        
        private void OnGetCurrentDBSysdateOperationCompleted(object arg) {
            if ((this.GetCurrentDBSysdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentDBSysdateCompleted(this, new GetCurrentDBSysdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNByRIPalletID", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUSNByRIPalletID(string RIPalletID, string StageCode, ref string UnitSerialNumber) {
            object[] results = this.Invoke("GetUSNByRIPalletID", new object[] {
                        RIPalletID,
                        StageCode,
                        UnitSerialNumber});
            UnitSerialNumber = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNByRIPalletIDAsync(string RIPalletID, string StageCode, string UnitSerialNumber) {
            this.GetUSNByRIPalletIDAsync(RIPalletID, StageCode, UnitSerialNumber, null);
        }
        
        /// <remarks/>
        public void GetUSNByRIPalletIDAsync(string RIPalletID, string StageCode, string UnitSerialNumber, object userState) {
            if ((this.GetUSNByRIPalletIDOperationCompleted == null)) {
                this.GetUSNByRIPalletIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNByRIPalletIDOperationCompleted);
            }
            this.InvokeAsync("GetUSNByRIPalletID", new object[] {
                        RIPalletID,
                        StageCode,
                        UnitSerialNumber}, this.GetUSNByRIPalletIDOperationCompleted, userState);
        }
        
        private void OnGetUSNByRIPalletIDOperationCompleted(object arg) {
            if ((this.GetUSNByRIPalletIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNByRIPalletIDCompleted(this, new GetUSNByRIPalletIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/BreakUpUSNRIPalletByUSN", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BreakUpUSNRIPalletByUSN(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("BreakUpUSNRIPalletByUSN", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BreakUpUSNRIPalletByUSNAsync(string UnitSerialNumber, string StageCode) {
            this.BreakUpUSNRIPalletByUSNAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void BreakUpUSNRIPalletByUSNAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.BreakUpUSNRIPalletByUSNOperationCompleted == null)) {
                this.BreakUpUSNRIPalletByUSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBreakUpUSNRIPalletByUSNOperationCompleted);
            }
            this.InvokeAsync("BreakUpUSNRIPalletByUSN", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.BreakUpUSNRIPalletByUSNOperationCompleted, userState);
        }
        
        private void OnBreakUpUSNRIPalletByUSNOperationCompleted(object arg) {
            if ((this.BreakUpUSNRIPalletByUSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BreakUpUSNRIPalletByUSNCompleted(this, new BreakUpUSNRIPalletByUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMO53PNItem", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMO53PNItem(string UnitSerialNumber, string StageCode, [System.Xml.Serialization.XmlElementAttribute("53PNDesc")] ref string Item53PNDesc) {
            object[] results = this.Invoke("GetMO53PNItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Item53PNDesc});
            Item53PNDesc = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMO53PNItemAsync(string UnitSerialNumber, string StageCode, string Item53PNDesc) {
            this.GetMO53PNItemAsync(UnitSerialNumber, StageCode, Item53PNDesc, null);
        }
        
        /// <remarks/>
        public void GetMO53PNItemAsync(string UnitSerialNumber, string StageCode, string Item53PNDesc, object userState) {
            if ((this.GetMO53PNItemOperationCompleted == null)) {
                this.GetMO53PNItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMO53PNItemOperationCompleted);
            }
            this.InvokeAsync("GetMO53PNItem", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Item53PNDesc}, this.GetMO53PNItemOperationCompleted, userState);
        }
        
        private void OnGetMO53PNItemOperationCompleted(object arg) {
            if ((this.GetMO53PNItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMO53PNItemCompleted(this, new GetMO53PNItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTEModelName", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTEModelName(string UnitSerialNumber, string StageCode, ref string TEModelName) {
            object[] results = this.Invoke("GetTEModelName", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        TEModelName});
            TEModelName = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTEModelNameAsync(string UnitSerialNumber, string StageCode, string TEModelName) {
            this.GetTEModelNameAsync(UnitSerialNumber, StageCode, TEModelName, null);
        }
        
        /// <remarks/>
        public void GetTEModelNameAsync(string UnitSerialNumber, string StageCode, string TEModelName, object userState) {
            if ((this.GetTEModelNameOperationCompleted == null)) {
                this.GetTEModelNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTEModelNameOperationCompleted);
            }
            this.InvokeAsync("GetTEModelName", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        TEModelName}, this.GetTEModelNameOperationCompleted, userState);
        }
        
        private void OnGetTEModelNameOperationCompleted(object arg) {
            if ((this.GetTEModelNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTEModelNameCompleted(this, new GetTEModelNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMFGTypeByStage", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMFGTypeByStage(string StageCode) {
            object[] results = this.Invoke("GetMFGTypeByStage", new object[] {
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMFGTypeByStageAsync(string StageCode) {
            this.GetMFGTypeByStageAsync(StageCode, null);
        }
        
        /// <remarks/>
        public void GetMFGTypeByStageAsync(string StageCode, object userState) {
            if ((this.GetMFGTypeByStageOperationCompleted == null)) {
                this.GetMFGTypeByStageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMFGTypeByStageOperationCompleted);
            }
            this.InvokeAsync("GetMFGTypeByStage", new object[] {
                        StageCode}, this.GetMFGTypeByStageOperationCompleted, userState);
        }
        
        private void OnGetMFGTypeByStageOperationCompleted(object arg) {
            if ((this.GetMFGTypeByStageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMFGTypeByStageCompleted(this, new GetMFGTypeByStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestEquipments", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTestEquipments(string StageCode, [System.Xml.Serialization.XmlElementAttribute("TestEquipments")] string[] TestEquipments, string Model) {
            object[] results = this.Invoke("UploadTestEquipments", new object[] {
                        StageCode,
                        TestEquipments,
                        Model});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTestEquipmentsAsync(string StageCode, string[] TestEquipments, string Model) {
            this.UploadTestEquipmentsAsync(StageCode, TestEquipments, Model, null);
        }
        
        /// <remarks/>
        public void UploadTestEquipmentsAsync(string StageCode, string[] TestEquipments, string Model, object userState) {
            if ((this.UploadTestEquipmentsOperationCompleted == null)) {
                this.UploadTestEquipmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTestEquipmentsOperationCompleted);
            }
            this.InvokeAsync("UploadTestEquipments", new object[] {
                        StageCode,
                        TestEquipments,
                        Model}, this.UploadTestEquipmentsOperationCompleted, userState);
        }
        
        private void OnUploadTestEquipmentsOperationCompleted(object arg) {
            if ((this.UploadTestEquipmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTestEquipmentsCompleted(this, new UploadTestEquipmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestData", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTestData(string StageCode, [System.Xml.Serialization.XmlElementAttribute("TestData")] clsTestData[] TestData) {
            object[] results = this.Invoke("UploadTestData", new object[] {
                        StageCode,
                        TestData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTestDataAsync(string StageCode, clsTestData[] TestData) {
            this.UploadTestDataAsync(StageCode, TestData, null);
        }
        
        /// <remarks/>
        public void UploadTestDataAsync(string StageCode, clsTestData[] TestData, object userState) {
            if ((this.UploadTestDataOperationCompleted == null)) {
                this.UploadTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTestDataOperationCompleted);
            }
            this.InvokeAsync("UploadTestData", new object[] {
                        StageCode,
                        TestData}, this.UploadTestDataOperationCompleted, userState);
        }
        
        private void OnUploadTestDataOperationCompleted(object arg) {
            if ((this.UploadTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTestDataCompleted(this, new UploadTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UploadTestEquipments1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestEquipmentsWithString", RequestElementName="UploadTestEquipmentsWithString", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseElementName="UploadTestEquipmentsWithStringResponse", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UploadTestEquipmentsWithStringResult")]
        public string UploadTestEquipments(string StageCode, string TestEquipments, string Model) {
            object[] results = this.Invoke("UploadTestEquipments1", new object[] {
                        StageCode,
                        TestEquipments,
                        Model});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTestEquipments1Async(string StageCode, string TestEquipments, string Model) {
            this.UploadTestEquipments1Async(StageCode, TestEquipments, Model, null);
        }
        
        /// <remarks/>
        public void UploadTestEquipments1Async(string StageCode, string TestEquipments, string Model, object userState) {
            if ((this.UploadTestEquipments1OperationCompleted == null)) {
                this.UploadTestEquipments1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTestEquipments1OperationCompleted);
            }
            this.InvokeAsync("UploadTestEquipments1", new object[] {
                        StageCode,
                        TestEquipments,
                        Model}, this.UploadTestEquipments1OperationCompleted, userState);
        }
        
        private void OnUploadTestEquipments1OperationCompleted(object arg) {
            if ((this.UploadTestEquipments1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTestEquipments1Completed(this, new UploadTestEquipments1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UploadTestData1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestDataWithString", RequestElementName="UploadTestDataWithString", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseElementName="UploadTestDataWithStringResponse", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UploadTestDataWithStringResult")]
        public string UploadTestData(string StageCode, string UnitSerialNumber, string TestDataType, string TestData) {
            object[] results = this.Invoke("UploadTestData1", new object[] {
                        StageCode,
                        UnitSerialNumber,
                        TestDataType,
                        TestData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTestData1Async(string StageCode, string UnitSerialNumber, string TestDataType, string TestData) {
            this.UploadTestData1Async(StageCode, UnitSerialNumber, TestDataType, TestData, null);
        }
        
        /// <remarks/>
        public void UploadTestData1Async(string StageCode, string UnitSerialNumber, string TestDataType, string TestData, object userState) {
            if ((this.UploadTestData1OperationCompleted == null)) {
                this.UploadTestData1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTestData1OperationCompleted);
            }
            this.InvokeAsync("UploadTestData1", new object[] {
                        StageCode,
                        UnitSerialNumber,
                        TestDataType,
                        TestData}, this.UploadTestData1OperationCompleted, userState);
        }
        
        private void OnUploadTestData1OperationCompleted(object arg) {
            if ((this.UploadTestData1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTestData1Completed(this, new UploadTestData1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadFGCode", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFGCode(string ProductCode, string Status) {
            object[] results = this.Invoke("UploadFGCode", new object[] {
                        ProductCode,
                        Status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFGCodeAsync(string ProductCode, string Status) {
            this.UploadFGCodeAsync(ProductCode, Status, null);
        }
        
        /// <remarks/>
        public void UploadFGCodeAsync(string ProductCode, string Status, object userState) {
            if ((this.UploadFGCodeOperationCompleted == null)) {
                this.UploadFGCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFGCodeOperationCompleted);
            }
            this.InvokeAsync("UploadFGCode", new object[] {
                        ProductCode,
                        Status}, this.UploadFGCodeOperationCompleted, userState);
        }
        
        private void OnUploadFGCodeOperationCompleted(object arg) {
            if ((this.UploadFGCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFGCodeCompleted(this, new UploadFGCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetPreparedMOList", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsPreparedMO[] GetPreparedMOList(string StageCode, ref string GetResult) {
            object[] results = this.Invoke("GetPreparedMOList", new object[] {
                        StageCode,
                        GetResult});
            GetResult = ((string)(results[1]));
            return ((clsPreparedMO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPreparedMOListAsync(string StageCode, string GetResult) {
            this.GetPreparedMOListAsync(StageCode, GetResult, null);
        }
        
        /// <remarks/>
        public void GetPreparedMOListAsync(string StageCode, string GetResult, object userState) {
            if ((this.GetPreparedMOListOperationCompleted == null)) {
                this.GetPreparedMOListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPreparedMOListOperationCompleted);
            }
            this.InvokeAsync("GetPreparedMOList", new object[] {
                        StageCode,
                        GetResult}, this.GetPreparedMOListOperationCompleted, userState);
        }
        
        private void OnGetPreparedMOListOperationCompleted(object arg) {
            if ((this.GetPreparedMOListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPreparedMOListCompleted(this, new GetPreparedMOListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNlistByRange", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUSNlistByRange(string MO, short MinSeq, short MaxSeq, string StageCode, ref string GetResult) {
            object[] results = this.Invoke("GetUSNlistByRange", new object[] {
                        MO,
                        MinSeq,
                        MaxSeq,
                        StageCode,
                        GetResult});
            GetResult = ((string)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUSNlistByRangeAsync(string MO, short MinSeq, short MaxSeq, string StageCode, string GetResult) {
            this.GetUSNlistByRangeAsync(MO, MinSeq, MaxSeq, StageCode, GetResult, null);
        }
        
        /// <remarks/>
        public void GetUSNlistByRangeAsync(string MO, short MinSeq, short MaxSeq, string StageCode, string GetResult, object userState) {
            if ((this.GetUSNlistByRangeOperationCompleted == null)) {
                this.GetUSNlistByRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUSNlistByRangeOperationCompleted);
            }
            this.InvokeAsync("GetUSNlistByRange", new object[] {
                        MO,
                        MinSeq,
                        MaxSeq,
                        StageCode,
                        GetResult}, this.GetUSNlistByRangeOperationCompleted, userState);
        }
        
        private void OnGetUSNlistByRangeOperationCompleted(object arg) {
            if ((this.GetUSNlistByRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUSNlistByRangeCompleted(this, new GetUSNlistByRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRuninRackUnitState", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadRuninRackUnitState(string UnitSerialNumber, string StageCode, int State, int TimeOutMinutes) {
            object[] results = this.Invoke("UploadRuninRackUnitState", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        State,
                        TimeOutMinutes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadRuninRackUnitStateAsync(string UnitSerialNumber, string StageCode, int State, int TimeOutMinutes) {
            this.UploadRuninRackUnitStateAsync(UnitSerialNumber, StageCode, State, TimeOutMinutes, null);
        }
        
        /// <remarks/>
        public void UploadRuninRackUnitStateAsync(string UnitSerialNumber, string StageCode, int State, int TimeOutMinutes, object userState) {
            if ((this.UploadRuninRackUnitStateOperationCompleted == null)) {
                this.UploadRuninRackUnitStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRuninRackUnitStateOperationCompleted);
            }
            this.InvokeAsync("UploadRuninRackUnitState", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        State,
                        TimeOutMinutes}, this.UploadRuninRackUnitStateOperationCompleted, userState);
        }
        
        private void OnUploadRuninRackUnitStateOperationCompleted(object arg) {
            if ((this.UploadRuninRackUnitStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadRuninRackUnitStateCompleted(this, new UploadRuninRackUnitStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadFixtureUsedTimes", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFixtureUsedTimes(string UnitSerialNumber, string StageCode, string ECID, int UsedTimes) {
            object[] results = this.Invoke("UploadFixtureUsedTimes", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ECID,
                        UsedTimes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFixtureUsedTimesAsync(string UnitSerialNumber, string StageCode, string ECID, int UsedTimes) {
            this.UploadFixtureUsedTimesAsync(UnitSerialNumber, StageCode, ECID, UsedTimes, null);
        }
        
        /// <remarks/>
        public void UploadFixtureUsedTimesAsync(string UnitSerialNumber, string StageCode, string ECID, int UsedTimes, object userState) {
            if ((this.UploadFixtureUsedTimesOperationCompleted == null)) {
                this.UploadFixtureUsedTimesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFixtureUsedTimesOperationCompleted);
            }
            this.InvokeAsync("UploadFixtureUsedTimes", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ECID,
                        UsedTimes}, this.UploadFixtureUsedTimesOperationCompleted, userState);
        }
        
        private void OnUploadFixtureUsedTimesOperationCompleted(object arg) {
            if ((this.UploadFixtureUsedTimesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFixtureUsedTimesCompleted(this, new UploadFixtureUsedTimesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckSFCDLSkill", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckSFCDLSkill(string EmployeeID, string StageCode) {
            object[] results = this.Invoke("CheckSFCDLSkill", new object[] {
                        EmployeeID,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSFCDLSkillAsync(string EmployeeID, string StageCode) {
            this.CheckSFCDLSkillAsync(EmployeeID, StageCode, null);
        }
        
        /// <remarks/>
        public void CheckSFCDLSkillAsync(string EmployeeID, string StageCode, object userState) {
            if ((this.CheckSFCDLSkillOperationCompleted == null)) {
                this.CheckSFCDLSkillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSFCDLSkillOperationCompleted);
            }
            this.InvokeAsync("CheckSFCDLSkill", new object[] {
                        EmployeeID,
                        StageCode}, this.CheckSFCDLSkillOperationCompleted, userState);
        }
        
        private void OnCheckSFCDLSkillOperationCompleted(object arg) {
            if ((this.CheckSFCDLSkillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSFCDLSkillCompleted(this, new CheckSFCDLSkillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadSonyIDData", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadSonyIDData(string UnitSerialNumber, string StageCode, string Workstation, string IDCode, string IDData, string IDTag) {
            object[] results = this.Invoke("UploadSonyIDData", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        IDCode,
                        IDData,
                        IDTag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadSonyIDDataAsync(string UnitSerialNumber, string StageCode, string Workstation, string IDCode, string IDData, string IDTag) {
            this.UploadSonyIDDataAsync(UnitSerialNumber, StageCode, Workstation, IDCode, IDData, IDTag, null);
        }
        
        /// <remarks/>
        public void UploadSonyIDDataAsync(string UnitSerialNumber, string StageCode, string Workstation, string IDCode, string IDData, string IDTag, object userState) {
            if ((this.UploadSonyIDDataOperationCompleted == null)) {
                this.UploadSonyIDDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSonyIDDataOperationCompleted);
            }
            this.InvokeAsync("UploadSonyIDData", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        IDCode,
                        IDData,
                        IDTag}, this.UploadSonyIDDataOperationCompleted, userState);
        }
        
        private void OnUploadSonyIDDataOperationCompleted(object arg) {
            if ((this.UploadSonyIDDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSonyIDDataCompleted(this, new UploadSonyIDDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UploadSonyIDData1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadSonyIDDatas", RequestElementName="UploadSonyIDDatas", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseElementName="UploadSonyIDDatasResponse", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UploadSonyIDDatasResult")]
        public string UploadSonyIDData(string UnitSerialNumber, string StageCode, string Workstation, clsSonyIDData[] SonyIDDatas) {
            object[] results = this.Invoke("UploadSonyIDData1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        SonyIDDatas});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadSonyIDData1Async(string UnitSerialNumber, string StageCode, string Workstation, clsSonyIDData[] SonyIDDatas) {
            this.UploadSonyIDData1Async(UnitSerialNumber, StageCode, Workstation, SonyIDDatas, null);
        }
        
        /// <remarks/>
        public void UploadSonyIDData1Async(string UnitSerialNumber, string StageCode, string Workstation, clsSonyIDData[] SonyIDDatas, object userState) {
            if ((this.UploadSonyIDData1OperationCompleted == null)) {
                this.UploadSonyIDData1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSonyIDData1OperationCompleted);
            }
            this.InvokeAsync("UploadSonyIDData1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        SonyIDDatas}, this.UploadSonyIDData1OperationCompleted, userState);
        }
        
        private void OnUploadSonyIDData1OperationCompleted(object arg) {
            if ((this.UploadSonyIDData1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSonyIDData1Completed(this, new UploadSonyIDData1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/AllocateSonyKey", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AllocateSonyKey(string UnitSerialNumber, string StageCode, string IDCode, ref string IDData) {
            object[] results = this.Invoke("AllocateSonyKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        IDCode,
                        IDData});
            IDData = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AllocateSonyKeyAsync(string UnitSerialNumber, string StageCode, string IDCode, string IDData) {
            this.AllocateSonyKeyAsync(UnitSerialNumber, StageCode, IDCode, IDData, null);
        }
        
        /// <remarks/>
        public void AllocateSonyKeyAsync(string UnitSerialNumber, string StageCode, string IDCode, string IDData, object userState) {
            if ((this.AllocateSonyKeyOperationCompleted == null)) {
                this.AllocateSonyKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllocateSonyKeyOperationCompleted);
            }
            this.InvokeAsync("AllocateSonyKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        IDCode,
                        IDData}, this.AllocateSonyKeyOperationCompleted, userState);
        }
        
        private void OnAllocateSonyKeyOperationCompleted(object arg) {
            if ((this.AllocateSonyKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllocateSonyKeyCompleted(this, new AllocateSonyKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="AllocateSonyKey1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/AllocateSonyKeys", RequestElementName="AllocateSonyKeys", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseElementName="AllocateSonyKeysResponse", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AllocateSonyKeysResult")]
        public string AllocateSonyKey(string UnitSerialNumber, string StageCode, string IDCode, ref string KeyQuantity, [System.Xml.Serialization.XmlElementAttribute("IDDatas")] ref string[] IDDatas) {
            object[] results = this.Invoke("AllocateSonyKey1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        IDCode,
                        KeyQuantity,
                        IDDatas});
            KeyQuantity = ((string)(results[1]));
            IDDatas = ((string[])(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AllocateSonyKey1Async(string UnitSerialNumber, string StageCode, string IDCode, string KeyQuantity, string[] IDDatas) {
            this.AllocateSonyKey1Async(UnitSerialNumber, StageCode, IDCode, KeyQuantity, IDDatas, null);
        }
        
        /// <remarks/>
        public void AllocateSonyKey1Async(string UnitSerialNumber, string StageCode, string IDCode, string KeyQuantity, string[] IDDatas, object userState) {
            if ((this.AllocateSonyKey1OperationCompleted == null)) {
                this.AllocateSonyKey1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllocateSonyKey1OperationCompleted);
            }
            this.InvokeAsync("AllocateSonyKey1", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        IDCode,
                        KeyQuantity,
                        IDDatas}, this.AllocateSonyKey1OperationCompleted, userState);
        }
        
        private void OnAllocateSonyKey1OperationCompleted(object arg) {
            if ((this.AllocateSonyKey1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllocateSonyKey1Completed(this, new AllocateSonyKey1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/BindingUSNRIPalletID", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BindingUSNRIPalletID(short Type, string StageCode, ref string RIPalletID, ref string UnitSerialNumber) {
            object[] results = this.Invoke("BindingUSNRIPalletID", new object[] {
                        Type,
                        StageCode,
                        RIPalletID,
                        UnitSerialNumber});
            RIPalletID = ((string)(results[1]));
            UnitSerialNumber = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BindingUSNRIPalletIDAsync(short Type, string StageCode, string RIPalletID, string UnitSerialNumber) {
            this.BindingUSNRIPalletIDAsync(Type, StageCode, RIPalletID, UnitSerialNumber, null);
        }
        
        /// <remarks/>
        public void BindingUSNRIPalletIDAsync(short Type, string StageCode, string RIPalletID, string UnitSerialNumber, object userState) {
            if ((this.BindingUSNRIPalletIDOperationCompleted == null)) {
                this.BindingUSNRIPalletIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindingUSNRIPalletIDOperationCompleted);
            }
            this.InvokeAsync("BindingUSNRIPalletID", new object[] {
                        Type,
                        StageCode,
                        RIPalletID,
                        UnitSerialNumber}, this.BindingUSNRIPalletIDOperationCompleted, userState);
        }
        
        private void OnBindingUSNRIPalletIDOperationCompleted(object arg) {
            if ((this.BindingUSNRIPalletIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindingUSNRIPalletIDCompleted(this, new BindingUSNRIPalletIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/LinkUSNRIPalletID", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LinkUSNRIPalletID(string StageCode, string RIPalletID, string UnitSerialNumber) {
            object[] results = this.Invoke("LinkUSNRIPalletID", new object[] {
                        StageCode,
                        RIPalletID,
                        UnitSerialNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LinkUSNRIPalletIDAsync(string StageCode, string RIPalletID, string UnitSerialNumber) {
            this.LinkUSNRIPalletIDAsync(StageCode, RIPalletID, UnitSerialNumber, null);
        }
        
        /// <remarks/>
        public void LinkUSNRIPalletIDAsync(string StageCode, string RIPalletID, string UnitSerialNumber, object userState) {
            if ((this.LinkUSNRIPalletIDOperationCompleted == null)) {
                this.LinkUSNRIPalletIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkUSNRIPalletIDOperationCompleted);
            }
            this.InvokeAsync("LinkUSNRIPalletID", new object[] {
                        StageCode,
                        RIPalletID,
                        UnitSerialNumber}, this.LinkUSNRIPalletIDOperationCompleted, userState);
        }
        
        private void OnLinkUSNRIPalletIDOperationCompleted(object arg) {
            if ((this.LinkUSNRIPalletIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LinkUSNRIPalletIDCompleted(this, new LinkUSNRIPalletIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetDcsChassisInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsDcsChassisInfo GetDcsChassisInfo(string UnitSerialNumber, string StageCode, string ComponentCategory, ref string GetResult) {
            object[] results = this.Invoke("GetDcsChassisInfo", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ComponentCategory,
                        GetResult});
            GetResult = ((string)(results[1]));
            return ((clsDcsChassisInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetDcsChassisInfoAsync(string UnitSerialNumber, string StageCode, string ComponentCategory, string GetResult) {
            this.GetDcsChassisInfoAsync(UnitSerialNumber, StageCode, ComponentCategory, GetResult, null);
        }
        
        /// <remarks/>
        public void GetDcsChassisInfoAsync(string UnitSerialNumber, string StageCode, string ComponentCategory, string GetResult, object userState) {
            if ((this.GetDcsChassisInfoOperationCompleted == null)) {
                this.GetDcsChassisInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDcsChassisInfoOperationCompleted);
            }
            this.InvokeAsync("GetDcsChassisInfo", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ComponentCategory,
                        GetResult}, this.GetDcsChassisInfoOperationCompleted, userState);
        }
        
        private void OnGetDcsChassisInfoOperationCompleted(object arg) {
            if ((this.GetDcsChassisInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDcsChassisInfoCompleted(this, new GetDcsChassisInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetCfiNewSiList", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCfiNewSiList(string NeedRecordQty) {
            object[] results = this.Invoke("GetCfiNewSiList", new object[] {
                        NeedRecordQty});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCfiNewSiListAsync(string NeedRecordQty) {
            this.GetCfiNewSiListAsync(NeedRecordQty, null);
        }
        
        /// <remarks/>
        public void GetCfiNewSiListAsync(string NeedRecordQty, object userState) {
            if ((this.GetCfiNewSiListOperationCompleted == null)) {
                this.GetCfiNewSiListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCfiNewSiListOperationCompleted);
            }
            this.InvokeAsync("GetCfiNewSiList", new object[] {
                        NeedRecordQty}, this.GetCfiNewSiListOperationCompleted, userState);
        }
        
        private void OnGetCfiNewSiListOperationCompleted(object arg) {
            if ((this.GetCfiNewSiListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCfiNewSiListCompleted(this, new GetCfiNewSiListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetCfiSiInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsSINumberInfo GetCfiSiInfo(string SINumber) {
            object[] results = this.Invoke("GetCfiSiInfo", new object[] {
                        SINumber});
            return ((clsSINumberInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetCfiSiInfoAsync(string SINumber) {
            this.GetCfiSiInfoAsync(SINumber, null);
        }
        
        /// <remarks/>
        public void GetCfiSiInfoAsync(string SINumber, object userState) {
            if ((this.GetCfiSiInfoOperationCompleted == null)) {
                this.GetCfiSiInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCfiSiInfoOperationCompleted);
            }
            this.InvokeAsync("GetCfiSiInfo", new object[] {
                        SINumber}, this.GetCfiSiInfoOperationCompleted, userState);
        }
        
        private void OnGetCfiSiInfoOperationCompleted(object arg) {
            if ((this.GetCfiSiInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCfiSiInfoCompleted(this, new GetCfiSiInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateCfiSiStatus", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateCfiSiStatus(string SINumber, string SISyncStatus) {
            object[] results = this.Invoke("UpdateCfiSiStatus", new object[] {
                        SINumber,
                        SISyncStatus});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCfiSiStatusAsync(string SINumber, string SISyncStatus) {
            this.UpdateCfiSiStatusAsync(SINumber, SISyncStatus, null);
        }
        
        /// <remarks/>
        public void UpdateCfiSiStatusAsync(string SINumber, string SISyncStatus, object userState) {
            if ((this.UpdateCfiSiStatusOperationCompleted == null)) {
                this.UpdateCfiSiStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCfiSiStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateCfiSiStatus", new object[] {
                        SINumber,
                        SISyncStatus}, this.UpdateCfiSiStatusOperationCompleted, userState);
        }
        
        private void OnUpdateCfiSiStatusOperationCompleted(object arg) {
            if ((this.UpdateCfiSiStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCfiSiStatusCompleted(this, new UpdateCfiSiStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetCfiData", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsUnitCfiData GetCfiData(string UnitSerialNumber) {
            object[] results = this.Invoke("GetCfiData", new object[] {
                        UnitSerialNumber});
            return ((clsUnitCfiData)(results[0]));
        }
        
        /// <remarks/>
        public void GetCfiDataAsync(string UnitSerialNumber) {
            this.GetCfiDataAsync(UnitSerialNumber, null);
        }
        
        /// <remarks/>
        public void GetCfiDataAsync(string UnitSerialNumber, object userState) {
            if ((this.GetCfiDataOperationCompleted == null)) {
                this.GetCfiDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCfiDataOperationCompleted);
            }
            this.InvokeAsync("GetCfiData", new object[] {
                        UnitSerialNumber}, this.GetCfiDataOperationCompleted, userState);
        }
        
        private void OnGetCfiDataOperationCompleted(object arg) {
            if ((this.GetCfiDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCfiDataCompleted(this, new GetCfiDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadCfiHwInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadCfiHwInfo(clsUnitCfiHwInfo UnitCfiHwInfo) {
            object[] results = this.Invoke("UploadCfiHwInfo", new object[] {
                        UnitCfiHwInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadCfiHwInfoAsync(clsUnitCfiHwInfo UnitCfiHwInfo) {
            this.UploadCfiHwInfoAsync(UnitCfiHwInfo, null);
        }
        
        /// <remarks/>
        public void UploadCfiHwInfoAsync(clsUnitCfiHwInfo UnitCfiHwInfo, object userState) {
            if ((this.UploadCfiHwInfoOperationCompleted == null)) {
                this.UploadCfiHwInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCfiHwInfoOperationCompleted);
            }
            this.InvokeAsync("UploadCfiHwInfo", new object[] {
                        UnitCfiHwInfo}, this.UploadCfiHwInfoOperationCompleted, userState);
        }
        
        private void OnUploadCfiHwInfoOperationCompleted(object arg) {
            if ((this.UploadCfiHwInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCfiHwInfoCompleted(this, new UploadCfiHwInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadBurnInRoomTemperature", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadBurnInRoomTemperature(string BurnInRoomID, string Temperature) {
            object[] results = this.Invoke("UploadBurnInRoomTemperature", new object[] {
                        BurnInRoomID,
                        Temperature});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadBurnInRoomTemperatureAsync(string BurnInRoomID, string Temperature) {
            this.UploadBurnInRoomTemperatureAsync(BurnInRoomID, Temperature, null);
        }
        
        /// <remarks/>
        public void UploadBurnInRoomTemperatureAsync(string BurnInRoomID, string Temperature, object userState) {
            if ((this.UploadBurnInRoomTemperatureOperationCompleted == null)) {
                this.UploadBurnInRoomTemperatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadBurnInRoomTemperatureOperationCompleted);
            }
            this.InvokeAsync("UploadBurnInRoomTemperature", new object[] {
                        BurnInRoomID,
                        Temperature}, this.UploadBurnInRoomTemperatureOperationCompleted, userState);
        }
        
        private void OnUploadBurnInRoomTemperatureOperationCompleted(object arg) {
            if ((this.UploadBurnInRoomTemperatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadBurnInRoomTemperatureCompleted(this, new UploadBurnInRoomTemperatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/IPCUSNPositionLinkage", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IPCUSNPositionLinkage(string USN, string PositionID, string Command, string UserID) {
            object[] results = this.Invoke("IPCUSNPositionLinkage", new object[] {
                        USN,
                        PositionID,
                        Command,
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IPCUSNPositionLinkageAsync(string USN, string PositionID, string Command, string UserID) {
            this.IPCUSNPositionLinkageAsync(USN, PositionID, Command, UserID, null);
        }
        
        /// <remarks/>
        public void IPCUSNPositionLinkageAsync(string USN, string PositionID, string Command, string UserID, object userState) {
            if ((this.IPCUSNPositionLinkageOperationCompleted == null)) {
                this.IPCUSNPositionLinkageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIPCUSNPositionLinkageOperationCompleted);
            }
            this.InvokeAsync("IPCUSNPositionLinkage", new object[] {
                        USN,
                        PositionID,
                        Command,
                        UserID}, this.IPCUSNPositionLinkageOperationCompleted, userState);
        }
        
        private void OnIPCUSNPositionLinkageOperationCompleted(object arg) {
            if ((this.IPCUSNPositionLinkageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IPCUSNPositionLinkageCompleted(this, new IPCUSNPositionLinkageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckInOutIPCBurnInRoom", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckInOutIPCBurnInRoom(string CartID, string LocationID, string Command, string UserID) {
            object[] results = this.Invoke("CheckInOutIPCBurnInRoom", new object[] {
                        CartID,
                        LocationID,
                        Command,
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInOutIPCBurnInRoomAsync(string CartID, string LocationID, string Command, string UserID) {
            this.CheckInOutIPCBurnInRoomAsync(CartID, LocationID, Command, UserID, null);
        }
        
        /// <remarks/>
        public void CheckInOutIPCBurnInRoomAsync(string CartID, string LocationID, string Command, string UserID, object userState) {
            if ((this.CheckInOutIPCBurnInRoomOperationCompleted == null)) {
                this.CheckInOutIPCBurnInRoomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInOutIPCBurnInRoomOperationCompleted);
            }
            this.InvokeAsync("CheckInOutIPCBurnInRoom", new object[] {
                        CartID,
                        LocationID,
                        Command,
                        UserID}, this.CheckInOutIPCBurnInRoomOperationCompleted, userState);
        }
        
        private void OnCheckInOutIPCBurnInRoomOperationCompleted(object arg) {
            if ((this.CheckInOutIPCBurnInRoomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInOutIPCBurnInRoomCompleted(this, new CheckInOutIPCBurnInRoomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/TransferIPCBurnInLocation", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferIPCBurnInLocation(string OriginalLocID, string NewLocID, string UserID) {
            object[] results = this.Invoke("TransferIPCBurnInLocation", new object[] {
                        OriginalLocID,
                        NewLocID,
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TransferIPCBurnInLocationAsync(string OriginalLocID, string NewLocID, string UserID) {
            this.TransferIPCBurnInLocationAsync(OriginalLocID, NewLocID, UserID, null);
        }
        
        /// <remarks/>
        public void TransferIPCBurnInLocationAsync(string OriginalLocID, string NewLocID, string UserID, object userState) {
            if ((this.TransferIPCBurnInLocationOperationCompleted == null)) {
                this.TransferIPCBurnInLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferIPCBurnInLocationOperationCompleted);
            }
            this.InvokeAsync("TransferIPCBurnInLocation", new object[] {
                        OriginalLocID,
                        NewLocID,
                        UserID}, this.TransferIPCBurnInLocationOperationCompleted, userState);
        }
        
        private void OnTransferIPCBurnInLocationOperationCompleted(object arg) {
            if ((this.TransferIPCBurnInLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferIPCBurnInLocationCompleted(this, new TransferIPCBurnInLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/LinkMultiBoardUSN", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LinkMultiBoardUSN(string StageCode, [System.Xml.Serialization.XmlArrayItemAttribute("UnitSerialNumber")] string[] UnitSerialNumbers) {
            object[] results = this.Invoke("LinkMultiBoardUSN", new object[] {
                        StageCode,
                        UnitSerialNumbers});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LinkMultiBoardUSNAsync(string StageCode, string[] UnitSerialNumbers) {
            this.LinkMultiBoardUSNAsync(StageCode, UnitSerialNumbers, null);
        }
        
        /// <remarks/>
        public void LinkMultiBoardUSNAsync(string StageCode, string[] UnitSerialNumbers, object userState) {
            if ((this.LinkMultiBoardUSNOperationCompleted == null)) {
                this.LinkMultiBoardUSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkMultiBoardUSNOperationCompleted);
            }
            this.InvokeAsync("LinkMultiBoardUSN", new object[] {
                        StageCode,
                        UnitSerialNumbers}, this.LinkMultiBoardUSNOperationCompleted, userState);
        }
        
        private void OnLinkMultiBoardUSNOperationCompleted(object arg) {
            if ((this.LinkMultiBoardUSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LinkMultiBoardUSNCompleted(this, new LinkMultiBoardUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/RequstJDMD3FileJob", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RequstJDMD3FileJob(string RequestPlantCode, string RequestType, string RequestDate, [System.Xml.Serialization.XmlArrayItemAttribute("UnitSerialNumber")] string[] UnitSerialNumbers) {
            object[] results = this.Invoke("RequstJDMD3FileJob", new object[] {
                        RequestPlantCode,
                        RequestType,
                        RequestDate,
                        UnitSerialNumbers});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RequstJDMD3FileJobAsync(string RequestPlantCode, string RequestType, string RequestDate, string[] UnitSerialNumbers) {
            this.RequstJDMD3FileJobAsync(RequestPlantCode, RequestType, RequestDate, UnitSerialNumbers, null);
        }
        
        /// <remarks/>
        public void RequstJDMD3FileJobAsync(string RequestPlantCode, string RequestType, string RequestDate, string[] UnitSerialNumbers, object userState) {
            if ((this.RequstJDMD3FileJobOperationCompleted == null)) {
                this.RequstJDMD3FileJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequstJDMD3FileJobOperationCompleted);
            }
            this.InvokeAsync("RequstJDMD3FileJob", new object[] {
                        RequestPlantCode,
                        RequestType,
                        RequestDate,
                        UnitSerialNumbers}, this.RequstJDMD3FileJobOperationCompleted, userState);
        }
        
        private void OnRequstJDMD3FileJobOperationCompleted(object arg) {
            if ((this.RequstJDMD3FileJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequstJDMD3FileJobCompleted(this, new RequstJDMD3FileJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetJDMD3FileJobInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsJDMD3FileJobInfo[] GetJDMD3FileJobInfo(string RequestPlantCode, string Status) {
            object[] results = this.Invoke("GetJDMD3FileJobInfo", new object[] {
                        RequestPlantCode,
                        Status});
            return ((clsJDMD3FileJobInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetJDMD3FileJobInfoAsync(string RequestPlantCode, string Status) {
            this.GetJDMD3FileJobInfoAsync(RequestPlantCode, Status, null);
        }
        
        /// <remarks/>
        public void GetJDMD3FileJobInfoAsync(string RequestPlantCode, string Status, object userState) {
            if ((this.GetJDMD3FileJobInfoOperationCompleted == null)) {
                this.GetJDMD3FileJobInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJDMD3FileJobInfoOperationCompleted);
            }
            this.InvokeAsync("GetJDMD3FileJobInfo", new object[] {
                        RequestPlantCode,
                        Status}, this.GetJDMD3FileJobInfoOperationCompleted, userState);
        }
        
        private void OnGetJDMD3FileJobInfoOperationCompleted(object arg) {
            if ((this.GetJDMD3FileJobInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJDMD3FileJobInfoCompleted(this, new GetJDMD3FileJobInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateJDMD3FileJobStatus", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateJDMD3FileJobStatus(string RequstID, string Status) {
            object[] results = this.Invoke("UpdateJDMD3FileJobStatus", new object[] {
                        RequstID,
                        Status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateJDMD3FileJobStatusAsync(string RequstID, string Status) {
            this.UpdateJDMD3FileJobStatusAsync(RequstID, Status, null);
        }
        
        /// <remarks/>
        public void UpdateJDMD3FileJobStatusAsync(string RequstID, string Status, object userState) {
            if ((this.UpdateJDMD3FileJobStatusOperationCompleted == null)) {
                this.UpdateJDMD3FileJobStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateJDMD3FileJobStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateJDMD3FileJobStatus", new object[] {
                        RequstID,
                        Status}, this.UpdateJDMD3FileJobStatusOperationCompleted, userState);
        }
        
        private void OnUpdateJDMD3FileJobStatusOperationCompleted(object arg) {
            if ((this.UpdateJDMD3FileJobStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateJDMD3FileJobStatusCompleted(this, new UpdateJDMD3FileJobStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetAISImageFileName", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAISImageFileName(string UnitSerialNumber, string Category, string StageCode) {
            object[] results = this.Invoke("GetAISImageFileName", new object[] {
                        UnitSerialNumber,
                        Category,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAISImageFileNameAsync(string UnitSerialNumber, string Category, string StageCode) {
            this.GetAISImageFileNameAsync(UnitSerialNumber, Category, StageCode, null);
        }
        
        /// <remarks/>
        public void GetAISImageFileNameAsync(string UnitSerialNumber, string Category, string StageCode, object userState) {
            if ((this.GetAISImageFileNameOperationCompleted == null)) {
                this.GetAISImageFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAISImageFileNameOperationCompleted);
            }
            this.InvokeAsync("GetAISImageFileName", new object[] {
                        UnitSerialNumber,
                        Category,
                        StageCode}, this.GetAISImageFileNameOperationCompleted, userState);
        }
        
        private void OnGetAISImageFileNameOperationCompleted(object arg) {
            if ((this.GetAISImageFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAISImageFileNameCompleted(this, new GetAISImageFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetAISImageFileName1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetAISImageFileNameSplit", RequestElementName="GetAISImageFileNameSplit", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseElementName="GetAISImageFileNameSplitResponse", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetAISImageFileNameSplitResult")]
        public string GetAISImageFileName(string UnitSerialNumber, string Category, string StageCode, string FileNameSplitter) {
            object[] results = this.Invoke("GetAISImageFileName1", new object[] {
                        UnitSerialNumber,
                        Category,
                        StageCode,
                        FileNameSplitter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAISImageFileName1Async(string UnitSerialNumber, string Category, string StageCode, string FileNameSplitter) {
            this.GetAISImageFileName1Async(UnitSerialNumber, Category, StageCode, FileNameSplitter, null);
        }
        
        /// <remarks/>
        public void GetAISImageFileName1Async(string UnitSerialNumber, string Category, string StageCode, string FileNameSplitter, object userState) {
            if ((this.GetAISImageFileName1OperationCompleted == null)) {
                this.GetAISImageFileName1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAISImageFileName1OperationCompleted);
            }
            this.InvokeAsync("GetAISImageFileName1", new object[] {
                        UnitSerialNumber,
                        Category,
                        StageCode,
                        FileNameSplitter}, this.GetAISImageFileName1OperationCompleted, userState);
        }
        
        private void OnGetAISImageFileName1OperationCompleted(object arg) {
            if ((this.GetAISImageFileName1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAISImageFileName1Completed(this, new GetAISImageFileName1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetIDValueByMO", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsMOIDValue GetIDValueByMO(string MO, string StageCode, int IDType) {
            object[] results = this.Invoke("GetIDValueByMO", new object[] {
                        MO,
                        StageCode,
                        IDType});
            return ((clsMOIDValue)(results[0]));
        }
        
        /// <remarks/>
        public void GetIDValueByMOAsync(string MO, string StageCode, int IDType) {
            this.GetIDValueByMOAsync(MO, StageCode, IDType, null);
        }
        
        /// <remarks/>
        public void GetIDValueByMOAsync(string MO, string StageCode, int IDType, object userState) {
            if ((this.GetIDValueByMOOperationCompleted == null)) {
                this.GetIDValueByMOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIDValueByMOOperationCompleted);
            }
            this.InvokeAsync("GetIDValueByMO", new object[] {
                        MO,
                        StageCode,
                        IDType}, this.GetIDValueByMOOperationCompleted, userState);
        }
        
        private void OnGetIDValueByMOOperationCompleted(object arg) {
            if ((this.GetIDValueByMOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIDValueByMOCompleted(this, new GetIDValueByMOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetICPN", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetICPN(string UnitSerialNumber, string StageCode, string Location) {
            object[] results = this.Invoke("GetICPN", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Location});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetICPNAsync(string UnitSerialNumber, string StageCode, string Location) {
            this.GetICPNAsync(UnitSerialNumber, StageCode, Location, null);
        }
        
        /// <remarks/>
        public void GetICPNAsync(string UnitSerialNumber, string StageCode, string Location, object userState) {
            if ((this.GetICPNOperationCompleted == null)) {
                this.GetICPNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetICPNOperationCompleted);
            }
            this.InvokeAsync("GetICPN", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Location}, this.GetICPNOperationCompleted, userState);
        }
        
        private void OnGetICPNOperationCompleted(object arg) {
            if ((this.GetICPNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetICPNCompleted(this, new GetICPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetEngravingInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsEngravingInfo GetEngravingInfo(string UnitSerialNumber, string StageCode) {
            object[] results = this.Invoke("GetEngravingInfo", new object[] {
                        UnitSerialNumber,
                        StageCode});
            return ((clsEngravingInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetEngravingInfoAsync(string UnitSerialNumber, string StageCode) {
            this.GetEngravingInfoAsync(UnitSerialNumber, StageCode, null);
        }
        
        /// <remarks/>
        public void GetEngravingInfoAsync(string UnitSerialNumber, string StageCode, object userState) {
            if ((this.GetEngravingInfoOperationCompleted == null)) {
                this.GetEngravingInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEngravingInfoOperationCompleted);
            }
            this.InvokeAsync("GetEngravingInfo", new object[] {
                        UnitSerialNumber,
                        StageCode}, this.GetEngravingInfoOperationCompleted, userState);
        }
        
        private void OnGetEngravingInfoOperationCompleted(object arg) {
            if ((this.GetEngravingInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEngravingInfoCompleted(this, new GetEngravingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMacSecurityKey", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMacSecurityKey(string MAC, string StageCode) {
            object[] results = this.Invoke("GetMacSecurityKey", new object[] {
                        MAC,
                        StageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMacSecurityKeyAsync(string MAC, string StageCode) {
            this.GetMacSecurityKeyAsync(MAC, StageCode, null);
        }
        
        /// <remarks/>
        public void GetMacSecurityKeyAsync(string MAC, string StageCode, object userState) {
            if ((this.GetMacSecurityKeyOperationCompleted == null)) {
                this.GetMacSecurityKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMacSecurityKeyOperationCompleted);
            }
            this.InvokeAsync("GetMacSecurityKey", new object[] {
                        MAC,
                        StageCode}, this.GetMacSecurityKeyOperationCompleted, userState);
        }
        
        private void OnGetMacSecurityKeyOperationCompleted(object arg) {
            if ((this.GetMacSecurityKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMacSecurityKeyCompleted(this, new GetMacSecurityKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRendyResult", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadRendyResult(string UnitSerialNumber, string StageCode, string Workstation, string Name, string SubName, string MinValue, string MaxValue, string MeasuredValue, string Unit, string UserID, bool Pass) {
            object[] results = this.Invoke("UploadRendyResult", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        Name,
                        SubName,
                        MinValue,
                        MaxValue,
                        MeasuredValue,
                        Unit,
                        UserID,
                        Pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadRendyResultAsync(string UnitSerialNumber, string StageCode, string Workstation, string Name, string SubName, string MinValue, string MaxValue, string MeasuredValue, string Unit, string UserID, bool Pass) {
            this.UploadRendyResultAsync(UnitSerialNumber, StageCode, Workstation, Name, SubName, MinValue, MaxValue, MeasuredValue, Unit, UserID, Pass, null);
        }
        
        /// <remarks/>
        public void UploadRendyResultAsync(string UnitSerialNumber, string StageCode, string Workstation, string Name, string SubName, string MinValue, string MaxValue, string MeasuredValue, string Unit, string UserID, bool Pass, object userState) {
            if ((this.UploadRendyResultOperationCompleted == null)) {
                this.UploadRendyResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRendyResultOperationCompleted);
            }
            this.InvokeAsync("UploadRendyResult", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        Name,
                        SubName,
                        MinValue,
                        MaxValue,
                        MeasuredValue,
                        Unit,
                        UserID,
                        Pass}, this.UploadRendyResultOperationCompleted, userState);
        }
        
        private void OnUploadRendyResultOperationCompleted(object arg) {
            if ((this.UploadRendyResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadRendyResultCompleted(this, new UploadRendyResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRendyAntiTheftCCID", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadRendyAntiTheftCCID(string UnitSerialNumber, string StageCode, string Workstation, string ProductSerialNumber, string AntiTheftCode, string CCID, string UserID) {
            object[] results = this.Invoke("UploadRendyAntiTheftCCID", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        ProductSerialNumber,
                        AntiTheftCode,
                        CCID,
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadRendyAntiTheftCCIDAsync(string UnitSerialNumber, string StageCode, string Workstation, string ProductSerialNumber, string AntiTheftCode, string CCID, string UserID) {
            this.UploadRendyAntiTheftCCIDAsync(UnitSerialNumber, StageCode, Workstation, ProductSerialNumber, AntiTheftCode, CCID, UserID, null);
        }
        
        /// <remarks/>
        public void UploadRendyAntiTheftCCIDAsync(string UnitSerialNumber, string StageCode, string Workstation, string ProductSerialNumber, string AntiTheftCode, string CCID, string UserID, object userState) {
            if ((this.UploadRendyAntiTheftCCIDOperationCompleted == null)) {
                this.UploadRendyAntiTheftCCIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRendyAntiTheftCCIDOperationCompleted);
            }
            this.InvokeAsync("UploadRendyAntiTheftCCID", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        ProductSerialNumber,
                        AntiTheftCode,
                        CCID,
                        UserID}, this.UploadRendyAntiTheftCCIDOperationCompleted, userState);
        }
        
        private void OnUploadRendyAntiTheftCCIDOperationCompleted(object arg) {
            if ((this.UploadRendyAntiTheftCCIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadRendyAntiTheftCCIDCompleted(this, new UploadRendyAntiTheftCCIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTpsUpnInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTpsUpnInfo(string UnitPartNumber, string StageCode, string InfoName, string InfoValue) {
            object[] results = this.Invoke("UploadTpsUpnInfo", new object[] {
                        UnitPartNumber,
                        StageCode,
                        InfoName,
                        InfoValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTpsUpnInfoAsync(string UnitPartNumber, string StageCode, string InfoName, string InfoValue) {
            this.UploadTpsUpnInfoAsync(UnitPartNumber, StageCode, InfoName, InfoValue, null);
        }
        
        /// <remarks/>
        public void UploadTpsUpnInfoAsync(string UnitPartNumber, string StageCode, string InfoName, string InfoValue, object userState) {
            if ((this.UploadTpsUpnInfoOperationCompleted == null)) {
                this.UploadTpsUpnInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTpsUpnInfoOperationCompleted);
            }
            this.InvokeAsync("UploadTpsUpnInfo", new object[] {
                        UnitPartNumber,
                        StageCode,
                        InfoName,
                        InfoValue}, this.UploadTpsUpnInfoOperationCompleted, userState);
        }
        
        private void OnUploadTpsUpnInfoOperationCompleted(object arg) {
            if ((this.UploadTpsUpnInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTpsUpnInfoCompleted(this, new UploadTpsUpnInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTeNotReadyMoList", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTeNotReadyMoList(string StageCode, [System.Xml.Serialization.XmlArrayItemAttribute("MO")] ref string[] MOs) {
            object[] results = this.Invoke("GetTeNotReadyMoList", new object[] {
                        StageCode,
                        MOs});
            MOs = ((string[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeNotReadyMoListAsync(string StageCode, string[] MOs) {
            this.GetTeNotReadyMoListAsync(StageCode, MOs, null);
        }
        
        /// <remarks/>
        public void GetTeNotReadyMoListAsync(string StageCode, string[] MOs, object userState) {
            if ((this.GetTeNotReadyMoListOperationCompleted == null)) {
                this.GetTeNotReadyMoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeNotReadyMoListOperationCompleted);
            }
            this.InvokeAsync("GetTeNotReadyMoList", new object[] {
                        StageCode,
                        MOs}, this.GetTeNotReadyMoListOperationCompleted, userState);
        }
        
        private void OnGetTeNotReadyMoListOperationCompleted(object arg) {
            if ((this.GetTeNotReadyMoListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeNotReadyMoListCompleted(this, new GetTeNotReadyMoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateTeReadyFlagByMo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateTeReadyFlagByMo(string MO, string StageCode, string TeProgramFlag) {
            object[] results = this.Invoke("UpdateTeReadyFlagByMo", new object[] {
                        MO,
                        StageCode,
                        TeProgramFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTeReadyFlagByMoAsync(string MO, string StageCode, string TeProgramFlag) {
            this.UpdateTeReadyFlagByMoAsync(MO, StageCode, TeProgramFlag, null);
        }
        
        /// <remarks/>
        public void UpdateTeReadyFlagByMoAsync(string MO, string StageCode, string TeProgramFlag, object userState) {
            if ((this.UpdateTeReadyFlagByMoOperationCompleted == null)) {
                this.UpdateTeReadyFlagByMoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTeReadyFlagByMoOperationCompleted);
            }
            this.InvokeAsync("UpdateTeReadyFlagByMo", new object[] {
                        MO,
                        StageCode,
                        TeProgramFlag}, this.UpdateTeReadyFlagByMoOperationCompleted, userState);
        }
        
        private void OnUpdateTeReadyFlagByMoOperationCompleted(object arg) {
            if ((this.UpdateTeReadyFlagByMoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTeReadyFlagByMoCompleted(this, new UpdateTeReadyFlagByMoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMoInfoByMo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMoInfoByMo(string MO, string StageCode, string InfoName) {
            object[] results = this.Invoke("GetMoInfoByMo", new object[] {
                        MO,
                        StageCode,
                        InfoName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMoInfoByMoAsync(string MO, string StageCode, string InfoName) {
            this.GetMoInfoByMoAsync(MO, StageCode, InfoName, null);
        }
        
        /// <remarks/>
        public void GetMoInfoByMoAsync(string MO, string StageCode, string InfoName, object userState) {
            if ((this.GetMoInfoByMoOperationCompleted == null)) {
                this.GetMoInfoByMoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMoInfoByMoOperationCompleted);
            }
            this.InvokeAsync("GetMoInfoByMo", new object[] {
                        MO,
                        StageCode,
                        InfoName}, this.GetMoInfoByMoOperationCompleted, userState);
        }
        
        private void OnGetMoInfoByMoOperationCompleted(object arg) {
            if ((this.GetMoInfoByMoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMoInfoByMoCompleted(this, new GetMoInfoByMoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMOItemByMo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMOItemByMo(string MO, string StageCode, string Category, [System.Xml.Serialization.XmlArrayItemAttribute("MOItem")] ref clsMOItem[] MOItems) {
            object[] results = this.Invoke("GetMOItemByMo", new object[] {
                        MO,
                        StageCode,
                        Category,
                        MOItems});
            MOItems = ((clsMOItem[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMOItemByMoAsync(string MO, string StageCode, string Category, clsMOItem[] MOItems) {
            this.GetMOItemByMoAsync(MO, StageCode, Category, MOItems, null);
        }
        
        /// <remarks/>
        public void GetMOItemByMoAsync(string MO, string StageCode, string Category, clsMOItem[] MOItems, object userState) {
            if ((this.GetMOItemByMoOperationCompleted == null)) {
                this.GetMOItemByMoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMOItemByMoOperationCompleted);
            }
            this.InvokeAsync("GetMOItemByMo", new object[] {
                        MO,
                        StageCode,
                        Category,
                        MOItems}, this.GetMOItemByMoOperationCompleted, userState);
        }
        
        private void OnGetMOItemByMoOperationCompleted(object arg) {
            if ((this.GetMOItemByMoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMOItemByMoCompleted(this, new GetMOItemByMoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTVKey", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTVKey(string UnitSerialNumber, string StageCode, ref clsTVKeyData clsTVKeyData) {
            object[] results = this.Invoke("GetTVKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        clsTVKeyData});
            clsTVKeyData = ((clsTVKeyData)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTVKeyAsync(string UnitSerialNumber, string StageCode, clsTVKeyData clsTVKeyData) {
            this.GetTVKeyAsync(UnitSerialNumber, StageCode, clsTVKeyData, null);
        }
        
        /// <remarks/>
        public void GetTVKeyAsync(string UnitSerialNumber, string StageCode, clsTVKeyData clsTVKeyData, object userState) {
            if ((this.GetTVKeyOperationCompleted == null)) {
                this.GetTVKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTVKeyOperationCompleted);
            }
            this.InvokeAsync("GetTVKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        clsTVKeyData}, this.GetTVKeyOperationCompleted, userState);
        }
        
        private void OnGetTVKeyOperationCompleted(object arg) {
            if ((this.GetTVKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTVKeyCompleted(this, new GetTVKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVKey", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTVKey(string UnitSerialNumber, string StageCode, string WorkStation, clsTVKeyItem[] TVKeyItems, bool UniqueCheckFlag) {
            object[] results = this.Invoke("UploadTVKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        WorkStation,
                        TVKeyItems,
                        UniqueCheckFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTVKeyAsync(string UnitSerialNumber, string StageCode, string WorkStation, clsTVKeyItem[] TVKeyItems, bool UniqueCheckFlag) {
            this.UploadTVKeyAsync(UnitSerialNumber, StageCode, WorkStation, TVKeyItems, UniqueCheckFlag, null);
        }
        
        /// <remarks/>
        public void UploadTVKeyAsync(string UnitSerialNumber, string StageCode, string WorkStation, clsTVKeyItem[] TVKeyItems, bool UniqueCheckFlag, object userState) {
            if ((this.UploadTVKeyOperationCompleted == null)) {
                this.UploadTVKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTVKeyOperationCompleted);
            }
            this.InvokeAsync("UploadTVKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        WorkStation,
                        TVKeyItems,
                        UniqueCheckFlag}, this.UploadTVKeyOperationCompleted, userState);
        }
        
        private void OnUploadTVKeyOperationCompleted(object arg) {
            if ((this.UploadTVKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTVKeyCompleted(this, new UploadTVKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetDefectUsnList", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDefectUsnList(string StageCode, System.DateTime DefectDateFrom, System.DateTime DefectDateTo, [System.Xml.Serialization.XmlArrayItemAttribute("UnitSerialNumber")] ref string[] UnitSerialNumbers) {
            object[] results = this.Invoke("GetDefectUsnList", new object[] {
                        StageCode,
                        DefectDateFrom,
                        DefectDateTo,
                        UnitSerialNumbers});
            UnitSerialNumbers = ((string[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefectUsnListAsync(string StageCode, System.DateTime DefectDateFrom, System.DateTime DefectDateTo, string[] UnitSerialNumbers) {
            this.GetDefectUsnListAsync(StageCode, DefectDateFrom, DefectDateTo, UnitSerialNumbers, null);
        }
        
        /// <remarks/>
        public void GetDefectUsnListAsync(string StageCode, System.DateTime DefectDateFrom, System.DateTime DefectDateTo, string[] UnitSerialNumbers, object userState) {
            if ((this.GetDefectUsnListOperationCompleted == null)) {
                this.GetDefectUsnListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefectUsnListOperationCompleted);
            }
            this.InvokeAsync("GetDefectUsnList", new object[] {
                        StageCode,
                        DefectDateFrom,
                        DefectDateTo,
                        UnitSerialNumbers}, this.GetDefectUsnListOperationCompleted, userState);
        }
        
        private void OnGetDefectUsnListOperationCompleted(object arg) {
            if ((this.GetDefectUsnListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefectUsnListCompleted(this, new GetDefectUsnListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnDefect", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUsnDefect(string UnitSerialNumber, string StageCode, ref System.Data.DataSet DataTable) {
            object[] results = this.Invoke("GetUsnDefect", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        DataTable});
            DataTable = ((System.Data.DataSet)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsnDefectAsync(string UnitSerialNumber, string StageCode, System.Data.DataSet DataTable) {
            this.GetUsnDefectAsync(UnitSerialNumber, StageCode, DataTable, null);
        }
        
        /// <remarks/>
        public void GetUsnDefectAsync(string UnitSerialNumber, string StageCode, System.Data.DataSet DataTable, object userState) {
            if ((this.GetUsnDefectOperationCompleted == null)) {
                this.GetUsnDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsnDefectOperationCompleted);
            }
            this.InvokeAsync("GetUsnDefect", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        DataTable}, this.GetUsnDefectOperationCompleted, userState);
        }
        
        private void OnGetUsnDefectOperationCompleted(object arg) {
            if ((this.GetUsnDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsnDefectCompleted(this, new GetUsnDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/RosaHddMoLinkCRUD", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RosaHddMoLinkCRUD(string MO, string HDDPPID, string CRUDType) {
            object[] results = this.Invoke("RosaHddMoLinkCRUD", new object[] {
                        MO,
                        HDDPPID,
                        CRUDType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RosaHddMoLinkCRUDAsync(string MO, string HDDPPID, string CRUDType) {
            this.RosaHddMoLinkCRUDAsync(MO, HDDPPID, CRUDType, null);
        }
        
        /// <remarks/>
        public void RosaHddMoLinkCRUDAsync(string MO, string HDDPPID, string CRUDType, object userState) {
            if ((this.RosaHddMoLinkCRUDOperationCompleted == null)) {
                this.RosaHddMoLinkCRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRosaHddMoLinkCRUDOperationCompleted);
            }
            this.InvokeAsync("RosaHddMoLinkCRUD", new object[] {
                        MO,
                        HDDPPID,
                        CRUDType}, this.RosaHddMoLinkCRUDOperationCompleted, userState);
        }
        
        private void OnRosaHddMoLinkCRUDOperationCompleted(object arg) {
            if ((this.RosaHddMoLinkCRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RosaHddMoLinkCRUDCompleted(this, new RosaHddMoLinkCRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetLastTransactionData", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastTransactionData(string UnitSerialNumber, string StageCode, ref string Workstation, ref string TransactionDate) {
            object[] results = this.Invoke("GetLastTransactionData", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        TransactionDate});
            Workstation = ((string)(results[1]));
            TransactionDate = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastTransactionDataAsync(string UnitSerialNumber, string StageCode, string Workstation, string TransactionDate) {
            this.GetLastTransactionDataAsync(UnitSerialNumber, StageCode, Workstation, TransactionDate, null);
        }
        
        /// <remarks/>
        public void GetLastTransactionDataAsync(string UnitSerialNumber, string StageCode, string Workstation, string TransactionDate, object userState) {
            if ((this.GetLastTransactionDataOperationCompleted == null)) {
                this.GetLastTransactionDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastTransactionDataOperationCompleted);
            }
            this.InvokeAsync("GetLastTransactionData", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        TransactionDate}, this.GetLastTransactionDataOperationCompleted, userState);
        }
        
        private void OnGetLastTransactionDataOperationCompleted(object arg) {
            if ((this.GetLastTransactionDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastTransactionDataCompleted(this, new GetLastTransactionDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetLastFixtureId", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastFixtureId(string UnitSerialNumber, string StageCode, ref string FixtureId) {
            object[] results = this.Invoke("GetLastFixtureId", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        FixtureId});
            FixtureId = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastFixtureIdAsync(string UnitSerialNumber, string StageCode, string FixtureId) {
            this.GetLastFixtureIdAsync(UnitSerialNumber, StageCode, FixtureId, null);
        }
        
        /// <remarks/>
        public void GetLastFixtureIdAsync(string UnitSerialNumber, string StageCode, string FixtureId, object userState) {
            if ((this.GetLastFixtureIdOperationCompleted == null)) {
                this.GetLastFixtureIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastFixtureIdOperationCompleted);
            }
            this.InvokeAsync("GetLastFixtureId", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        FixtureId}, this.GetLastFixtureIdOperationCompleted, userState);
        }
        
        private void OnGetLastFixtureIdOperationCompleted(object arg) {
            if ((this.GetLastFixtureIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastFixtureIdCompleted(this, new GetLastFixtureIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnRepair", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUsnRepair(string UnitSerialNumber, string StageCode, ref System.Data.DataSet DataTable) {
            object[] results = this.Invoke("GetUsnRepair", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        DataTable});
            DataTable = ((System.Data.DataSet)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsnRepairAsync(string UnitSerialNumber, string StageCode, System.Data.DataSet DataTable) {
            this.GetUsnRepairAsync(UnitSerialNumber, StageCode, DataTable, null);
        }
        
        /// <remarks/>
        public void GetUsnRepairAsync(string UnitSerialNumber, string StageCode, System.Data.DataSet DataTable, object userState) {
            if ((this.GetUsnRepairOperationCompleted == null)) {
                this.GetUsnRepairOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsnRepairOperationCompleted);
            }
            this.InvokeAsync("GetUsnRepair", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        DataTable}, this.GetUsnRepairOperationCompleted, userState);
        }
        
        private void OnGetUsnRepairOperationCompleted(object arg) {
            if ((this.GetUsnRepairCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsnRepairCompleted(this, new GetUsnRepairCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnInfoAtStage", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUsnInfoAtStage(string UnitSerialNumber, string StageCode, [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue")] ref clsKeyValue[] KeyValues) {
            object[] results = this.Invoke("GetUsnInfoAtStage", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        KeyValues});
            KeyValues = ((clsKeyValue[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsnInfoAtStageAsync(string UnitSerialNumber, string StageCode, clsKeyValue[] KeyValues) {
            this.GetUsnInfoAtStageAsync(UnitSerialNumber, StageCode, KeyValues, null);
        }
        
        /// <remarks/>
        public void GetUsnInfoAtStageAsync(string UnitSerialNumber, string StageCode, clsKeyValue[] KeyValues, object userState) {
            if ((this.GetUsnInfoAtStageOperationCompleted == null)) {
                this.GetUsnInfoAtStageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsnInfoAtStageOperationCompleted);
            }
            this.InvokeAsync("GetUsnInfoAtStage", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        KeyValues}, this.GetUsnInfoAtStageOperationCompleted, userState);
        }
        
        private void OnGetUsnInfoAtStageOperationCompleted(object arg) {
            if ((this.GetUsnInfoAtStageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsnInfoAtStageCompleted(this, new GetUsnInfoAtStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRfEquTestTime", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadRfEquTestTime(string PlantCode, string UnitSerialNumber, string StageCode, string EquipmentId, string TestStage, string TestStartTime, string TestEndTime, bool TestResult) {
            object[] results = this.Invoke("UploadRfEquTestTime", new object[] {
                        PlantCode,
                        UnitSerialNumber,
                        StageCode,
                        EquipmentId,
                        TestStage,
                        TestStartTime,
                        TestEndTime,
                        TestResult});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadRfEquTestTimeAsync(string PlantCode, string UnitSerialNumber, string StageCode, string EquipmentId, string TestStage, string TestStartTime, string TestEndTime, bool TestResult) {
            this.UploadRfEquTestTimeAsync(PlantCode, UnitSerialNumber, StageCode, EquipmentId, TestStage, TestStartTime, TestEndTime, TestResult, null);
        }
        
        /// <remarks/>
        public void UploadRfEquTestTimeAsync(string PlantCode, string UnitSerialNumber, string StageCode, string EquipmentId, string TestStage, string TestStartTime, string TestEndTime, bool TestResult, object userState) {
            if ((this.UploadRfEquTestTimeOperationCompleted == null)) {
                this.UploadRfEquTestTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRfEquTestTimeOperationCompleted);
            }
            this.InvokeAsync("UploadRfEquTestTime", new object[] {
                        PlantCode,
                        UnitSerialNumber,
                        StageCode,
                        EquipmentId,
                        TestStage,
                        TestStartTime,
                        TestEndTime,
                        TestResult}, this.UploadRfEquTestTimeOperationCompleted, userState);
        }
        
        private void OnUploadRfEquTestTimeOperationCompleted(object arg) {
            if ((this.UploadRfEquTestTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadRfEquTestTimeCompleted(this, new UploadRfEquTestTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetAutoStickLabelPN", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAutoStickLabelPN(string UnitSerialNumber, string StageCode, [System.Xml.Serialization.XmlArrayItemAttribute("AutoStickLabelPN")] ref clsAutoStickLabelPN[] AutoStickLabelPNs) {
            object[] results = this.Invoke("GetAutoStickLabelPN", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        AutoStickLabelPNs});
            AutoStickLabelPNs = ((clsAutoStickLabelPN[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAutoStickLabelPNAsync(string UnitSerialNumber, string StageCode, clsAutoStickLabelPN[] AutoStickLabelPNs) {
            this.GetAutoStickLabelPNAsync(UnitSerialNumber, StageCode, AutoStickLabelPNs, null);
        }
        
        /// <remarks/>
        public void GetAutoStickLabelPNAsync(string UnitSerialNumber, string StageCode, clsAutoStickLabelPN[] AutoStickLabelPNs, object userState) {
            if ((this.GetAutoStickLabelPNOperationCompleted == null)) {
                this.GetAutoStickLabelPNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAutoStickLabelPNOperationCompleted);
            }
            this.InvokeAsync("GetAutoStickLabelPN", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        AutoStickLabelPNs}, this.GetAutoStickLabelPNOperationCompleted, userState);
        }
        
        private void OnGetAutoStickLabelPNOperationCompleted(object arg) {
            if ((this.GetAutoStickLabelPNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAutoStickLabelPNCompleted(this, new GetAutoStickLabelPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/RosaSwPoNackRuleCheck", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RosaSwPoNackRuleCheck(string CustomerPO, string CustomerPOLine, string UsingInType, ref string Message) {
            object[] results = this.Invoke("RosaSwPoNackRuleCheck", new object[] {
                        CustomerPO,
                        CustomerPOLine,
                        UsingInType,
                        Message});
            Message = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RosaSwPoNackRuleCheckAsync(string CustomerPO, string CustomerPOLine, string UsingInType, string Message) {
            this.RosaSwPoNackRuleCheckAsync(CustomerPO, CustomerPOLine, UsingInType, Message, null);
        }
        
        /// <remarks/>
        public void RosaSwPoNackRuleCheckAsync(string CustomerPO, string CustomerPOLine, string UsingInType, string Message, object userState) {
            if ((this.RosaSwPoNackRuleCheckOperationCompleted == null)) {
                this.RosaSwPoNackRuleCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRosaSwPoNackRuleCheckOperationCompleted);
            }
            this.InvokeAsync("RosaSwPoNackRuleCheck", new object[] {
                        CustomerPO,
                        CustomerPOLine,
                        UsingInType,
                        Message}, this.RosaSwPoNackRuleCheckOperationCompleted, userState);
        }
        
        private void OnRosaSwPoNackRuleCheckOperationCompleted(object arg) {
            if ((this.RosaSwPoNackRuleCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RosaSwPoNackRuleCheckCompleted(this, new RosaSwPoNackRuleCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateEDI860Signal", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateEDI860Signal(string WOMSCHANGENO, string WOMSNO, string PLANT, string CUSTOMERPO, string TIEGROUP, string SIGNAL, ref string MESSAGE, string CUSTOMERSO) {
            object[] results = this.Invoke("UpdateEDI860Signal", new object[] {
                        WOMSCHANGENO,
                        WOMSNO,
                        PLANT,
                        CUSTOMERPO,
                        TIEGROUP,
                        SIGNAL,
                        MESSAGE,
                        CUSTOMERSO});
            MESSAGE = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEDI860SignalAsync(string WOMSCHANGENO, string WOMSNO, string PLANT, string CUSTOMERPO, string TIEGROUP, string SIGNAL, string MESSAGE, string CUSTOMERSO) {
            this.UpdateEDI860SignalAsync(WOMSCHANGENO, WOMSNO, PLANT, CUSTOMERPO, TIEGROUP, SIGNAL, MESSAGE, CUSTOMERSO, null);
        }
        
        /// <remarks/>
        public void UpdateEDI860SignalAsync(string WOMSCHANGENO, string WOMSNO, string PLANT, string CUSTOMERPO, string TIEGROUP, string SIGNAL, string MESSAGE, string CUSTOMERSO, object userState) {
            if ((this.UpdateEDI860SignalOperationCompleted == null)) {
                this.UpdateEDI860SignalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEDI860SignalOperationCompleted);
            }
            this.InvokeAsync("UpdateEDI860Signal", new object[] {
                        WOMSCHANGENO,
                        WOMSNO,
                        PLANT,
                        CUSTOMERPO,
                        TIEGROUP,
                        SIGNAL,
                        MESSAGE,
                        CUSTOMERSO}, this.UpdateEDI860SignalOperationCompleted, userState);
        }
        
        private void OnUpdateEDI860SignalOperationCompleted(object arg) {
            if ((this.UpdateEDI860SignalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEDI860SignalCompleted(this, new UpdateEDI860SignalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnById", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUsnById(string ID, string StageCode, int IDType, ref string UnitSerialNumber) {
            object[] results = this.Invoke("GetUsnById", new object[] {
                        ID,
                        StageCode,
                        IDType,
                        UnitSerialNumber});
            UnitSerialNumber = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsnByIdAsync(string ID, string StageCode, int IDType, string UnitSerialNumber) {
            this.GetUsnByIdAsync(ID, StageCode, IDType, UnitSerialNumber, null);
        }
        
        /// <remarks/>
        public void GetUsnByIdAsync(string ID, string StageCode, int IDType, string UnitSerialNumber, object userState) {
            if ((this.GetUsnByIdOperationCompleted == null)) {
                this.GetUsnByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsnByIdOperationCompleted);
            }
            this.InvokeAsync("GetUsnById", new object[] {
                        ID,
                        StageCode,
                        IDType,
                        UnitSerialNumber}, this.GetUsnByIdOperationCompleted, userState);
        }
        
        private void OnGetUsnByIdOperationCompleted(object arg) {
            if ((this.GetUsnByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsnByIdCompleted(this, new GetUsnByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadPcbLot", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadPcbLot(ref string UnitSerialNumber, string StageCode, string Barcode, string LotNo, string UserID) {
            object[] results = this.Invoke("UploadPcbLot", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Barcode,
                        LotNo,
                        UserID});
            UnitSerialNumber = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadPcbLotAsync(string UnitSerialNumber, string StageCode, string Barcode, string LotNo, string UserID) {
            this.UploadPcbLotAsync(UnitSerialNumber, StageCode, Barcode, LotNo, UserID, null);
        }
        
        /// <remarks/>
        public void UploadPcbLotAsync(string UnitSerialNumber, string StageCode, string Barcode, string LotNo, string UserID, object userState) {
            if ((this.UploadPcbLotOperationCompleted == null)) {
                this.UploadPcbLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPcbLotOperationCompleted);
            }
            this.InvokeAsync("UploadPcbLot", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Barcode,
                        LotNo,
                        UserID}, this.UploadPcbLotOperationCompleted, userState);
        }
        
        private void OnUploadPcbLotOperationCompleted(object arg) {
            if ((this.UploadPcbLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadPcbLotCompleted(this, new UploadPcbLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadEngravingResult", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadEngravingResult(string UnitSerialNumber, string StageCode, string UserID, string EngravingResult) {
            object[] results = this.Invoke("UploadEngravingResult", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID,
                        EngravingResult});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadEngravingResultAsync(string UnitSerialNumber, string StageCode, string UserID, string EngravingResult) {
            this.UploadEngravingResultAsync(UnitSerialNumber, StageCode, UserID, EngravingResult, null);
        }
        
        /// <remarks/>
        public void UploadEngravingResultAsync(string UnitSerialNumber, string StageCode, string UserID, string EngravingResult, object userState) {
            if ((this.UploadEngravingResultOperationCompleted == null)) {
                this.UploadEngravingResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadEngravingResultOperationCompleted);
            }
            this.InvokeAsync("UploadEngravingResult", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        UserID,
                        EngravingResult}, this.UploadEngravingResultOperationCompleted, userState);
        }
        
        private void OnUploadEngravingResultOperationCompleted(object arg) {
            if ((this.UploadEngravingResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadEngravingResultCompleted(this, new UploadEngravingResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadAstroMoInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadAstroMoInfo(string MO, string StageCode, [System.Xml.Serialization.XmlArrayItemAttribute("InfoNameValue")] clsInfoNameValue[] InfoNameValues) {
            object[] results = this.Invoke("UploadAstroMoInfo", new object[] {
                        MO,
                        StageCode,
                        InfoNameValues});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadAstroMoInfoAsync(string MO, string StageCode, clsInfoNameValue[] InfoNameValues) {
            this.UploadAstroMoInfoAsync(MO, StageCode, InfoNameValues, null);
        }
        
        /// <remarks/>
        public void UploadAstroMoInfoAsync(string MO, string StageCode, clsInfoNameValue[] InfoNameValues, object userState) {
            if ((this.UploadAstroMoInfoOperationCompleted == null)) {
                this.UploadAstroMoInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadAstroMoInfoOperationCompleted);
            }
            this.InvokeAsync("UploadAstroMoInfo", new object[] {
                        MO,
                        StageCode,
                        InfoNameValues}, this.UploadAstroMoInfoOperationCompleted, userState);
        }
        
        private void OnUploadAstroMoInfoOperationCompleted(object arg) {
            if ((this.UploadAstroMoInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadAstroMoInfoCompleted(this, new UploadAstroMoInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUpnInfoFromView", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUpnInfoFromView(string UnitPartNumber, string StageCode, string UpnInfoType, [System.Xml.Serialization.XmlArrayItemAttribute("InfoNameValue")] ref clsInfoNameValue[] InfoNameValues) {
            object[] results = this.Invoke("GetUpnInfoFromView", new object[] {
                        UnitPartNumber,
                        StageCode,
                        UpnInfoType,
                        InfoNameValues});
            InfoNameValues = ((clsInfoNameValue[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUpnInfoFromViewAsync(string UnitPartNumber, string StageCode, string UpnInfoType, clsInfoNameValue[] InfoNameValues) {
            this.GetUpnInfoFromViewAsync(UnitPartNumber, StageCode, UpnInfoType, InfoNameValues, null);
        }
        
        /// <remarks/>
        public void GetUpnInfoFromViewAsync(string UnitPartNumber, string StageCode, string UpnInfoType, clsInfoNameValue[] InfoNameValues, object userState) {
            if ((this.GetUpnInfoFromViewOperationCompleted == null)) {
                this.GetUpnInfoFromViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpnInfoFromViewOperationCompleted);
            }
            this.InvokeAsync("GetUpnInfoFromView", new object[] {
                        UnitPartNumber,
                        StageCode,
                        UpnInfoType,
                        InfoNameValues}, this.GetUpnInfoFromViewOperationCompleted, userState);
        }
        
        private void OnGetUpnInfoFromViewOperationCompleted(object arg) {
            if ((this.GetUpnInfoFromViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpnInfoFromViewCompleted(this, new GetUpnInfoFromViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetKeyInfoFromView", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKeyInfoFromView(string Key, string StageCode, string KeyInfoType, [System.Xml.Serialization.XmlArrayItemAttribute("InfoNameValue")] ref clsInfoNameValue[] InfoNameValues) {
            object[] results = this.Invoke("GetKeyInfoFromView", new object[] {
                        Key,
                        StageCode,
                        KeyInfoType,
                        InfoNameValues});
            InfoNameValues = ((clsInfoNameValue[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKeyInfoFromViewAsync(string Key, string StageCode, string KeyInfoType, clsInfoNameValue[] InfoNameValues) {
            this.GetKeyInfoFromViewAsync(Key, StageCode, KeyInfoType, InfoNameValues, null);
        }
        
        /// <remarks/>
        public void GetKeyInfoFromViewAsync(string Key, string StageCode, string KeyInfoType, clsInfoNameValue[] InfoNameValues, object userState) {
            if ((this.GetKeyInfoFromViewOperationCompleted == null)) {
                this.GetKeyInfoFromViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyInfoFromViewOperationCompleted);
            }
            this.InvokeAsync("GetKeyInfoFromView", new object[] {
                        Key,
                        StageCode,
                        KeyInfoType,
                        InfoNameValues}, this.GetKeyInfoFromViewOperationCompleted, userState);
        }
        
        private void OnGetKeyInfoFromViewOperationCompleted(object arg) {
            if ((this.GetKeyInfoFromViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyInfoFromViewCompleted(this, new GetKeyInfoFromViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRuninRackStatus", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadRuninRackStatus(string MAC, string StageCode, string RuninRackID) {
            object[] results = this.Invoke("UploadRuninRackStatus", new object[] {
                        MAC,
                        StageCode,
                        RuninRackID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadRuninRackStatusAsync(string MAC, string StageCode, string RuninRackID) {
            this.UploadRuninRackStatusAsync(MAC, StageCode, RuninRackID, null);
        }
        
        /// <remarks/>
        public void UploadRuninRackStatusAsync(string MAC, string StageCode, string RuninRackID, object userState) {
            if ((this.UploadRuninRackStatusOperationCompleted == null)) {
                this.UploadRuninRackStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRuninRackStatusOperationCompleted);
            }
            this.InvokeAsync("UploadRuninRackStatus", new object[] {
                        MAC,
                        StageCode,
                        RuninRackID}, this.UploadRuninRackStatusOperationCompleted, userState);
        }
        
        private void OnUploadRuninRackStatusOperationCompleted(object arg) {
            if ((this.UploadRuninRackStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadRuninRackStatusCompleted(this, new UploadRuninRackStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/AllocateAndroidKey", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AllocateAndroidKey(string UnitSerialNumber, string StageCode, string Workstation, string ActionType, string ReturnField, ref string ResultValue) {
            object[] results = this.Invoke("AllocateAndroidKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        ActionType,
                        ReturnField,
                        ResultValue});
            ResultValue = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AllocateAndroidKeyAsync(string UnitSerialNumber, string StageCode, string Workstation, string ActionType, string ReturnField, string ResultValue) {
            this.AllocateAndroidKeyAsync(UnitSerialNumber, StageCode, Workstation, ActionType, ReturnField, ResultValue, null);
        }
        
        /// <remarks/>
        public void AllocateAndroidKeyAsync(string UnitSerialNumber, string StageCode, string Workstation, string ActionType, string ReturnField, string ResultValue, object userState) {
            if ((this.AllocateAndroidKeyOperationCompleted == null)) {
                this.AllocateAndroidKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllocateAndroidKeyOperationCompleted);
            }
            this.InvokeAsync("AllocateAndroidKey", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        Workstation,
                        ActionType,
                        ReturnField,
                        ResultValue}, this.AllocateAndroidKeyOperationCompleted, userState);
        }
        
        private void OnAllocateAndroidKeyOperationCompleted(object arg) {
            if ((this.AllocateAndroidKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllocateAndroidKeyCompleted(this, new AllocateAndroidKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckEngravingBoradBarcLotNo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckEngravingBoradBarcLotNo(string StageCode, string Barcode, string LotNo) {
            object[] results = this.Invoke("CheckEngravingBoradBarcLotNo", new object[] {
                        StageCode,
                        Barcode,
                        LotNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckEngravingBoradBarcLotNoAsync(string StageCode, string Barcode, string LotNo) {
            this.CheckEngravingBoradBarcLotNoAsync(StageCode, Barcode, LotNo, null);
        }
        
        /// <remarks/>
        public void CheckEngravingBoradBarcLotNoAsync(string StageCode, string Barcode, string LotNo, object userState) {
            if ((this.CheckEngravingBoradBarcLotNoOperationCompleted == null)) {
                this.CheckEngravingBoradBarcLotNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckEngravingBoradBarcLotNoOperationCompleted);
            }
            this.InvokeAsync("CheckEngravingBoradBarcLotNo", new object[] {
                        StageCode,
                        Barcode,
                        LotNo}, this.CheckEngravingBoradBarcLotNoOperationCompleted, userState);
        }
        
        private void OnCheckEngravingBoradBarcLotNoOperationCompleted(object arg) {
            if ((this.CheckEngravingBoradBarcLotNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckEngravingBoradBarcLotNoCompleted(this, new CheckEngravingBoradBarcLotNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/AllocateAwaitingUnitSnList", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AllocateAwaitingUnitSnList(string MO, string StageCode, string MachineID, ref string UnitSerialNumberList) {
            object[] results = this.Invoke("AllocateAwaitingUnitSnList", new object[] {
                        MO,
                        StageCode,
                        MachineID,
                        UnitSerialNumberList});
            UnitSerialNumberList = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AllocateAwaitingUnitSnListAsync(string MO, string StageCode, string MachineID, string UnitSerialNumberList) {
            this.AllocateAwaitingUnitSnListAsync(MO, StageCode, MachineID, UnitSerialNumberList, null);
        }
        
        /// <remarks/>
        public void AllocateAwaitingUnitSnListAsync(string MO, string StageCode, string MachineID, string UnitSerialNumberList, object userState) {
            if ((this.AllocateAwaitingUnitSnListOperationCompleted == null)) {
                this.AllocateAwaitingUnitSnListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllocateAwaitingUnitSnListOperationCompleted);
            }
            this.InvokeAsync("AllocateAwaitingUnitSnList", new object[] {
                        MO,
                        StageCode,
                        MachineID,
                        UnitSerialNumberList}, this.AllocateAwaitingUnitSnListOperationCompleted, userState);
        }
        
        private void OnAllocateAwaitingUnitSnListOperationCompleted(object arg) {
            if ((this.AllocateAwaitingUnitSnListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllocateAwaitingUnitSnListCompleted(this, new AllocateAwaitingUnitSnListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadCompleteEngravingUnitSn", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadCompleteEngravingUnitSn(string UnitSerialNumberList, string StageCode, string MachineID) {
            object[] results = this.Invoke("UploadCompleteEngravingUnitSn", new object[] {
                        UnitSerialNumberList,
                        StageCode,
                        MachineID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadCompleteEngravingUnitSnAsync(string UnitSerialNumberList, string StageCode, string MachineID) {
            this.UploadCompleteEngravingUnitSnAsync(UnitSerialNumberList, StageCode, MachineID, null);
        }
        
        /// <remarks/>
        public void UploadCompleteEngravingUnitSnAsync(string UnitSerialNumberList, string StageCode, string MachineID, object userState) {
            if ((this.UploadCompleteEngravingUnitSnOperationCompleted == null)) {
                this.UploadCompleteEngravingUnitSnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCompleteEngravingUnitSnOperationCompleted);
            }
            this.InvokeAsync("UploadCompleteEngravingUnitSn", new object[] {
                        UnitSerialNumberList,
                        StageCode,
                        MachineID}, this.UploadCompleteEngravingUnitSnOperationCompleted, userState);
        }
        
        private void OnUploadCompleteEngravingUnitSnOperationCompleted(object arg) {
            if ((this.UploadCompleteEngravingUnitSnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCompleteEngravingUnitSnCompleted(this, new UploadCompleteEngravingUnitSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMoAndBoardInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMoAndBoardInfo(string SheetNo, ref clsMOAndBoardInfo ClassMOAndBoardInfo) {
            object[] results = this.Invoke("GetMoAndBoardInfo", new object[] {
                        SheetNo,
                        ClassMOAndBoardInfo});
            ClassMOAndBoardInfo = ((clsMOAndBoardInfo)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMoAndBoardInfoAsync(string SheetNo, clsMOAndBoardInfo ClassMOAndBoardInfo) {
            this.GetMoAndBoardInfoAsync(SheetNo, ClassMOAndBoardInfo, null);
        }
        
        /// <remarks/>
        public void GetMoAndBoardInfoAsync(string SheetNo, clsMOAndBoardInfo ClassMOAndBoardInfo, object userState) {
            if ((this.GetMoAndBoardInfoOperationCompleted == null)) {
                this.GetMoAndBoardInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMoAndBoardInfoOperationCompleted);
            }
            this.InvokeAsync("GetMoAndBoardInfo", new object[] {
                        SheetNo,
                        ClassMOAndBoardInfo}, this.GetMoAndBoardInfoOperationCompleted, userState);
        }
        
        private void OnGetMoAndBoardInfoOperationCompleted(object arg) {
            if ((this.GetMoAndBoardInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMoAndBoardInfoCompleted(this, new GetMoAndBoardInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/Get2SLabelInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get2SLabelInfo(string SheetNo, [System.Xml.Serialization.XmlElementAttribute("2DBarcode")] string Item2DBarcode, ref cls2SLabelInfo Class2SLabelInfo) {
            object[] results = this.Invoke("Get2SLabelInfo", new object[] {
                        SheetNo,
                        Item2DBarcode,
                        Class2SLabelInfo});
            Class2SLabelInfo = ((cls2SLabelInfo)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get2SLabelInfoAsync(string SheetNo, string Item2DBarcode, cls2SLabelInfo Class2SLabelInfo) {
            this.Get2SLabelInfoAsync(SheetNo, Item2DBarcode, Class2SLabelInfo, null);
        }
        
        /// <remarks/>
        public void Get2SLabelInfoAsync(string SheetNo, string Item2DBarcode, cls2SLabelInfo Class2SLabelInfo, object userState) {
            if ((this.Get2SLabelInfoOperationCompleted == null)) {
                this.Get2SLabelInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet2SLabelInfoOperationCompleted);
            }
            this.InvokeAsync("Get2SLabelInfo", new object[] {
                        SheetNo,
                        Item2DBarcode,
                        Class2SLabelInfo}, this.Get2SLabelInfoOperationCompleted, userState);
        }
        
        private void OnGet2SLabelInfoOperationCompleted(object arg) {
            if ((this.Get2SLabelInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get2SLabelInfoCompleted(this, new Get2SLabelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/Upload2SLabelInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Upload2SLabelInfo(string SheetNo, [System.Xml.Serialization.XmlElementAttribute("2DBarcode")] string Item2DBarcode, string Brand, string UserID) {
            object[] results = this.Invoke("Upload2SLabelInfo", new object[] {
                        SheetNo,
                        Item2DBarcode,
                        Brand,
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Upload2SLabelInfoAsync(string SheetNo, string Item2DBarcode, string Brand, string UserID) {
            this.Upload2SLabelInfoAsync(SheetNo, Item2DBarcode, Brand, UserID, null);
        }
        
        /// <remarks/>
        public void Upload2SLabelInfoAsync(string SheetNo, string Item2DBarcode, string Brand, string UserID, object userState) {
            if ((this.Upload2SLabelInfoOperationCompleted == null)) {
                this.Upload2SLabelInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpload2SLabelInfoOperationCompleted);
            }
            this.InvokeAsync("Upload2SLabelInfo", new object[] {
                        SheetNo,
                        Item2DBarcode,
                        Brand,
                        UserID}, this.Upload2SLabelInfoOperationCompleted, userState);
        }
        
        private void OnUpload2SLabelInfoOperationCompleted(object arg) {
            if ((this.Upload2SLabelInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Upload2SLabelInfoCompleted(this, new Upload2SLabelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnInformationList", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUsnInformationList(string UnitSerialNumber, string StageCode, ref clsInfoNameValue[] InfoNameValues) {
            object[] results = this.Invoke("GetUsnInformationList", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        InfoNameValues});
            InfoNameValues = ((clsInfoNameValue[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsnInformationListAsync(string UnitSerialNumber, string StageCode, clsInfoNameValue[] InfoNameValues) {
            this.GetUsnInformationListAsync(UnitSerialNumber, StageCode, InfoNameValues, null);
        }
        
        /// <remarks/>
        public void GetUsnInformationListAsync(string UnitSerialNumber, string StageCode, clsInfoNameValue[] InfoNameValues, object userState) {
            if ((this.GetUsnInformationListOperationCompleted == null)) {
                this.GetUsnInformationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsnInformationListOperationCompleted);
            }
            this.InvokeAsync("GetUsnInformationList", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        InfoNameValues}, this.GetUsnInformationListOperationCompleted, userState);
        }
        
        private void OnGetUsnInformationListOperationCompleted(object arg) {
            if ((this.GetUsnInformationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsnInformationListCompleted(this, new GetUsnInformationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTvDacDataList", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTvDacDataList(string UnitSerialNumber, string StageCode, [System.Xml.Serialization.XmlArrayItemAttribute("TvDacDataItem")] ref clsTvDacData[] TvDacDataArray) {
            object[] results = this.Invoke("GetTvDacDataList", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        TvDacDataArray});
            TvDacDataArray = ((clsTvDacData[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTvDacDataListAsync(string UnitSerialNumber, string StageCode, clsTvDacData[] TvDacDataArray) {
            this.GetTvDacDataListAsync(UnitSerialNumber, StageCode, TvDacDataArray, null);
        }
        
        /// <remarks/>
        public void GetTvDacDataListAsync(string UnitSerialNumber, string StageCode, clsTvDacData[] TvDacDataArray, object userState) {
            if ((this.GetTvDacDataListOperationCompleted == null)) {
                this.GetTvDacDataListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTvDacDataListOperationCompleted);
            }
            this.InvokeAsync("GetTvDacDataList", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        TvDacDataArray}, this.GetTvDacDataListOperationCompleted, userState);
        }
        
        private void OnGetTvDacDataListOperationCompleted(object arg) {
            if ((this.GetTvDacDataListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTvDacDataListCompleted(this, new GetTvDacDataListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/SwapUSN", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SwapUSN(string UnitSerialNumber, string StageCode, string ViceUnitSN) {
            object[] results = this.Invoke("SwapUSN", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ViceUnitSN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SwapUSNAsync(string UnitSerialNumber, string StageCode, string ViceUnitSN) {
            this.SwapUSNAsync(UnitSerialNumber, StageCode, ViceUnitSN, null);
        }
        
        /// <remarks/>
        public void SwapUSNAsync(string UnitSerialNumber, string StageCode, string ViceUnitSN, object userState) {
            if ((this.SwapUSNOperationCompleted == null)) {
                this.SwapUSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwapUSNOperationCompleted);
            }
            this.InvokeAsync("SwapUSN", new object[] {
                        UnitSerialNumber,
                        StageCode,
                        ViceUnitSN}, this.SwapUSNOperationCompleted, userState);
        }
        
        private void OnSwapUSNOperationCompleted(object arg) {
            if ((this.SwapUSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwapUSNCompleted(this, new SwapUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetEllaRackLoction", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEllaRackLoction(string UnitSerialNumber, string Line, string StageCode, ref clsInfoNameValue[] InfoNameValues) {
            object[] results = this.Invoke("GetEllaRackLoction", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        InfoNameValues});
            InfoNameValues = ((clsInfoNameValue[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEllaRackLoctionAsync(string UnitSerialNumber, string Line, string StageCode, clsInfoNameValue[] InfoNameValues) {
            this.GetEllaRackLoctionAsync(UnitSerialNumber, Line, StageCode, InfoNameValues, null);
        }
        
        /// <remarks/>
        public void GetEllaRackLoctionAsync(string UnitSerialNumber, string Line, string StageCode, clsInfoNameValue[] InfoNameValues, object userState) {
            if ((this.GetEllaRackLoctionOperationCompleted == null)) {
                this.GetEllaRackLoctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEllaRackLoctionOperationCompleted);
            }
            this.InvokeAsync("GetEllaRackLoction", new object[] {
                        UnitSerialNumber,
                        Line,
                        StageCode,
                        InfoNameValues}, this.GetEllaRackLoctionOperationCompleted, userState);
        }
        
        private void OnGetEllaRackLoctionOperationCompleted(object arg) {
            if ((this.GetEllaRackLoctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEllaRackLoctionCompleted(this, new GetEllaRackLoctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetWebServiceInfo", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsWSInfo GetWebServiceInfo() {
            object[] results = this.Invoke("GetWebServiceInfo", new object[0]);
            return ((clsWSInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebServiceInfoAsync() {
            this.GetWebServiceInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetWebServiceInfoAsync(object userState) {
            if ((this.GetWebServiceInfoOperationCompleted == null)) {
                this.GetWebServiceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebServiceInfoOperationCompleted);
            }
            this.InvokeAsync("GetWebServiceInfo", new object[0], this.GetWebServiceInfoOperationCompleted, userState);
        }
        
        private void OnGetWebServiceInfoOperationCompleted(object arg) {
            if ((this.GetWebServiceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebServiceInfoCompleted(this, new GetWebServiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetWebServiceConfig", RequestNamespace="http://localhost/Tester.WebService/WebService", ResponseNamespace="http://localhost/Tester.WebService/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public clsWSConfig[] GetWebServiceConfig() {
            object[] results = this.Invoke("GetWebServiceConfig", new object[0]);
            return ((clsWSConfig[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWebServiceConfigAsync() {
            this.GetWebServiceConfigAsync(null);
        }
        
        /// <remarks/>
        public void GetWebServiceConfigAsync(object userState) {
            if ((this.GetWebServiceConfigOperationCompleted == null)) {
                this.GetWebServiceConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebServiceConfigOperationCompleted);
            }
            this.InvokeAsync("GetWebServiceConfig", new object[0], this.GetWebServiceConfigOperationCompleted, userState);
        }
        
        private void OnGetWebServiceConfigOperationCompleted(object arg) {
            if ((this.GetWebServiceConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebServiceConfigCompleted(this, new GetWebServiceConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsHDCPKey {
        
        private string bKSVField;
        
        private string stageCodeField;
        
        private string codeTypeField;
        
        private string codeField;
        
        /// <remarks/>
        public string BKSV {
            get {
                return this.bKSVField;
            }
            set {
                this.bKSVField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CodeType {
            get {
                return this.codeTypeField;
            }
            set {
                this.codeTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsWSConfig {
        
        private int seqField;
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        public int Seq {
            get {
                return this.seqField;
            }
            set {
                this.seqField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsWSInfo {
        
        private string assemblyTitleField;
        
        private string assemblyDescriptionField;
        
        private string assemblyCompanyField;
        
        private string assemblyProductField;
        
        private string assemblyCopyrightField;
        
        private string assemblyTrademarkField;
        
        private string assemblyVersionField;
        
        private string cLSCompliantField;
        
        private string debuggableField;
        
        private string guidField;
        
        /// <remarks/>
        public string AssemblyTitle {
            get {
                return this.assemblyTitleField;
            }
            set {
                this.assemblyTitleField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyDescription {
            get {
                return this.assemblyDescriptionField;
            }
            set {
                this.assemblyDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyCompany {
            get {
                return this.assemblyCompanyField;
            }
            set {
                this.assemblyCompanyField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyProduct {
            get {
                return this.assemblyProductField;
            }
            set {
                this.assemblyProductField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyCopyright {
            get {
                return this.assemblyCopyrightField;
            }
            set {
                this.assemblyCopyrightField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyTrademark {
            get {
                return this.assemblyTrademarkField;
            }
            set {
                this.assemblyTrademarkField = value;
            }
        }
        
        /// <remarks/>
        public string AssemblyVersion {
            get {
                return this.assemblyVersionField;
            }
            set {
                this.assemblyVersionField = value;
            }
        }
        
        /// <remarks/>
        public string CLSCompliant {
            get {
                return this.cLSCompliantField;
            }
            set {
                this.cLSCompliantField = value;
            }
        }
        
        /// <remarks/>
        public string Debuggable {
            get {
                return this.debuggableField;
            }
            set {
                this.debuggableField = value;
            }
        }
        
        /// <remarks/>
        public string Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsTvDacData {
        
        private string uSNField;
        
        private string lineField;
        
        private string stageCodeField;
        
        private string workstationField;
        
        private int colorTypeField;
        
        private int rCutField;
        
        private int gCutField;
        
        private int bCutField;
        
        private int rGainField;
        
        private int gGainField;
        
        private int bGainField;
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Workstation {
            get {
                return this.workstationField;
            }
            set {
                this.workstationField = value;
            }
        }
        
        /// <remarks/>
        public int ColorType {
            get {
                return this.colorTypeField;
            }
            set {
                this.colorTypeField = value;
            }
        }
        
        /// <remarks/>
        public int RCut {
            get {
                return this.rCutField;
            }
            set {
                this.rCutField = value;
            }
        }
        
        /// <remarks/>
        public int GCut {
            get {
                return this.gCutField;
            }
            set {
                this.gCutField = value;
            }
        }
        
        /// <remarks/>
        public int BCut {
            get {
                return this.bCutField;
            }
            set {
                this.bCutField = value;
            }
        }
        
        /// <remarks/>
        public int RGain {
            get {
                return this.rGainField;
            }
            set {
                this.rGainField = value;
            }
        }
        
        /// <remarks/>
        public int GGain {
            get {
                return this.gGainField;
            }
            set {
                this.gGainField = value;
            }
        }
        
        /// <remarks/>
        public int BGain {
            get {
                return this.bGainField;
            }
            set {
                this.bGainField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class cls2SLabelInfo {
        
        private bool exist2SLabelField;
        
        private string s2SLabelField;
        
        private string[] arrBrandField;
        
        private string partNumberField;
        
        private string traceIDField;
        
        private int packageQtyField;
        
        /// <remarks/>
        public bool Exist2SLabel {
            get {
                return this.exist2SLabelField;
            }
            set {
                this.exist2SLabelField = value;
            }
        }
        
        /// <remarks/>
        public string s2SLabel {
            get {
                return this.s2SLabelField;
            }
            set {
                this.s2SLabelField = value;
            }
        }
        
        /// <remarks/>
        public string[] arrBrand {
            get {
                return this.arrBrandField;
            }
            set {
                this.arrBrandField = value;
            }
        }
        
        /// <remarks/>
        public string PartNumber {
            get {
                return this.partNumberField;
            }
            set {
                this.partNumberField = value;
            }
        }
        
        /// <remarks/>
        public string TraceID {
            get {
                return this.traceIDField;
            }
            set {
                this.traceIDField = value;
            }
        }
        
        /// <remarks/>
        public int PackageQty {
            get {
                return this.packageQtyField;
            }
            set {
                this.packageQtyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsLog {
        
        private string wOPKIDField;
        
        private int stepSNField;
        
        private int seqNoField;
        
        private int typeField;
        
        private string okField;
        
        private string ngField;
        
        private int errorCodeField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string WOPKID {
            get {
                return this.wOPKIDField;
            }
            set {
                this.wOPKIDField = value;
            }
        }
        
        /// <remarks/>
        public int StepSN {
            get {
                return this.stepSNField;
            }
            set {
                this.stepSNField = value;
            }
        }
        
        /// <remarks/>
        public int SeqNo {
            get {
                return this.seqNoField;
            }
            set {
                this.seqNoField = value;
            }
        }
        
        /// <remarks/>
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string OK {
            get {
                return this.okField;
            }
            set {
                this.okField = value;
            }
        }
        
        /// <remarks/>
        public string NG {
            get {
                return this.ngField;
            }
            set {
                this.ngField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsStep {
        
        private string wOPKIDField;
        
        private int stepSNField;
        
        private int fUNCField;
        
        private int sideField;
        
        private string sheetNoField;
        
        private string feederField;
        
        private string zoneField;
        
        private string pKZoneField;
        
        private string rLCNField;
        
        private int qanaField;
        
        private int doneField;
        
        /// <remarks/>
        public string WOPKID {
            get {
                return this.wOPKIDField;
            }
            set {
                this.wOPKIDField = value;
            }
        }
        
        /// <remarks/>
        public int StepSN {
            get {
                return this.stepSNField;
            }
            set {
                this.stepSNField = value;
            }
        }
        
        /// <remarks/>
        public int FUNC {
            get {
                return this.fUNCField;
            }
            set {
                this.fUNCField = value;
            }
        }
        
        /// <remarks/>
        public int Side {
            get {
                return this.sideField;
            }
            set {
                this.sideField = value;
            }
        }
        
        /// <remarks/>
        public string SheetNo {
            get {
                return this.sheetNoField;
            }
            set {
                this.sheetNoField = value;
            }
        }
        
        /// <remarks/>
        public string Feeder {
            get {
                return this.feederField;
            }
            set {
                this.feederField = value;
            }
        }
        
        /// <remarks/>
        public string Zone {
            get {
                return this.zoneField;
            }
            set {
                this.zoneField = value;
            }
        }
        
        /// <remarks/>
        public string PKZone {
            get {
                return this.pKZoneField;
            }
            set {
                this.pKZoneField = value;
            }
        }
        
        /// <remarks/>
        public string RLCN {
            get {
                return this.rLCNField;
            }
            set {
                this.rLCNField = value;
            }
        }
        
        /// <remarks/>
        public int Qana {
            get {
                return this.qanaField;
            }
            set {
                this.qanaField = value;
            }
        }
        
        /// <remarks/>
        public int Done {
            get {
                return this.doneField;
            }
            set {
                this.doneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsZone {
        
        private string lineField;
        
        private int mcnoField;
        
        private string zoneField;
        
        private int trayField;
        
        private int sideField;
        
        private string pKZoneField;
        
        private string feederField;
        
        private int qanaField;
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public int Mcno {
            get {
                return this.mcnoField;
            }
            set {
                this.mcnoField = value;
            }
        }
        
        /// <remarks/>
        public string Zone {
            get {
                return this.zoneField;
            }
            set {
                this.zoneField = value;
            }
        }
        
        /// <remarks/>
        public int Tray {
            get {
                return this.trayField;
            }
            set {
                this.trayField = value;
            }
        }
        
        /// <remarks/>
        public int Side {
            get {
                return this.sideField;
            }
            set {
                this.sideField = value;
            }
        }
        
        /// <remarks/>
        public string PKZone {
            get {
                return this.pKZoneField;
            }
            set {
                this.pKZoneField = value;
            }
        }
        
        /// <remarks/>
        public string Feeder {
            get {
                return this.feederField;
            }
            set {
                this.feederField = value;
            }
        }
        
        /// <remarks/>
        public int Qana {
            get {
                return this.qanaField;
            }
            set {
                this.qanaField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsFeeder {
        
        private string feederField;
        
        private string sheetNoField;
        
        private int lastCountField;
        
        private int repairCountField;
        
        private int usedCountField;
        
        private int failCountField;
        
        private string rLCNField;
        
        private int ngField;
        
        /// <remarks/>
        public string Feeder {
            get {
                return this.feederField;
            }
            set {
                this.feederField = value;
            }
        }
        
        /// <remarks/>
        public string SheetNo {
            get {
                return this.sheetNoField;
            }
            set {
                this.sheetNoField = value;
            }
        }
        
        /// <remarks/>
        public int LastCount {
            get {
                return this.lastCountField;
            }
            set {
                this.lastCountField = value;
            }
        }
        
        /// <remarks/>
        public int RepairCount {
            get {
                return this.repairCountField;
            }
            set {
                this.repairCountField = value;
            }
        }
        
        /// <remarks/>
        public int UsedCount {
            get {
                return this.usedCountField;
            }
            set {
                this.usedCountField = value;
            }
        }
        
        /// <remarks/>
        public int FailCount {
            get {
                return this.failCountField;
            }
            set {
                this.failCountField = value;
            }
        }
        
        /// <remarks/>
        public string RLCN {
            get {
                return this.rLCNField;
            }
            set {
                this.rLCNField = value;
            }
        }
        
        /// <remarks/>
        public int NG {
            get {
                return this.ngField;
            }
            set {
                this.ngField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsRLC {
        
        private string rLCNField;
        
        private string itemField;
        
        private string barcField;
        
        private string lotNField;
        
        private string brandField;
        
        private string bodyMarkField;
        
        private int qORIField;
        
        private string rLC_SheetnoField;
        
        private int rLCField;
        
        private int qANAField;
        
        private string polarityField;
        
        private bool checkLabelField;
        
        /// <remarks/>
        public string RLCN {
            get {
                return this.rLCNField;
            }
            set {
                this.rLCNField = value;
            }
        }
        
        /// <remarks/>
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public string Barc {
            get {
                return this.barcField;
            }
            set {
                this.barcField = value;
            }
        }
        
        /// <remarks/>
        public string LotN {
            get {
                return this.lotNField;
            }
            set {
                this.lotNField = value;
            }
        }
        
        /// <remarks/>
        public string Brand {
            get {
                return this.brandField;
            }
            set {
                this.brandField = value;
            }
        }
        
        /// <remarks/>
        public string BodyMark {
            get {
                return this.bodyMarkField;
            }
            set {
                this.bodyMarkField = value;
            }
        }
        
        /// <remarks/>
        public int QORI {
            get {
                return this.qORIField;
            }
            set {
                this.qORIField = value;
            }
        }
        
        /// <remarks/>
        public string RLC_Sheetno {
            get {
                return this.rLC_SheetnoField;
            }
            set {
                this.rLC_SheetnoField = value;
            }
        }
        
        /// <remarks/>
        public int RLC {
            get {
                return this.rLCField;
            }
            set {
                this.rLCField = value;
            }
        }
        
        /// <remarks/>
        public int QANA {
            get {
                return this.qANAField;
            }
            set {
                this.qANAField = value;
            }
        }
        
        /// <remarks/>
        public string Polarity {
            get {
                return this.polarityField;
            }
            set {
                this.polarityField = value;
            }
        }
        
        /// <remarks/>
        public bool CheckLabel {
            get {
                return this.checkLabelField;
            }
            set {
                this.checkLabelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsReel {
        
        private clsRLC rLCsField;
        
        private clsFeeder feedersField;
        
        private clsZone zonesField;
        
        private string sheetnoField;
        
        private string wOPKIDField;
        
        private int pickSNField;
        
        private int putIn_QtyField;
        
        private int tray_QtyField;
        
        /// <remarks/>
        public clsRLC RLCs {
            get {
                return this.rLCsField;
            }
            set {
                this.rLCsField = value;
            }
        }
        
        /// <remarks/>
        public clsFeeder Feeders {
            get {
                return this.feedersField;
            }
            set {
                this.feedersField = value;
            }
        }
        
        /// <remarks/>
        public clsZone Zones {
            get {
                return this.zonesField;
            }
            set {
                this.zonesField = value;
            }
        }
        
        /// <remarks/>
        public string Sheetno {
            get {
                return this.sheetnoField;
            }
            set {
                this.sheetnoField = value;
            }
        }
        
        /// <remarks/>
        public string WOPKID {
            get {
                return this.wOPKIDField;
            }
            set {
                this.wOPKIDField = value;
            }
        }
        
        /// <remarks/>
        public int PickSN {
            get {
                return this.pickSNField;
            }
            set {
                this.pickSNField = value;
            }
        }
        
        /// <remarks/>
        public int PutIn_Qty {
            get {
                return this.putIn_QtyField;
            }
            set {
                this.putIn_QtyField = value;
            }
        }
        
        /// <remarks/>
        public int Tray_Qty {
            get {
                return this.tray_QtyField;
            }
            set {
                this.tray_QtyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsPKList {
        
        private string zoneField;
        
        private string itemField;
        
        private int qtyPerField;
        
        private string mZoneField;
        
        private string feedField;
        
        private bool readyField;
        
        private string polarityField;
        
        /// <remarks/>
        public string Zone {
            get {
                return this.zoneField;
            }
            set {
                this.zoneField = value;
            }
        }
        
        /// <remarks/>
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public int QtyPer {
            get {
                return this.qtyPerField;
            }
            set {
                this.qtyPerField = value;
            }
        }
        
        /// <remarks/>
        public string MZone {
            get {
                return this.mZoneField;
            }
            set {
                this.mZoneField = value;
            }
        }
        
        /// <remarks/>
        public string Feed {
            get {
                return this.feedField;
            }
            set {
                this.feedField = value;
            }
        }
        
        /// <remarks/>
        public bool Ready {
            get {
                return this.readyField;
            }
            set {
                this.readyField = value;
            }
        }
        
        /// <remarks/>
        public string Polarity {
            get {
                return this.polarityField;
            }
            set {
                this.polarityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsSheet {
        
        private string sheetNoField;
        
        private string wOPKIDField;
        
        private int pICKSNField;
        
        private int oP_ModeField;
        
        private string moField;
        
        private string locaField;
        
        private int combineField;
        
        private string sPNField;
        
        private string lineField;
        
        private int mcnoField;
        
        private int faceField;
        
        private int statField;
        
        private int stepSNField;
        
        private int zonesField;
        
        /// <remarks/>
        public string SheetNo {
            get {
                return this.sheetNoField;
            }
            set {
                this.sheetNoField = value;
            }
        }
        
        /// <remarks/>
        public string WOPKID {
            get {
                return this.wOPKIDField;
            }
            set {
                this.wOPKIDField = value;
            }
        }
        
        /// <remarks/>
        public int PICKSN {
            get {
                return this.pICKSNField;
            }
            set {
                this.pICKSNField = value;
            }
        }
        
        /// <remarks/>
        public int OP_Mode {
            get {
                return this.oP_ModeField;
            }
            set {
                this.oP_ModeField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string Loca {
            get {
                return this.locaField;
            }
            set {
                this.locaField = value;
            }
        }
        
        /// <remarks/>
        public int Combine {
            get {
                return this.combineField;
            }
            set {
                this.combineField = value;
            }
        }
        
        /// <remarks/>
        public string SPN {
            get {
                return this.sPNField;
            }
            set {
                this.sPNField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public int Mcno {
            get {
                return this.mcnoField;
            }
            set {
                this.mcnoField = value;
            }
        }
        
        /// <remarks/>
        public int Face {
            get {
                return this.faceField;
            }
            set {
                this.faceField = value;
            }
        }
        
        /// <remarks/>
        public int Stat {
            get {
                return this.statField;
            }
            set {
                this.statField = value;
            }
        }
        
        /// <remarks/>
        public int StepSN {
            get {
                return this.stepSNField;
            }
            set {
                this.stepSNField = value;
            }
        }
        
        /// <remarks/>
        public int Zones {
            get {
                return this.zonesField;
            }
            set {
                this.zonesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsPKMC {
        
        private string lineField;
        
        private int mcnoField;
        
        private int sideField;
        
        private int cTRL_PortField;
        
        private int cTRL_CodeField;
        
        private string sheetNoField;
        
        private int readyField;
        
        private int verifyField;
        
        private int activeField;
        
        private int lastPOSField;
        
        private string wOPKIDField;
        
        private int pickSNField;
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public int Mcno {
            get {
                return this.mcnoField;
            }
            set {
                this.mcnoField = value;
            }
        }
        
        /// <remarks/>
        public int Side {
            get {
                return this.sideField;
            }
            set {
                this.sideField = value;
            }
        }
        
        /// <remarks/>
        public int CTRL_Port {
            get {
                return this.cTRL_PortField;
            }
            set {
                this.cTRL_PortField = value;
            }
        }
        
        /// <remarks/>
        public int CTRL_Code {
            get {
                return this.cTRL_CodeField;
            }
            set {
                this.cTRL_CodeField = value;
            }
        }
        
        /// <remarks/>
        public string SheetNo {
            get {
                return this.sheetNoField;
            }
            set {
                this.sheetNoField = value;
            }
        }
        
        /// <remarks/>
        public int Ready {
            get {
                return this.readyField;
            }
            set {
                this.readyField = value;
            }
        }
        
        /// <remarks/>
        public int Verify {
            get {
                return this.verifyField;
            }
            set {
                this.verifyField = value;
            }
        }
        
        /// <remarks/>
        public int Active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        public int LastPOS {
            get {
                return this.lastPOSField;
            }
            set {
                this.lastPOSField = value;
            }
        }
        
        /// <remarks/>
        public string WOPKID {
            get {
                return this.wOPKIDField;
            }
            set {
                this.wOPKIDField = value;
            }
        }
        
        /// <remarks/>
        public int PickSN {
            get {
                return this.pickSNField;
            }
            set {
                this.pickSNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsMC {
        
        private string lineField;
        
        private int mcnoField;
        
        private int typeField;
        
        private int mCTypeField;
        
        private string descriptionField;
        
        private int zone_OFSField;
        
        private string sheetNoField;
        
        private int sideField;
        
        private int oP_ModeField;
        
        private int activeField;
        
        private string wOPKIDField;
        
        private int pickSNField;
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public int Mcno {
            get {
                return this.mcnoField;
            }
            set {
                this.mcnoField = value;
            }
        }
        
        /// <remarks/>
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int MCType {
            get {
                return this.mCTypeField;
            }
            set {
                this.mCTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int Zone_OFS {
            get {
                return this.zone_OFSField;
            }
            set {
                this.zone_OFSField = value;
            }
        }
        
        /// <remarks/>
        public string SheetNo {
            get {
                return this.sheetNoField;
            }
            set {
                this.sheetNoField = value;
            }
        }
        
        /// <remarks/>
        public int Side {
            get {
                return this.sideField;
            }
            set {
                this.sideField = value;
            }
        }
        
        /// <remarks/>
        public int OP_Mode {
            get {
                return this.oP_ModeField;
            }
            set {
                this.oP_ModeField = value;
            }
        }
        
        /// <remarks/>
        public int Active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        public string WOPKID {
            get {
                return this.wOPKIDField;
            }
            set {
                this.wOPKIDField = value;
            }
        }
        
        /// <remarks/>
        public int PickSN {
            get {
                return this.pickSNField;
            }
            set {
                this.pickSNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class clsPL {
        
        private clsMC mcField;
        
        private clsPKMC[] pKMCsField;
        
        private clsSheet sheetField;
        
        private clsPKList[] pKListsField;
        
        private clsReel reelField;
        
        private clsStep pickingStepField;
        
        private clsLog logField;
        
        private int sideField;
        
        private int oP_ModeField;
        
        private int funcField;
        
        private string zoneField;
        
        private bool newStepField;
        
        private int logSNField;
        
        private string oKBarcodeField;
        
        private string inputBarcodeField;
        
        private string pLEventField;
        
        /// <remarks/>
        public clsMC MC {
            get {
                return this.mcField;
            }
            set {
                this.mcField = value;
            }
        }
        
        /// <remarks/>
        public clsPKMC[] PKMCs {
            get {
                return this.pKMCsField;
            }
            set {
                this.pKMCsField = value;
            }
        }
        
        /// <remarks/>
        public clsSheet Sheet {
            get {
                return this.sheetField;
            }
            set {
                this.sheetField = value;
            }
        }
        
        /// <remarks/>
        public clsPKList[] PKLists {
            get {
                return this.pKListsField;
            }
            set {
                this.pKListsField = value;
            }
        }
        
        /// <remarks/>
        public clsReel Reel {
            get {
                return this.reelField;
            }
            set {
                this.reelField = value;
            }
        }
        
        /// <remarks/>
        public clsStep PickingStep {
            get {
                return this.pickingStepField;
            }
            set {
                this.pickingStepField = value;
            }
        }
        
        /// <remarks/>
        public clsLog Log {
            get {
                return this.logField;
            }
            set {
                this.logField = value;
            }
        }
        
        /// <remarks/>
        public int Side {
            get {
                return this.sideField;
            }
            set {
                this.sideField = value;
            }
        }
        
        /// <remarks/>
        public int OP_Mode {
            get {
                return this.oP_ModeField;
            }
            set {
                this.oP_ModeField = value;
            }
        }
        
        /// <remarks/>
        public int Func {
            get {
                return this.funcField;
            }
            set {
                this.funcField = value;
            }
        }
        
        /// <remarks/>
        public string Zone {
            get {
                return this.zoneField;
            }
            set {
                this.zoneField = value;
            }
        }
        
        /// <remarks/>
        public bool NewStep {
            get {
                return this.newStepField;
            }
            set {
                this.newStepField = value;
            }
        }
        
        /// <remarks/>
        public int LogSN {
            get {
                return this.logSNField;
            }
            set {
                this.logSNField = value;
            }
        }
        
        /// <remarks/>
        public string OKBarcode {
            get {
                return this.oKBarcodeField;
            }
            set {
                this.oKBarcodeField = value;
            }
        }
        
        /// <remarks/>
        public string InputBarcode {
            get {
                return this.inputBarcodeField;
            }
            set {
                this.inputBarcodeField = value;
            }
        }
        
        /// <remarks/>
        public string PLEvent {
            get {
                return this.pLEventField;
            }
            set {
                this.pLEventField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsMOAndBoardInfo {
        
        private clsPL clsPLField;
        
        private string moField;
        
        private string sPNField;
        
        private string uPNField;
        
        private string unitPerPCBField;
        
        private string sheetNoField;
        
        private int inputQtyField;
        
        private int mOLotField;
        
        /// <remarks/>
        public clsPL clsPL {
            get {
                return this.clsPLField;
            }
            set {
                this.clsPLField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string SPN {
            get {
                return this.sPNField;
            }
            set {
                this.sPNField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string UnitPerPCB {
            get {
                return this.unitPerPCBField;
            }
            set {
                this.unitPerPCBField = value;
            }
        }
        
        /// <remarks/>
        public string SheetNo {
            get {
                return this.sheetNoField;
            }
            set {
                this.sheetNoField = value;
            }
        }
        
        /// <remarks/>
        public int InputQty {
            get {
                return this.inputQtyField;
            }
            set {
                this.inputQtyField = value;
            }
        }
        
        /// <remarks/>
        public int MOLot {
            get {
                return this.mOLotField;
            }
            set {
                this.mOLotField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsInfoNameValue {
        
        private string infoNameField;
        
        private string infoValueField;
        
        /// <remarks/>
        public string InfoName {
            get {
                return this.infoNameField;
            }
            set {
                this.infoNameField = value;
            }
        }
        
        /// <remarks/>
        public string InfoValue {
            get {
                return this.infoValueField;
            }
            set {
                this.infoValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsAutoStickLabelPN {
        
        private string resultField;
        
        private string modelFamilyField;
        
        private string cPNField;
        
        private string cPNTypeField;
        
        private string locationField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string CPN {
            get {
                return this.cPNField;
            }
            set {
                this.cPNField = value;
            }
        }
        
        /// <remarks/>
        public string CPNType {
            get {
                return this.cPNTypeField;
            }
            set {
                this.cPNTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsKeyValue {
        
        private string resultField;
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsTVKeyItem {
        
        private string keyTypeField;
        
        private string keyValueField;
        
        private string keyValue2Field;
        
        /// <remarks/>
        public string KeyType {
            get {
                return this.keyTypeField;
            }
            set {
                this.keyTypeField = value;
            }
        }
        
        /// <remarks/>
        public string KeyValue {
            get {
                return this.keyValueField;
            }
            set {
                this.keyValueField = value;
            }
        }
        
        /// <remarks/>
        public string KeyValue2 {
            get {
                return this.keyValue2Field;
            }
            set {
                this.keyValue2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsTVKeyData {
        
        private clsTVKeyItem[] tVKeyItemsField;
        
        /// <remarks/>
        public clsTVKeyItem[] TVKeyItems {
            get {
                return this.tVKeyItemsField;
            }
            set {
                this.tVKeyItemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsEngravingInfo {
        
        private string resultField;
        
        private string uSNField;
        
        private string nextStageField;
        
        private string uPNField;
        
        private string snField;
        
        private string moField;
        
        private string createDateField;
        
        private string cPNField;
        
        private string wLANCPNField;
        
        private string rATINGCPNField;
        
        private string eNGRAVINGFLAGField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string NextStage {
            get {
                return this.nextStageField;
            }
            set {
                this.nextStageField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string SN {
            get {
                return this.snField;
            }
            set {
                this.snField = value;
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public string CPN {
            get {
                return this.cPNField;
            }
            set {
                this.cPNField = value;
            }
        }
        
        /// <remarks/>
        public string WLANCPN {
            get {
                return this.wLANCPNField;
            }
            set {
                this.wLANCPNField = value;
            }
        }
        
        /// <remarks/>
        public string RATINGCPN {
            get {
                return this.rATINGCPNField;
            }
            set {
                this.rATINGCPNField = value;
            }
        }
        
        /// <remarks/>
        public string ENGRAVINGFLAG {
            get {
                return this.eNGRAVINGFLAGField;
            }
            set {
                this.eNGRAVINGFLAGField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsUSNIDValue {
        
        private string uSNField;
        
        private string iDValueField;
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string IDValue {
            get {
                return this.iDValueField;
            }
            set {
                this.iDValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsMOIDValue {
        
        private string moField;
        
        private clsUSNIDValue[] uSNIDValueField;
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public clsUSNIDValue[] USNIDValue {
            get {
                return this.uSNIDValueField;
            }
            set {
                this.uSNIDValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsJDMD3FileJobInfo {
        
        private string resultField;
        
        private string requestIDField;
        
        private string plantField;
        
        private string requestDateField;
        
        private string statusField;
        
        private string requestTypeField;
        
        private string fileNameField;
        
        private string localFilePathField;
        
        private string errorMessageField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string RequestID {
            get {
                return this.requestIDField;
            }
            set {
                this.requestIDField = value;
            }
        }
        
        /// <remarks/>
        public string Plant {
            get {
                return this.plantField;
            }
            set {
                this.plantField = value;
            }
        }
        
        /// <remarks/>
        public string RequestDate {
            get {
                return this.requestDateField;
            }
            set {
                this.requestDateField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string RequestType {
            get {
                return this.requestTypeField;
            }
            set {
                this.requestTypeField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string LocalFilePath {
            get {
                return this.localFilePathField;
            }
            set {
                this.localFilePathField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsUnitCfiHwInfo {
        
        private string unitSerialNumberField;
        
        private string soundCardField;
        
        private string vIDMemoryField;
        
        private string cDTypeField;
        
        /// <remarks/>
        public string UnitSerialNumber {
            get {
                return this.unitSerialNumberField;
            }
            set {
                this.unitSerialNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SoundCard {
            get {
                return this.soundCardField;
            }
            set {
                this.soundCardField = value;
            }
        }
        
        /// <remarks/>
        public string VIDMemory {
            get {
                return this.vIDMemoryField;
            }
            set {
                this.vIDMemoryField = value;
            }
        }
        
        /// <remarks/>
        public string CDType {
            get {
                return this.cDTypeField;
            }
            set {
                this.cDTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsUnitCfiData {
        
        private string resultField;
        
        private string unitSerialNumberField;
        
        private string sINumberField;
        
        private string isCFIField;
        
        private string isK661HField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string UnitSerialNumber {
            get {
                return this.unitSerialNumberField;
            }
            set {
                this.unitSerialNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SINumber {
            get {
                return this.sINumberField;
            }
            set {
                this.sINumberField = value;
            }
        }
        
        /// <remarks/>
        public string IsCFI {
            get {
                return this.isCFIField;
            }
            set {
                this.isCFIField = value;
            }
        }
        
        /// <remarks/>
        public string IsK661H {
            get {
                return this.isK661HField;
            }
            set {
                this.isK661HField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsSINumberInfo {
        
        private string resultField;
        
        private string sINumberField;
        
        private string revisionField;
        
        private string sISyncStatusField;
        
        private string lastUseTimeField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string SINumber {
            get {
                return this.sINumberField;
            }
            set {
                this.sINumberField = value;
            }
        }
        
        /// <remarks/>
        public string Revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
            }
        }
        
        /// <remarks/>
        public string SISyncStatus {
            get {
                return this.sISyncStatusField;
            }
            set {
                this.sISyncStatusField = value;
            }
        }
        
        /// <remarks/>
        public string LastUseTime {
            get {
                return this.lastUseTimeField;
            }
            set {
                this.lastUseTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsComponent {
        
        private string componentPNField;
        
        private string componentSNField;
        
        private string componentCategoryField;
        
        /// <remarks/>
        public string ComponentPN {
            get {
                return this.componentPNField;
            }
            set {
                this.componentPNField = value;
            }
        }
        
        /// <remarks/>
        public string ComponentSN {
            get {
                return this.componentSNField;
            }
            set {
                this.componentSNField = value;
            }
        }
        
        /// <remarks/>
        public string ComponentCategory {
            get {
                return this.componentCategoryField;
            }
            set {
                this.componentCategoryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsNodeData {
        
        private int nodeSeqField;
        
        private string nodeSerialNumberField;
        
        private string nodeServiceTagField;
        
        private clsComponent[] componentsField;
        
        /// <remarks/>
        public int NodeSeq {
            get {
                return this.nodeSeqField;
            }
            set {
                this.nodeSeqField = value;
            }
        }
        
        /// <remarks/>
        public string NodeSerialNumber {
            get {
                return this.nodeSerialNumberField;
            }
            set {
                this.nodeSerialNumberField = value;
            }
        }
        
        /// <remarks/>
        public string NodeServiceTag {
            get {
                return this.nodeServiceTagField;
            }
            set {
                this.nodeServiceTagField = value;
            }
        }
        
        /// <remarks/>
        public clsComponent[] Components {
            get {
                return this.componentsField;
            }
            set {
                this.componentsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsDcsChassisInfo {
        
        private string cRDNumberField;
        
        private clsNodeData[] nodesField;
        
        /// <remarks/>
        public string CRDNumber {
            get {
                return this.cRDNumberField;
            }
            set {
                this.cRDNumberField = value;
            }
        }
        
        /// <remarks/>
        public clsNodeData[] Nodes {
            get {
                return this.nodesField;
            }
            set {
                this.nodesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsSonyIDData {
        
        private string iDCodeField;
        
        private string iDDataField;
        
        private string iDTagField;
        
        private short scrapFlagField;
        
        /// <remarks/>
        public string IDCode {
            get {
                return this.iDCodeField;
            }
            set {
                this.iDCodeField = value;
            }
        }
        
        /// <remarks/>
        public string IDData {
            get {
                return this.iDDataField;
            }
            set {
                this.iDDataField = value;
            }
        }
        
        /// <remarks/>
        public string IDTag {
            get {
                return this.iDTagField;
            }
            set {
                this.iDTagField = value;
            }
        }
        
        /// <remarks/>
        public short ScrapFlag {
            get {
                return this.scrapFlagField;
            }
            set {
                this.scrapFlagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsPreparedMO {
        
        private string moField;
        
        private short minSeqField;
        
        private short maxSeqField;
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public short MinSeq {
            get {
                return this.minSeqField;
            }
            set {
                this.minSeqField = value;
            }
        }
        
        /// <remarks/>
        public short MaxSeq {
            get {
                return this.maxSeqField;
            }
            set {
                this.maxSeqField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsTestData {
        
        private string uSNField;
        
        private TestDataType dataTypeField;
        
        private string patternField;
        
        private int patternSeqField;
        
        private double valueField;
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public TestDataType DataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Pattern {
            get {
                return this.patternField;
            }
            set {
                this.patternField = value;
            }
        }
        
        /// <remarks/>
        public int PatternSeq {
            get {
                return this.patternSeqField;
            }
            set {
                this.patternSeqField = value;
            }
        }
        
        /// <remarks/>
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public enum TestDataType {
        
        /// <remarks/>
        sRGB,
        
        /// <remarks/>
        AdobeRGB,
        
        /// <remarks/>
        GrayTracking,
        
        /// <remarks/>
        Gamma,
        
        /// <remarks/>
        Color,
        
        /// <remarks/>
        Brightness,
        
        /// <remarks/>
        sRGB_X,
        
        /// <remarks/>
        sRGB_Y,
        
        /// <remarks/>
        Adobe_X,
        
        /// <remarks/>
        Adobe_Y,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsSkuBomData {
        
        private string skuPNField;
        
        private string categoryField;
        
        private string cPNField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string SkuPN {
            get {
                return this.skuPNField;
            }
            set {
                this.skuPNField = value;
            }
        }
        
        /// <remarks/>
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public string CPN {
            get {
                return this.cPNField;
            }
            set {
                this.cPNField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsSWCPN {
        
        private string cPNField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string CPN {
            get {
                return this.cPNField;
            }
            set {
                this.cPNField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsRequestItem {
        
        private string itemField;
        
        private string valueField;
        
        /// <remarks/>
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsRequestData {
        
        private string moField;
        
        private string modelField;
        
        private string uPNField;
        
        private string modelFamilyField;
        
        private string poField;
        
        private string resultField;
        
        private clsRequestItem[] requestItemField;
        
        private string customerUPNField;
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string PO {
            get {
                return this.poField;
            }
            set {
                this.poField = value;
            }
        }
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public clsRequestItem[] RequestItem {
            get {
                return this.requestItemField;
            }
            set {
                this.requestItemField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerUPN {
            get {
                return this.customerUPNField;
            }
            set {
                this.customerUPNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsSPCConfigItem {
        
        private string sPCTypeField;
        
        private string sPCItemField;
        
        private string sPCSUBITEMField;
        
        private string upperLimitField;
        
        private string lowerLimitField;
        
        private int enableField;
        
        /// <remarks/>
        public string SPCType {
            get {
                return this.sPCTypeField;
            }
            set {
                this.sPCTypeField = value;
            }
        }
        
        /// <remarks/>
        public string SPCItem {
            get {
                return this.sPCItemField;
            }
            set {
                this.sPCItemField = value;
            }
        }
        
        /// <remarks/>
        public string SPCSUBITEM {
            get {
                return this.sPCSUBITEMField;
            }
            set {
                this.sPCSUBITEMField = value;
            }
        }
        
        /// <remarks/>
        public string UpperLimit {
            get {
                return this.upperLimitField;
            }
            set {
                this.upperLimitField = value;
            }
        }
        
        /// <remarks/>
        public string LowerLimit {
            get {
                return this.lowerLimitField;
            }
            set {
                this.lowerLimitField = value;
            }
        }
        
        /// <remarks/>
        public int Enable {
            get {
                return this.enableField;
            }
            set {
                this.enableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsSPCConfig {
        
        private string moField;
        
        private string modelField;
        
        private string uPNField;
        
        private string modelFamilyField;
        
        private clsSPCConfigItem[] sPCConfigItemsField;
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                return this.modelFamilyField;
            }
            set {
                this.modelFamilyField = value;
            }
        }
        
        /// <remarks/>
        public clsSPCConfigItem[] SPCConfigItems {
            get {
                return this.sPCConfigItemsField;
            }
            set {
                this.sPCConfigItemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsMessage {
        
        private string idField;
        
        private string messageField;
        
        private string languageField;
        
        private string moduleNameField;
        
        private string typeField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public string ModuleName {
            get {
                return this.moduleNameField;
            }
            set {
                this.moduleNameField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsMOItem {
        
        private string resultField;
        
        private string cPNField;
        
        private string categoryField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string CPN {
            get {
                return this.cPNField;
            }
            set {
                this.cPNField = value;
            }
        }
        
        /// <remarks/>
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsGetUSNInfoResult {
        
        private string resultField;
        
        private string uSNField;
        
        private string modelField;
        
        private string productCodeField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        public string ProductCode {
            get {
                return this.productCodeField;
            }
            set {
                this.productCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsGetTestSuiteInfoResult {
        
        private string resultField;
        
        private string uSNField;
        
        private string stageCodeField;
        
        private string modelField;
        
        private string workStationField;
        
        private string programVersionField;
        
        private string flowVersionField;
        
        private string fileNameField;
        
        private string filePathField;
        
        private string checkSumField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string USN {
            get {
                return this.uSNField;
            }
            set {
                this.uSNField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public string ProgramVersion {
            get {
                return this.programVersionField;
            }
            set {
                this.programVersionField = value;
            }
        }
        
        /// <remarks/>
        public string FlowVersion {
            get {
                return this.flowVersionField;
            }
            set {
                this.flowVersionField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string FilePath {
            get {
                return this.filePathField;
            }
            set {
                this.filePathField = value;
            }
        }
        
        /// <remarks/>
        public string CheckSum {
            get {
                return this.checkSumField;
            }
            set {
                this.checkSumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsCA210OffsetResult {
        
        private string resultField;
        
        private string cA210SNField;
        
        private string modelField;
        
        private string probeSNField;
        
        private string sourceField;
        
        private string colorTemperatureField;
        
        private string lineField;
        
        private string workStationField;
        
        private string targetGainAField;
        
        private string targetGainBField;
        
        private string targetGainLVField;
        
        private string targetOffsetAField;
        
        private string targetOffsetBField;
        
        private string targetOffsetLVField;
        
        private string target100IreAField;
        
        private string target100IreBField;
        
        private string target100IreLVField;
        
        private string offsetGainAField;
        
        private string offsetGainBField;
        
        private string offsetGainLVField;
        
        private string offsetOffsetAField;
        
        private string offsetOffsetBField;
        
        private string offsetOffsetLVField;
        
        private string offset100IreAField;
        
        private string offset100IreBField;
        
        private string offset100IreLVField;
        
        private string recordTimeField;
        
        private string userIDField;
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string CA210SN {
            get {
                return this.cA210SNField;
            }
            set {
                this.cA210SNField = value;
            }
        }
        
        /// <remarks/>
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        public string ProbeSN {
            get {
                return this.probeSNField;
            }
            set {
                this.probeSNField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public string ColorTemperature {
            get {
                return this.colorTemperatureField;
            }
            set {
                this.colorTemperatureField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public string TargetGainA {
            get {
                return this.targetGainAField;
            }
            set {
                this.targetGainAField = value;
            }
        }
        
        /// <remarks/>
        public string TargetGainB {
            get {
                return this.targetGainBField;
            }
            set {
                this.targetGainBField = value;
            }
        }
        
        /// <remarks/>
        public string TargetGainLV {
            get {
                return this.targetGainLVField;
            }
            set {
                this.targetGainLVField = value;
            }
        }
        
        /// <remarks/>
        public string TargetOffsetA {
            get {
                return this.targetOffsetAField;
            }
            set {
                this.targetOffsetAField = value;
            }
        }
        
        /// <remarks/>
        public string TargetOffsetB {
            get {
                return this.targetOffsetBField;
            }
            set {
                this.targetOffsetBField = value;
            }
        }
        
        /// <remarks/>
        public string TargetOffsetLV {
            get {
                return this.targetOffsetLVField;
            }
            set {
                this.targetOffsetLVField = value;
            }
        }
        
        /// <remarks/>
        public string Target100IreA {
            get {
                return this.target100IreAField;
            }
            set {
                this.target100IreAField = value;
            }
        }
        
        /// <remarks/>
        public string Target100IreB {
            get {
                return this.target100IreBField;
            }
            set {
                this.target100IreBField = value;
            }
        }
        
        /// <remarks/>
        public string Target100IreLV {
            get {
                return this.target100IreLVField;
            }
            set {
                this.target100IreLVField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetGainA {
            get {
                return this.offsetGainAField;
            }
            set {
                this.offsetGainAField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetGainB {
            get {
                return this.offsetGainBField;
            }
            set {
                this.offsetGainBField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetGainLV {
            get {
                return this.offsetGainLVField;
            }
            set {
                this.offsetGainLVField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetOffsetA {
            get {
                return this.offsetOffsetAField;
            }
            set {
                this.offsetOffsetAField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetOffsetB {
            get {
                return this.offsetOffsetBField;
            }
            set {
                this.offsetOffsetBField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetOffsetLV {
            get {
                return this.offsetOffsetLVField;
            }
            set {
                this.offsetOffsetLVField = value;
            }
        }
        
        /// <remarks/>
        public string Offset100IreA {
            get {
                return this.offset100IreAField;
            }
            set {
                this.offset100IreAField = value;
            }
        }
        
        /// <remarks/>
        public string Offset100IreB {
            get {
                return this.offset100IreBField;
            }
            set {
                this.offset100IreBField = value;
            }
        }
        
        /// <remarks/>
        public string Offset100IreLV {
            get {
                return this.offset100IreLVField;
            }
            set {
                this.offset100IreLVField = value;
            }
        }
        
        /// <remarks/>
        public string RecordTime {
            get {
                return this.recordTimeField;
            }
            set {
                this.recordTimeField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsCA210OffsetCheckFlag {
        
        private string cA210SNField;
        
        private string sourceField;
        
        private string colorTemperatureField;
        
        private string lineField;
        
        private string workStationField;
        
        private string targetGainAField;
        
        private string targetGainBField;
        
        private string targetGainLVField;
        
        private string targetOffsetAField;
        
        private string targetOffsetBField;
        
        private string targetOffsetLVField;
        
        private string target100IreAField;
        
        private string target100IreBField;
        
        private string target100IreLVField;
        
        private string offsetGainAField;
        
        private string offsetGainBField;
        
        private string offsetGainLVField;
        
        private string offsetOffsetAField;
        
        private string offsetOffsetBField;
        
        private string offsetOffsetLVField;
        
        private string offset100IreAField;
        
        private string offset100IreBField;
        
        private string offset100IreLVField;
        
        private string userIDField;
        
        /// <remarks/>
        public string CA210SN {
            get {
                return this.cA210SNField;
            }
            set {
                this.cA210SNField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public string ColorTemperature {
            get {
                return this.colorTemperatureField;
            }
            set {
                this.colorTemperatureField = value;
            }
        }
        
        /// <remarks/>
        public string Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string WorkStation {
            get {
                return this.workStationField;
            }
            set {
                this.workStationField = value;
            }
        }
        
        /// <remarks/>
        public string TargetGainA {
            get {
                return this.targetGainAField;
            }
            set {
                this.targetGainAField = value;
            }
        }
        
        /// <remarks/>
        public string TargetGainB {
            get {
                return this.targetGainBField;
            }
            set {
                this.targetGainBField = value;
            }
        }
        
        /// <remarks/>
        public string TargetGainLV {
            get {
                return this.targetGainLVField;
            }
            set {
                this.targetGainLVField = value;
            }
        }
        
        /// <remarks/>
        public string TargetOffsetA {
            get {
                return this.targetOffsetAField;
            }
            set {
                this.targetOffsetAField = value;
            }
        }
        
        /// <remarks/>
        public string TargetOffsetB {
            get {
                return this.targetOffsetBField;
            }
            set {
                this.targetOffsetBField = value;
            }
        }
        
        /// <remarks/>
        public string TargetOffsetLV {
            get {
                return this.targetOffsetLVField;
            }
            set {
                this.targetOffsetLVField = value;
            }
        }
        
        /// <remarks/>
        public string Target100IreA {
            get {
                return this.target100IreAField;
            }
            set {
                this.target100IreAField = value;
            }
        }
        
        /// <remarks/>
        public string Target100IreB {
            get {
                return this.target100IreBField;
            }
            set {
                this.target100IreBField = value;
            }
        }
        
        /// <remarks/>
        public string Target100IreLV {
            get {
                return this.target100IreLVField;
            }
            set {
                this.target100IreLVField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetGainA {
            get {
                return this.offsetGainAField;
            }
            set {
                this.offsetGainAField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetGainB {
            get {
                return this.offsetGainBField;
            }
            set {
                this.offsetGainBField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetGainLV {
            get {
                return this.offsetGainLVField;
            }
            set {
                this.offsetGainLVField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetOffsetA {
            get {
                return this.offsetOffsetAField;
            }
            set {
                this.offsetOffsetAField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetOffsetB {
            get {
                return this.offsetOffsetBField;
            }
            set {
                this.offsetOffsetBField = value;
            }
        }
        
        /// <remarks/>
        public string OffsetOffsetLV {
            get {
                return this.offsetOffsetLVField;
            }
            set {
                this.offsetOffsetLVField = value;
            }
        }
        
        /// <remarks/>
        public string Offset100IreA {
            get {
                return this.offset100IreAField;
            }
            set {
                this.offset100IreAField = value;
            }
        }
        
        /// <remarks/>
        public string Offset100IreB {
            get {
                return this.offset100IreBField;
            }
            set {
                this.offset100IreBField = value;
            }
        }
        
        /// <remarks/>
        public string Offset100IreLV {
            get {
                return this.offset100IreLVField;
            }
            set {
                this.offset100IreLVField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsMO {
        
        private string moField;
        
        private string planDateField;
        
        private string createDateField;
        
        /// <remarks/>
        public string MO {
            get {
                return this.moField;
            }
            set {
                this.moField = value;
            }
        }
        
        /// <remarks/>
        public string PlanDate {
            get {
                return this.planDateField;
            }
            set {
                this.planDateField = value;
            }
        }
        
        /// <remarks/>
        public string CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/Tester.WebService/WebService")]
    public partial class clsCIPlusKey {
        
        private string cIPlusKeyField;
        
        private string stageCodeField;
        
        private string codeTypeField;
        
        private string codeField;
        
        /// <remarks/>
        public string CIPlusKey {
            get {
                return this.cIPlusKeyField;
            }
            set {
                this.cIPlusKeyField = value;
            }
        }
        
        /// <remarks/>
        public string StageCode {
            get {
                return this.stageCodeField;
            }
            set {
                this.stageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CodeType {
            get {
                return this.codeTypeField;
            }
            set {
                this.codeTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDynamicDataCompletedEventHandler(object sender, GetDynamicDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDynamicDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDynamicDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckRouteCompletedEventHandler(object sender, CheckRouteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CompleteCompletedEventHandler(object sender, CompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CompleteWithSingleTrnDataCompletedEventHandler(object sender, CompleteWithSingleTrnDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteWithSingleTrnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteWithSingleTrnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CompleteWithDefectRemarkCompletedEventHandler(object sender, CompleteWithDefectRemarkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteWithDefectRemarkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteWithDefectRemarkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CompleteWithErrorDescriptionCompletedEventHandler(object sender, CompleteWithErrorDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteWithErrorDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteWithErrorDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTVADCCompletedEventHandler(object sender, UploadTVADCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTVADCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTVADCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTVDACCompletedEventHandler(object sender, UploadTVDACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTVDACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTVDACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTVQCCompletedEventHandler(object sender, UploadTVQCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTVQCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTVQCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTVQC1CompletedEventHandler(object sender, UploadTVQC1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTVQC1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTVQC1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadMonitorWhiteBalanceCompletedEventHandler(object sender, UploadMonitorWhiteBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadMonitorWhiteBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadMonitorWhiteBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTVPowerRangeCompletedEventHandler(object sender, UploadTVPowerRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTVPowerRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTVPowerRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTVHDCPKeyCompletedEventHandler(object sender, UploadTVHDCPKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTVHDCPKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTVHDCPKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetHDCPKeyCompletedEventHandler(object sender, GetHDCPKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHDCPKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHDCPKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string HDCPKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTVCIPlusKeyCompletedEventHandler(object sender, UploadTVCIPlusKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTVCIPlusKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTVCIPlusKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCIPlusKeyCompletedEventHandler(object sender, GetCIPlusKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCIPlusKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCIPlusKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string CIPlusKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUSNItemCompletedEventHandler(object sender, GetUSNItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadUSNItemCompletedEventHandler(object sender, UploadUSNItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadUSNItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadUSNItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadUSNItemWithBarcodeValidationCompletedEventHandler(object sender, UploadUSNItemWithBarcodeValidationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadUSNItemWithBarcodeValidationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadUSNItemWithBarcodeValidationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsnIDCompletedEventHandler(object sender, GetUsnIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsnIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsnIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsnIdWithoutCombineCompletedEventHandler(object sender, GetUsnIdWithoutCombineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsnIdWithoutCombineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsnIdWithoutCombineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetHDCPFileNameCompletedEventHandler(object sender, GetHDCPFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHDCPFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHDCPFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadFixtureIDCompletedEventHandler(object sender, UploadFixtureIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFixtureIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFixtureIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadVolTageCompletedEventHandler(object sender, UploadVolTageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadVolTageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadVolTageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTPSKeyValueCompletedEventHandler(object sender, UploadTPSKeyValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTPSKeyValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTPSKeyValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTPSLogCompletedEventHandler(object sender, UploadTPSLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTPSLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTPSLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTPSRetestCompletedEventHandler(object sender, UploadTPSRetestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTPSRetestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTPSRetestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckOPIDCompletedEventHandler(object sender, CheckOPIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOPIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOPIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsnGenealogyCompletedEventHandler(object sender, GetUsnGenealogyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsnGenealogyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsnGenealogyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsMO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsMO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetEDIDFilenameCompletedEventHandler(object sender, GetEDIDFilenameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEDIDFilenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEDIDFilenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadEDIDResultCompletedEventHandler(object sender, UploadEDIDResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadEDIDResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadEDIDResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadMonitorEDIDCompletedEventHandler(object sender, UploadMonitorEDIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadMonitorEDIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadMonitorEDIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTestLogCompletedEventHandler(object sender, UploadTestLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTestLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTestLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadRuninRackUnitStartDateCompletedEventHandler(object sender, UploadRuninRackUnitStartDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadRuninRackUnitStartDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadRuninRackUnitStartDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckTestFixtureCompletedEventHandler(object sender, CheckTestFixtureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTestFixtureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTestFixtureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadUSNInfoCompletedEventHandler(object sender, UploadUSNInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadUSNInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadUSNInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadUSNInfo1CompletedEventHandler(object sender, UploadUSNInfo1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadUSNInfo1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadUSNInfo1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMOInfoCompletedEventHandler(object sender, GetMOInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMOInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMOInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTransactionTimeCompletedEventHandler(object sender, GetTransactionTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetReflowStageCompletedEventHandler(object sender, SetReflowStageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetReflowStageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetReflowStageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSetCA210OffsetTableCompletedEventHandler(object sender, GetSetCA210OffsetTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSetCA210OffsetTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSetCA210OffsetTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsCA210OffsetResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsCA210OffsetResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTestSuiteInfoCompletedEventHandler(object sender, GetTestSuiteInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestSuiteInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestSuiteInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsGetTestSuiteInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsGetTestSuiteInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTestSuiteInfo1CompletedEventHandler(object sender, GetTestSuiteInfo1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestSuiteInfo1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestSuiteInfo1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsGetTestSuiteInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsGetTestSuiteInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUSNInfoCompletedEventHandler(object sender, GetUSNInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsGetUSNInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsGetUSNInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMOItemCompletedEventHandler(object sender, GetMOItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMOItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMOItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsMOItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsMOItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadMonitorLpByUsnCompletedEventHandler(object sender, UploadMonitorLpByUsnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadMonitorLpByUsnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadMonitorLpByUsnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadMonitorLPCompletedEventHandler(object sender, UploadMonitorLPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadMonitorLPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadMonitorLPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckErrorCodeCompletedEventHandler(object sender, CheckErrorCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckErrorCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckErrorCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetRIRackPositionByUSNCompletedEventHandler(object sender, GetRIRackPositionByUSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRIRackPositionByUSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRIRackPositionByUSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RIRackPosition {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUSNByRIRackPositionCompletedEventHandler(object sender, GetUSNByRIRackPositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNByRIRackPositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNByRIRackPositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string UnitSerialNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadDownTimeCompletedEventHandler(object sender, UploadDownTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDownTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDownTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUSNInformationCompletedEventHandler(object sender, GetUSNInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string InfoValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUSNByUSNInfoCompletedEventHandler(object sender, GetUSNByUSNInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNByUSNInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNByUSNInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string UnitSerialNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMessageCompletedEventHandler(object sender, GetMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSPCConfigCompletedEventHandler(object sender, GetSPCConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSPCConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSPCConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsSPCConfig Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsSPCConfig)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUPNInformationCompletedEventHandler(object sender, GetUPNInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUPNInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUPNInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string InfoValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPanelParameterCompletedEventHandler(object sender, GetPanelParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPanelParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPanelParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string PanelParameter {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPanelParameter1CompletedEventHandler(object sender, GetPanelParameter1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPanelParameter1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPanelParameter1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string PanelParameter {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUUTDataCompletedEventHandler(object sender, GetUUTDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUUTDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUUTDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsRequestData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsRequestData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUSNByCSNCompletedEventHandler(object sender, GetUSNByCSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNByCSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNByCSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadCertifyPOCompletedEventHandler(object sender, UploadCertifyPOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCertifyPOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadCertifyPOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSWCPNForUPNCompletedEventHandler(object sender, GetSWCPNForUPNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSWCPNForUPNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSWCPNForUPNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsSWCPN[] SWCPNs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsSWCPN[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUSNInfoByMACCompletedEventHandler(object sender, GetUSNInfoByMACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNInfoByMACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNInfoByMACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ModelFamily {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Model {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string UnitPartNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string MO {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string UnitSerialNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string[] AllMAC {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string ImagePartNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string CheckRouteResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateSyncStatusCompletedEventHandler(object sender, UpdateSyncStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSyncStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSyncStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetEarliestSIListCompletedEventHandler(object sender, GetEarliestSIListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEarliestSIListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEarliestSIListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateDeleteSIInfoCompletedEventHandler(object sender, UpdateDeleteSIInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDeleteSIInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDeleteSIInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvailableGradeListCompletedEventHandler(object sender, GetAvailableGradeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableGradeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableGradeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLastGradeCompletedEventHandler(object sender, GetLastGradeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastGradeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastGradeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckSamplingCompletedEventHandler(object sender, CheckSamplingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSamplingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSamplingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSkuBomDataCompletedEventHandler(object sender, GetSkuBomDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSkuBomDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSkuBomDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsSkuBomData[] SkuBomData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsSkuBomData[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCurrentDBSysdateCompletedEventHandler(object sender, GetCurrentDBSysdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentDBSysdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentDBSysdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUSNByRIPalletIDCompletedEventHandler(object sender, GetUSNByRIPalletIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNByRIPalletIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNByRIPalletIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string UnitSerialNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void BreakUpUSNRIPalletByUSNCompletedEventHandler(object sender, BreakUpUSNRIPalletByUSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BreakUpUSNRIPalletByUSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BreakUpUSNRIPalletByUSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMO53PNItemCompletedEventHandler(object sender, GetMO53PNItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMO53PNItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMO53PNItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Item53PNDesc {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTEModelNameCompletedEventHandler(object sender, GetTEModelNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTEModelNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTEModelNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string TEModelName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMFGTypeByStageCompletedEventHandler(object sender, GetMFGTypeByStageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMFGTypeByStageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMFGTypeByStageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTestEquipmentsCompletedEventHandler(object sender, UploadTestEquipmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTestEquipmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTestEquipmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTestDataCompletedEventHandler(object sender, UploadTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTestEquipments1CompletedEventHandler(object sender, UploadTestEquipments1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTestEquipments1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTestEquipments1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTestData1CompletedEventHandler(object sender, UploadTestData1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTestData1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTestData1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadFGCodeCompletedEventHandler(object sender, UploadFGCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFGCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFGCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPreparedMOListCompletedEventHandler(object sender, GetPreparedMOListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPreparedMOListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPreparedMOListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsPreparedMO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsPreparedMO[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string GetResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUSNlistByRangeCompletedEventHandler(object sender, GetUSNlistByRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUSNlistByRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUSNlistByRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string GetResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadRuninRackUnitStateCompletedEventHandler(object sender, UploadRuninRackUnitStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadRuninRackUnitStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadRuninRackUnitStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadFixtureUsedTimesCompletedEventHandler(object sender, UploadFixtureUsedTimesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFixtureUsedTimesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFixtureUsedTimesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckSFCDLSkillCompletedEventHandler(object sender, CheckSFCDLSkillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSFCDLSkillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSFCDLSkillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadSonyIDDataCompletedEventHandler(object sender, UploadSonyIDDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSonyIDDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadSonyIDDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadSonyIDData1CompletedEventHandler(object sender, UploadSonyIDData1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSonyIDData1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadSonyIDData1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AllocateSonyKeyCompletedEventHandler(object sender, AllocateSonyKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllocateSonyKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllocateSonyKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string IDData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AllocateSonyKey1CompletedEventHandler(object sender, AllocateSonyKey1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllocateSonyKey1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllocateSonyKey1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string KeyQuantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string[] IDDatas {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void BindingUSNRIPalletIDCompletedEventHandler(object sender, BindingUSNRIPalletIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindingUSNRIPalletIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindingUSNRIPalletIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RIPalletID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string UnitSerialNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LinkUSNRIPalletIDCompletedEventHandler(object sender, LinkUSNRIPalletIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkUSNRIPalletIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LinkUSNRIPalletIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDcsChassisInfoCompletedEventHandler(object sender, GetDcsChassisInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDcsChassisInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDcsChassisInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsDcsChassisInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsDcsChassisInfo)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string GetResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCfiNewSiListCompletedEventHandler(object sender, GetCfiNewSiListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCfiNewSiListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCfiNewSiListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCfiSiInfoCompletedEventHandler(object sender, GetCfiSiInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCfiSiInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCfiSiInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsSINumberInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsSINumberInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateCfiSiStatusCompletedEventHandler(object sender, UpdateCfiSiStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCfiSiStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCfiSiStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCfiDataCompletedEventHandler(object sender, GetCfiDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCfiDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCfiDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsUnitCfiData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsUnitCfiData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadCfiHwInfoCompletedEventHandler(object sender, UploadCfiHwInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCfiHwInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadCfiHwInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadBurnInRoomTemperatureCompletedEventHandler(object sender, UploadBurnInRoomTemperatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadBurnInRoomTemperatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadBurnInRoomTemperatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IPCUSNPositionLinkageCompletedEventHandler(object sender, IPCUSNPositionLinkageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IPCUSNPositionLinkageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IPCUSNPositionLinkageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckInOutIPCBurnInRoomCompletedEventHandler(object sender, CheckInOutIPCBurnInRoomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInOutIPCBurnInRoomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInOutIPCBurnInRoomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TransferIPCBurnInLocationCompletedEventHandler(object sender, TransferIPCBurnInLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferIPCBurnInLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferIPCBurnInLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LinkMultiBoardUSNCompletedEventHandler(object sender, LinkMultiBoardUSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkMultiBoardUSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LinkMultiBoardUSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RequstJDMD3FileJobCompletedEventHandler(object sender, RequstJDMD3FileJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequstJDMD3FileJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequstJDMD3FileJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetJDMD3FileJobInfoCompletedEventHandler(object sender, GetJDMD3FileJobInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJDMD3FileJobInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJDMD3FileJobInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsJDMD3FileJobInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsJDMD3FileJobInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateJDMD3FileJobStatusCompletedEventHandler(object sender, UpdateJDMD3FileJobStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateJDMD3FileJobStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateJDMD3FileJobStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAISImageFileNameCompletedEventHandler(object sender, GetAISImageFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAISImageFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAISImageFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAISImageFileName1CompletedEventHandler(object sender, GetAISImageFileName1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAISImageFileName1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAISImageFileName1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetIDValueByMOCompletedEventHandler(object sender, GetIDValueByMOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIDValueByMOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIDValueByMOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsMOIDValue Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsMOIDValue)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetICPNCompletedEventHandler(object sender, GetICPNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetICPNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetICPNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetEngravingInfoCompletedEventHandler(object sender, GetEngravingInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEngravingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEngravingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsEngravingInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsEngravingInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMacSecurityKeyCompletedEventHandler(object sender, GetMacSecurityKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMacSecurityKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMacSecurityKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadRendyResultCompletedEventHandler(object sender, UploadRendyResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadRendyResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadRendyResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadRendyAntiTheftCCIDCompletedEventHandler(object sender, UploadRendyAntiTheftCCIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadRendyAntiTheftCCIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadRendyAntiTheftCCIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTpsUpnInfoCompletedEventHandler(object sender, UploadTpsUpnInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTpsUpnInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTpsUpnInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTeNotReadyMoListCompletedEventHandler(object sender, GetTeNotReadyMoListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeNotReadyMoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeNotReadyMoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] MOs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateTeReadyFlagByMoCompletedEventHandler(object sender, UpdateTeReadyFlagByMoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTeReadyFlagByMoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTeReadyFlagByMoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMoInfoByMoCompletedEventHandler(object sender, GetMoInfoByMoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMoInfoByMoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMoInfoByMoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMOItemByMoCompletedEventHandler(object sender, GetMOItemByMoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMOItemByMoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMOItemByMoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsMOItem[] MOItems {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsMOItem[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTVKeyCompletedEventHandler(object sender, GetTVKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTVKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTVKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsTVKeyData clsTVKeyData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsTVKeyData)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadTVKeyCompletedEventHandler(object sender, UploadTVKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTVKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTVKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefectUsnListCompletedEventHandler(object sender, GetDefectUsnListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefectUsnListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefectUsnListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] UnitSerialNumbers {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsnDefectCompletedEventHandler(object sender, GetUsnDefectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsnDefectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsnDefectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet DataTable {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RosaHddMoLinkCRUDCompletedEventHandler(object sender, RosaHddMoLinkCRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RosaHddMoLinkCRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RosaHddMoLinkCRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLastTransactionDataCompletedEventHandler(object sender, GetLastTransactionDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastTransactionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastTransactionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Workstation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLastFixtureIdCompletedEventHandler(object sender, GetLastFixtureIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastFixtureIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastFixtureIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string FixtureId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsnRepairCompletedEventHandler(object sender, GetUsnRepairCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsnRepairCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsnRepairCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet DataTable {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsnInfoAtStageCompletedEventHandler(object sender, GetUsnInfoAtStageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsnInfoAtStageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsnInfoAtStageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsKeyValue[] KeyValues {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsKeyValue[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadRfEquTestTimeCompletedEventHandler(object sender, UploadRfEquTestTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadRfEquTestTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadRfEquTestTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAutoStickLabelPNCompletedEventHandler(object sender, GetAutoStickLabelPNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAutoStickLabelPNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAutoStickLabelPNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsAutoStickLabelPN[] AutoStickLabelPNs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsAutoStickLabelPN[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RosaSwPoNackRuleCheckCompletedEventHandler(object sender, RosaSwPoNackRuleCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RosaSwPoNackRuleCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RosaSwPoNackRuleCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateEDI860SignalCompletedEventHandler(object sender, UpdateEDI860SignalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEDI860SignalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEDI860SignalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string MESSAGE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsnByIdCompletedEventHandler(object sender, GetUsnByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsnByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsnByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string UnitSerialNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadPcbLotCompletedEventHandler(object sender, UploadPcbLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadPcbLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadPcbLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string UnitSerialNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadEngravingResultCompletedEventHandler(object sender, UploadEngravingResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadEngravingResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadEngravingResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadAstroMoInfoCompletedEventHandler(object sender, UploadAstroMoInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadAstroMoInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadAstroMoInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUpnInfoFromViewCompletedEventHandler(object sender, GetUpnInfoFromViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpnInfoFromViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpnInfoFromViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsInfoNameValue[] InfoNameValues {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsInfoNameValue[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetKeyInfoFromViewCompletedEventHandler(object sender, GetKeyInfoFromViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyInfoFromViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyInfoFromViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsInfoNameValue[] InfoNameValues {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsInfoNameValue[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadRuninRackStatusCompletedEventHandler(object sender, UploadRuninRackStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadRuninRackStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadRuninRackStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AllocateAndroidKeyCompletedEventHandler(object sender, AllocateAndroidKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllocateAndroidKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllocateAndroidKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckEngravingBoradBarcLotNoCompletedEventHandler(object sender, CheckEngravingBoradBarcLotNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckEngravingBoradBarcLotNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckEngravingBoradBarcLotNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AllocateAwaitingUnitSnListCompletedEventHandler(object sender, AllocateAwaitingUnitSnListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllocateAwaitingUnitSnListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllocateAwaitingUnitSnListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string UnitSerialNumberList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadCompleteEngravingUnitSnCompletedEventHandler(object sender, UploadCompleteEngravingUnitSnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCompleteEngravingUnitSnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadCompleteEngravingUnitSnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMoAndBoardInfoCompletedEventHandler(object sender, GetMoAndBoardInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMoAndBoardInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMoAndBoardInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsMOAndBoardInfo ClassMOAndBoardInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsMOAndBoardInfo)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void Get2SLabelInfoCompletedEventHandler(object sender, Get2SLabelInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get2SLabelInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get2SLabelInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public cls2SLabelInfo Class2SLabelInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((cls2SLabelInfo)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void Upload2SLabelInfoCompletedEventHandler(object sender, Upload2SLabelInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Upload2SLabelInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Upload2SLabelInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsnInformationListCompletedEventHandler(object sender, GetUsnInformationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsnInformationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsnInformationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsInfoNameValue[] InfoNameValues {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsInfoNameValue[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTvDacDataListCompletedEventHandler(object sender, GetTvDacDataListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTvDacDataListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTvDacDataListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsTvDacData[] TvDacDataArray {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsTvDacData[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SwapUSNCompletedEventHandler(object sender, SwapUSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SwapUSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SwapUSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetEllaRackLoctionCompletedEventHandler(object sender, GetEllaRackLoctionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEllaRackLoctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEllaRackLoctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public clsInfoNameValue[] InfoNameValues {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsInfoNameValue[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetWebServiceInfoCompletedEventHandler(object sender, GetWebServiceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebServiceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebServiceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsWSInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsWSInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetWebServiceConfigCompletedEventHandler(object sender, GetWebServiceConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebServiceConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebServiceConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public clsWSConfig[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((clsWSConfig[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591